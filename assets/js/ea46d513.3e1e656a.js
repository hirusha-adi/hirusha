"use strict";(self.webpackChunkhirusha=self.webpackChunkhirusha||[]).push([[5113],{8080:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>a,frontMatter:()=>t,metadata:()=>d,toc:()=>o});var s=r(1527),i=r(6213);const t={title:"Notes - Recursion",sidebar_label:"Notes",slug:"notes",sidebar_position:1},l=void 0,d={id:"study/cie_al/computer_science/paper_4/my_study_notes/chapter_24/notes",title:"Notes - Recursion",description:"- Quick Introduction:",source:"@site/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_24/notes.mdx",sourceDirName:"study/cie_al/computer_science/paper_4/my_study_notes/chapter_24",slug:"/study/cie_al/computer_science/paper_4/my_study_notes/chapter_24/notes",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_24/notes",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Notes - Recursion",sidebar_label:"Notes",slug:"notes",sidebar_position:1},sidebar:"study",previous:{title:"Chapter 24 - Recursion",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_24/"},next:{title:"ESQ",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_24/esq"}},c={},o=[{value:"Concept of recursion",id:"concept-of-recursion",level:2},{value:"Programming a recursive subroutine",id:"programming-a-recursive-subroutine",level:2},{value:"Tracing a recursive subroutine",id:"tracing-a-recursive-subroutine",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Example 2",id:"example-2",level:3},{value:"Example 3",id:"example-3",level:3},{value:"Pros and Cons of Recursion",id:"pros-and-cons-of-recursion",level:2},{value:"Advantages",id:"advantages",level:3},{value:"Disadvantages",id:"disadvantages",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Quick Introduction:"}),"\n"]}),"\n",(0,s.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/rf60MejMz3E?si=NgQM5I0Oc9xnAe1A",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Basics:"}),"\n"]}),"\n",(0,s.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/ivl5-snqul8?si=vI8PsfpI79m8zp2v",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Best Video about recursion:"}),"\n"]}),"\n",(0,s.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/8lhxIOAfDss?si=KGGE2TsE8B_hBfSV",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://www.programiz.com/python-programming/recursion",children:"Python Recursion"})," by programiz.com"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://realpython.com/python-recursion/",children:"Recursion in Python: An Introduction"})," by realpython.com"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"concept-of-recursion",children:"Concept of recursion"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Recursive routine: A function or procedure defined in terms of itself."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Classic example: Factorial function (n!)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"with base case (0! = 1)"}),"\n",(0,s.jsx)(n.li,{children:"and general case (n! = n \xd7 (n \u2212 1)!)"}),"\n",(0,s.jsx)(n.li,{children:"e.g., 4! = 4 \xd7 3 \xd7 2 \xd7 1 = 24"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Recursive solutions involve bringing the general case closer to the base case with each recursion."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Key Terms:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Base case"}),": An explicit solution to a recursive function."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"General case"}),": Definition of a recursive function in terms of itself."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"programming-a-recursive-subroutine",children:"Programming a recursive subroutine"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"A recursive subroutine must:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"have a base case"}),"\n",(0,s.jsx)(n.li,{children:"have a general case"}),"\n",(0,s.jsx)(n.li,{children:"reach the base case aft er a finite (limited) number of calls to itself."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Iterative Approach"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Using a for loop\r\ndef factorial_iterative(n):\r\n    result = 1\r\n    for i in range(1, n + 1):\r\n        result *= i\r\n    return result\r\n\r\n# Using a while loop\r\ndef factorial_while(n):\r\n    result = 1\r\n    while n > 1:\r\n        result *= n\r\n        n -= 1\r\n    return result\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Recursive Approach"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def factorial_recursive(n):\r\n    if n < 0: # this is a nice to have\r\n        return "Factorial is not defined for negative numbers"\r\n    elif n == 0 or n == 1:\r\n        return 1\r\n    else:\r\n        return n * factorial_recursive(n - 1)\r\n\r\n# as a one line lambda function\r\nfact = lambda n: 1 if ((n==0) or (n==1)) else n*fact(n-1)\n'})}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"Pseudocode"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Iterative Approach"}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"FUNCTION Factorial(n : INTEGER) RETURNS INTEGER\r\n    Result \u2190 1\r\n    FOR i \u2190 1 TO n\r\n        Result \u2190 Result * i\r\n    NEXT i\r\n    RETURN Result\r\nENDFUNCTION\n"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Recursive Approach"}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"FUNCTION Factorial(n : INTEGER) RETURNS INTEGER\r\n    IF n = 0 THEN\r\n        Result \u2190 1\r\n    ELSE\r\n        Result \u2190 n * Factorial(n - 1)\r\n    ENDIF\r\n    RETURN Result\r\nENDFUNCTION\n"})})]}),"\n",(0,s.jsx)(n.h2,{id:"tracing-a-recursive-subroutine",children:"Tracing a recursive subroutine"}),"\n",(0,s.jsx)(n.h3,{id:"example-1",children:"Example 1"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"basically dry run the algorithm"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"consider this code below:"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def CountUpTo(n):\r\n    if n > 0:\r\n        CountUpTo(n - 1)\r\n    print(n)\r\n\r\nCountUpTo(3)\n"})}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"Pseudocode"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"PROCEDURE CountUpTo(n : INTEGER)\r\n    IF n > 0 THEN\r\n        CALL CountUpTo(n - 1)\r\n    ENDIF\r\n    OUTPUT n\r\nENDPROCEDURE\r\n\r\nCALL CountUpTo(3)\n"})})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Note that the statements after ",(0,s.jsx)(n.code,{children:"CountUpTo(n - 1)"})," are not executed until control\r\nreturns to this statement as the recursive calls unwind."]}),"\n"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Call Number"}),(0,s.jsx)(n.th,{children:"Procedure Call"}),(0,s.jsx)(n.th,{children:"n"}),(0,s.jsx)(n.th,{children:"n > 0"}),(0,s.jsx)(n.th,{children:"Output"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"CountUpTo(3)"}),(0,s.jsx)(n.td,{children:"3"}),(0,s.jsx)(n.td,{children:"TRUE"}),(0,s.jsx)(n.td,{children:"-"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"CountUpTo(2)"}),(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"TRUE"}),(0,s.jsx)(n.td,{children:"-"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"3"}),(0,s.jsx)(n.td,{children:"CountUpTo(1)"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"TRUE"}),(0,s.jsx)(n.td,{children:"-"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"4"}),(0,s.jsx)(n.td,{children:"CountUpTo(0)"}),(0,s.jsx)(n.td,{children:"0"}),(0,s.jsx)(n.td,{children:"FALSE"}),(0,s.jsx)(n.td,{children:"0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"(3)"}),(0,s.jsx)(n.td,{children:"CountUpTo(1)"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"TRUE"}),(0,s.jsx)(n.td,{children:"1"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"(2)"}),(0,s.jsx)(n.td,{children:"CountUpTo(2)"}),(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"TRUE"}),(0,s.jsx)(n.td,{children:"2"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"(1)"}),(0,s.jsx)(n.td,{children:"CountUpTo(3)"}),(0,s.jsx)(n.td,{children:"3"}),(0,s.jsx)(n.td,{children:"TRUE"}),(0,s.jsx)(n.td,{children:"3"})]})]})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Call number ",(0,s.jsx)(n.code,{children:"4"})," is when the base case is reached"]}),"\n",(0,s.jsxs)(n.li,{children:["call number ",(0,s.jsx)(n.code,{children:"(3) -> (1)"})," is where the recursive call unwinds"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-2",children:"Example 2"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"consider this code below:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def Factorial(n):\r\n    if n == 0:\r\n        result = 1\r\n    else:\r\n        result = n * factorial(n - 1)\r\n    return result\r\n\r\nFactorial(4)\n"})}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"Pseudocode"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"FUNCTION Factorial(n : INTEGER) RETURNS INTEGER\r\n    IF n = 0 THEN\r\n        Result \u2190 1\r\n    ELSE\r\n        Result \u2190 n * Factorial(n \u2013 1)\r\n    ENDIF\r\n    RETURN Result\r\nENDFUNCTION\r\n\r\nFactorial(4)\n"})})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"trace table:"}),"\n"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Call Number"}),(0,s.jsx)(n.th,{children:"Procedure Call"}),(0,s.jsx)(n.th,{children:"n"}),(0,s.jsx)(n.th,{children:"n = 0"}),(0,s.jsx)(n.th,{children:"Result"}),(0,s.jsx)(n.th,{children:"Return Value"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"Factorial(4)"}),(0,s.jsx)(n.td,{children:"4"}),(0,s.jsx)(n.td,{children:"FALSE"}),(0,s.jsx)(n.td,{children:"4*Factorial(4)"}),(0,s.jsx)(n.td,{children:"-"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"Factorial(3)"}),(0,s.jsx)(n.td,{children:"3"}),(0,s.jsx)(n.td,{children:"FALSE"}),(0,s.jsx)(n.td,{children:"3*Factorial(2)"}),(0,s.jsx)(n.td,{children:"-"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"3"}),(0,s.jsx)(n.td,{children:"Factorial(2)"}),(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"FALSE"}),(0,s.jsx)(n.td,{children:"2*Factorial(1)"}),(0,s.jsx)(n.td,{children:"-"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"4"}),(0,s.jsx)(n.td,{children:"Factorial(1)"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"FALSE"}),(0,s.jsx)(n.td,{children:"1*Factorial(0)"}),(0,s.jsx)(n.td,{children:"-"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"5"}),(0,s.jsx)(n.td,{children:"Factorial(0)"}),(0,s.jsx)(n.td,{children:"0"}),(0,s.jsx)(n.td,{children:"TRUE"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"1"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"(4)"}),(0,s.jsx)(n.td,{children:"Factorial(1)"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"FALSE"}),(0,s.jsx)(n.td,{children:"1*1"}),(0,s.jsx)(n.td,{children:"1"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"(3)"}),(0,s.jsx)(n.td,{children:"Factorial(2)"}),(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"FALSE"}),(0,s.jsx)(n.td,{children:"2*1"}),(0,s.jsx)(n.td,{children:"2"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"(2)"}),(0,s.jsx)(n.td,{children:"Factorial(3)"}),(0,s.jsx)(n.td,{children:"3"}),(0,s.jsx)(n.td,{children:"FALSE"}),(0,s.jsx)(n.td,{children:"3*2"}),(0,s.jsx)(n.td,{children:"6"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"(1)"}),(0,s.jsx)(n.td,{children:"Factorial(4)"}),(0,s.jsx)(n.td,{children:"4"}),(0,s.jsx)(n.td,{children:"FALSE"}),(0,s.jsx)(n.td,{children:"4*6"}),(0,s.jsx)(n.td,{children:"24"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"example-3",children:"Example 3"}),"\n",(0,s.jsx)(n.admonition,{title:"NOTE",type:"info",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Convert Decimal Number to Binary Representation"})}),"\n",(0,s.jsx)(n.li,{children:"Please remember this, because i have no idea about how it works."}),"\n"]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Program Code:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def int_to_binary(n):\r\n    if n == 0 or n == 1:\r\n        print(n)\r\n    else:\r\n        int_to_binary(n // 2)\r\n        print(n % 2)\r\n\r\nint_to_binary(19)\n"})}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"Pseudocode"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"PROCEDURE int_to_binary(n : INTEGER)\r\n    IF (n = 0) OR (n = 1) THEN\r\n        OUTPUT n\r\n    ELSE\r\n        CALL int_to_binary(n DIV 2)\r\n        OUTPUT(n MOD 2)\r\n    ENDIF\r\nENDPROCEDURE\n"})})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["it converts a decimal number ",(0,s.jsx)(n.code,{children:"n"})," into its binary representation using a recursive approach"]}),"\n"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Step"}),(0,s.jsx)(n.th,{children:"n"}),(0,s.jsx)(n.th,{children:"Operation"}),(0,s.jsx)(n.th,{children:"Output"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"19"}),(0,s.jsx)(n.td,{children:"Check n = 0 or n = 1"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"19"}),(0,s.jsx)(n.td,{children:"Call X(19 DIV 2)"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"3"}),(0,s.jsx)(n.td,{children:"9"}),(0,s.jsx)(n.td,{children:"Check n = 0 or n = 1"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"4"}),(0,s.jsx)(n.td,{children:"9"}),(0,s.jsx)(n.td,{children:"Call X(9 DIV 2)"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"5"}),(0,s.jsx)(n.td,{children:"4"}),(0,s.jsx)(n.td,{children:"Check n = 0 or n = 1"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"6"}),(0,s.jsx)(n.td,{children:"4"}),(0,s.jsx)(n.td,{children:"Call X(4 DIV 2)"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"7"}),(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"Check n = 0 or n = 1"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"8"}),(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"Call X(2 DIV 2)"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"9"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"Check n = 0 or n = 1"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"10"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"Output n"}),(0,s.jsx)(n.td,{children:"1"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"11"}),(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"Output(n MOD 2)"}),(0,s.jsx)(n.td,{children:"0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"12"}),(0,s.jsx)(n.td,{children:"4"}),(0,s.jsx)(n.td,{children:"Output(n MOD 2)"}),(0,s.jsx)(n.td,{children:"0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"13"}),(0,s.jsx)(n.td,{children:"9"}),(0,s.jsx)(n.td,{children:"Output(n MOD 2)"}),(0,s.jsx)(n.td,{children:"1"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"14"}),(0,s.jsx)(n.td,{children:"19"}),(0,s.jsx)(n.td,{children:"Output(n MOD 2)"}),(0,s.jsx)(n.td,{children:"1"})]})]})]}),"\n",(0,s.jsx)(n.admonition,{title:"guide",type:"warning",children:(0,s.jsxs)(n.p,{children:["refer the ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"WORKED EXAMPLE 24.03"})})," in page number 439. It gives the overview of the ",(0,s.jsx)(n.em,{children:"stack"})," with a recursive approach of the factorial function."]})}),"\n",(0,s.jsx)(n.h2,{id:"pros-and-cons-of-recursion",children:"Pros and Cons of Recursion"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"When addressing a mathematically recursive problem, implementing the recursive definition is often the most straightforward approach."}),"\n",(0,s.jsx)(n.li,{children:"Some optimizing compilers may convert a recursive subroutine to an iterative one during the compilation process."}),"\n",(0,s.jsx)(n.li,{children:"Recursive solutions tend to be more elegant and require less code compared to their iterative counterparts."}),"\n",(0,s.jsxs)(n.li,{children:["However, repeated recursive calls can lead to significant memory usage and processor time, as explained in Section 24.04.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["For instance, a procedure call like ",(0,s.jsx)(n.code,{children:"CountDownFrom(100)"})," can result in 100 stack frames,"]}),"\n",(0,s.jsx)(n.li,{children:"impacting memory and processor resources."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"advantages",children:"Advantages"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Elegance:"})," Recursive solutions are often more concise and elegant."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Simplicity:"})," Recursive code can closely mirror the problem's mathematical definition."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Readability:"})," Recursive code can be more readable and closer to the problem statement."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Versatility:"})," Well-suited for problems with inherent recursive structures."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Modularity:"})," Promotes a modular and divide-and-conquer approach to problem-solving."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"disadvantages",children:"Disadvantages"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Memory Usage:"})," Recursive calls may lead to a higher memory consumption due to multiple function calls on the call stack."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance Overhead:"})," Recursive solutions can incur additional function call overhead."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Stack Overflow:"})," Deep recursion can lead to stack overflow errors if not properly managed."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Complexity:"})," Recursive code might be harder to understand for some programmers."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Not Always Efficient:"})," In some cases, iterative solutions may be more efficient in terms of both time and space."]}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},6213:(e,n,r)=>{r.d(n,{Z:()=>d,a:()=>l});var s=r(959);const i={},t=s.createContext(i);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);