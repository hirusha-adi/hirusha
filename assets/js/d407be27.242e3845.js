"use strict";(self.webpackChunkhirusha=self.webpackChunkhirusha||[]).push([[9778],{1401:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var t=r(5893),i=r(1151);r(7294);const s=()=>(0,t.jsx)("div",{style:{maxWidth:"600px",width:"100%",overflow:"hidden"},children:(0,t.jsxs)("svg",{id:"chart-container",viewBox:"0 0 800 500",xmlns:"http://www.w3.org/2000/svg",style:{width:"100%",height:"auto"},children:[(0,t.jsx)("rect",{x:"0",y:"0",width:"800",height:"500",fill:"white"}),(0,t.jsx)("path",{d:"M50 450 L 50 0 L 800 0 L 800 450 Z",fill:"#ff8989"}),(0,t.jsx)("path",{d:"M50 450 L 800 0 L 800 450 Z",fill:"#FFC543"}),(0,t.jsx)("path",{d:"M50 450 L 800 450 L 800 330 Z",fill:"yellow"}),(0,t.jsx)("path",{d:"M50 450 L 800 450 L 800 410 Z",fill:"#C8EA00"}),(0,t.jsx)("path",{d:"M50 450 L 800 450 L 800 440 Z",fill:"#53d000"}),(0,t.jsx)("path",{d:"M50 0 L 50 450 L 800 450",fill:"transparent",stroke:"black",strokeWidth:"2"}),(0,t.jsx)("path",{d:"M50 448 L 800 448",fill:"transparent",stroke:"black",strokeWidth:"2"}),(0,t.jsx)("text",{x:"700",y:"438",fill:"black",children:"O(log n), O(1)"}),(0,t.jsx)("path",{d:"M50 450 L 800 400",fill:"transparent",stroke:"black",strokeWidth:"2"}),(0,t.jsx)("text",{x:"760",y:"390",fill:"black",children:"O(n)"}),(0,t.jsx)("path",{d:"M50 450 Q 400 350, 800 150",fill:"transparent",stroke:"black",strokeWidth:"2"}),(0,t.jsx)("text",{x:"630",y:"190",fill:"black",children:"O(n log n)"}),(0,t.jsx)("path",{d:"M50 450 Q 180 380, 250 0",fill:"transparent",stroke:"black",strokeWidth:"2"}),(0,t.jsx)("text",{x:"260",y:"30",fill:"black",children:"O(n^2)"}),(0,t.jsx)("path",{d:"M50 450 C 100 430, 120 350, 120 0",fill:"transparent",stroke:"black",strokeWidth:"2"}),(0,t.jsx)("text",{x:"125",y:"20",fill:"black",children:"O(2^n)"}),(0,t.jsx)("path",{d:"M50 450 C 80 450, 80 350, 80 0",fill:"transparent",stroke:"black",strokeWidth:"2"}),(0,t.jsx)("text",{x:"80",y:"20",fill:"black",children:"O(n!)"}),(0,t.jsx)("text",{x:"0",y:"0",transform:"translate(30 230) rotate(-90)",style:{dominantBaseline:"middle",textAnchor:"middle",fontSize:"20px",color:"#555",fontStyle:"italic"},fill:"black",children:"Operations"}),(0,t.jsx)("text",{x:"0",y:"0",transform:"translate(420 470)",style:{dominantBaseline:"middle",textAnchor:"middle",fontSize:"20px",color:"#555",fontStyle:"italic"},fill:"black",children:"Elements"})]})}),l={title:"Notes - Algorithms",sidebar_label:"Notes",slug:"notes",sidebar_position:1},d=void 0,a={id:"study/cie_al/computer_science/paper_4/my_study_notes/chapter_23/notes",title:"Notes - Algorithms",description:"- best and easy to follow github repo: msambol/dsa",source:"@site/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_23/notes.mdx",sourceDirName:"study/cie_al/computer_science/paper_4/my_study_notes/chapter_23",slug:"/study/cie_al/computer_science/paper_4/my_study_notes/chapter_23/notes",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_23/notes",draft:!1,unlisted:!1,editUrl:"https://github.com/hirusha-adi/hirusha/tree/main/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_23/notes.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Notes - Algorithms",sidebar_label:"Notes",slug:"notes",sidebar_position:1},sidebar:"study",previous:{title:"Chapter 23 - Algorithms",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_23/"},next:{title:"ESQ",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_23/esq"}},o={},c=[{value:"Bubble Sort",id:"bubble-sort",level:2},{value:"Pythonic Approach",id:"pythonic-approach",level:3},{value:"Normal Approach",id:"normal-approach",level:3},{value:"Insertion Sort",id:"insertion-sort",level:2},{value:"Linear Search",id:"linear-search",level:2},{value:"Binary Search",id:"binary-search",level:2},{value:"Abstract Data Types",id:"abstract-data-types",level:2},{value:"Stacks",id:"stacks",level:2},{value:"Queue",id:"queue",level:2},{value:"Linked List",id:"linked-list",level:2},{value:"Single Linked List",id:"single-linked-list",level:3},{value:"Double Linked List",id:"double-linked-list",level:3},{value:"Circular Linked List",id:"circular-linked-list",level:3},{value:"Binary Trees",id:"binary-trees",level:2},{value:"Hash Tables",id:"hash-tables",level:2},{value:"Dictionaries",id:"dictionaries",level:2},{value:"NOTE:",id:"note",level:4},{value:"Available Methods:",id:"available-methods",level:3},{value:"Big O Notation",id:"big-o-notation",level:2},{value:"Rules",id:"rules",level:3},{value:"Examples",id:"examples",level:3}];function h(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["best and easy to follow github repo: ",(0,t.jsx)(n.a,{href:"https://github.com/msambol/dsa",children:"msambol/dsa"})]}),"\n",(0,t.jsx)(n.li,{children:"Please watch this video before getting started:"}),"\n"]}),"\n",(0,t.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/gR6nycuZKlM?si=Yhakoc7QPIWohep1",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),"\n",(0,t.jsx)(n.h2,{id:"bubble-sort",children:"Bubble Sort"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"watch the video below to help visualize the Bubble Sort Algorithm"}),"\n"]}),"\n",(0,t.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/xli_FI7CuzA?si=lHrbZ7SO42mVJvDC",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'in the below video, note that the "limit value of j" decreases'}),"\n",(0,t.jsxs)(n.li,{children:["this is done to optimize the algorithm","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"since everything at the end of the array will be sorted"}),"\n",(0,t.jsx)(n.li,{children:"there's no use to checking the end again and again"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/nmhjrI-aW5o?si=GwXti7qco1ytckIs",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),"\n",(0,t.jsx)(n.h3,{id:"pythonic-approach",children:"Pythonic Approach"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Makes use of some python specific features"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def bubble_sort(arr):\r\n    n = len(arr)\r\n    for i in range(n):\r\n        for j in range(0, n - i - 1):\r\n            if arr[j] > arr[j + 1]:\r\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"range(0, n - i - 1)"})}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"range()"})," function in Python generates a sequence of numbers. In this case, it is used to iterate over the elements of the array ",(0,t.jsx)(n.code,{children:"arr"}),". The parameters of ",(0,t.jsx)(n.code,{children:"range()"})," are ",(0,t.jsx)(n.code,{children:"start"}),", ",(0,t.jsx)(n.code,{children:"stop"}),", and ",(0,t.jsx)(n.code,{children:"step"}),". In the given context:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"start"})," is 0."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"stop"})," is ",(0,t.jsx)(n.code,{children:"n - i - 1"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"step"})," is 1 (implicitly)."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["So, ",(0,t.jsx)(n.code,{children:"range(0, n - i - 1)"})," creates a sequence of numbers starting from 0 up to (but not including) ",(0,t.jsx)(n.code,{children:"n - i - 1"}),". This is used as the index for accessing elements in the array during the inner loop."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"arr[j], arr[j + 1] = arr[j + 1], arr[j]"})}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["This line is a Pythonic way of swapping the values of ",(0,t.jsx)(n.code,{children:"arr[j]"})," and ",(0,t.jsx)(n.code,{children:"arr[j + 1]"})," in a single line, without using a temporary variable. It utilizes tuple packing and unpacking."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Detailed Example"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def bubble_sort(arr):\r\n    """\r\n    Sorts a list using the Bubble Sort algorithm.\r\n\r\n    Parameters:\r\n    - arr (list): The list to be sorted.\r\n    """\r\n    n = len(arr)\r\n\r\n    # Traverse through all array elements\r\n    for i in range(n):\r\n        # Last i elements are already sorted, so we don\'t need to check them\r\n        for j in range(0, n - i - 1):\r\n            # Swap if the element found is greater than the next element\r\n            if arr[j] > arr[j + 1]:\r\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\r\n\r\n# Example usage:\r\nmy_list = [64, 34, 25, 12, 22, 11, 90]\r\nbubble_sort(my_list)\r\n\r\nprint("Sorted array:", my_list)\n'})})]}),"\n",(0,t.jsx)(n.h3,{id:"normal-approach",children:"Normal Approach"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Refer to the code below if you have trouble understanding the above Pythonic Approach:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def bubble_sort(my_list: list):\r\n    max_index = len(my_list) - 1\r\n    n = max_index\r\n    while True:\r\n        no_more_swaps = True\r\n        for j in range(0, n):\r\n            if my_list[j] > my_list[j + 1]:\r\n                # swap two variables (using a third variable)\r\n                # -------------------------------------------\r\n                temp = my_list[j]\r\n                my_list[j] = my_list[j + 1]\r\n                my_list[j + 1] = temp\r\n                # -------------------------------------------\r\n                no_more_swaps = False\r\n        n -= 1\r\n        if no_more_swaps:\r\n            break # exit infinite loop if fully sorted\n"})}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Detailed Example"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def bubble_sort(my_list: list):\r\n    """\r\n    Sorts a list in ascending order using the Bubble Sort algorithm.\r\n\r\n    Parameters:\r\n    - my_list (list): The list to be sorted.\r\n    """\r\n    # Get the index of the last element in the list\r\n    max_index = len(my_list) - 1\r\n    n = max_index\r\n\r\n    # Continue iterating until the entire list is sorted\r\n    while True:\r\n        # Flag to track whether any swaps were made in the current iteration\r\n        no_more_swaps = True\r\n\r\n        # Traverse through the unsorted part of the list\r\n        for j in range(0, n):\r\n\r\n            # Compare adjacent elements and swap if they are in the wrong order\r\n            if my_list[j] > my_list[j + 1]:\r\n\r\n                # Swap elements if they are in the wrong order\r\n                temp = my_list[j]\r\n                my_list[j] = my_list[j + 1]\r\n                my_list[j + 1] = temp\r\n\r\n                # Set flag to indicate that a swap occurred\r\n                no_more_swaps = False\r\n\r\n        # Reduce the range of elements to consider in the next iteration\r\n        n -= 1\r\n\r\n        # If no swaps occurred in the inner loop, the list is already sorted\r\n        if no_more_swaps:\r\n            break\r\n\r\n# Example usage:\r\nmy_list = [4, 2, 7, 1, 9, 3, 5, 8]\r\nbubble_sort(my_list)\r\nprint("Sorted List:", my_list)\n'})})]}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Additional Approaches/Implementations"}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Similiar to what we have done above, but this traverse through the array in reverse order"}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def for_for_2_implentation(arr):\r\n    n = len(arr)\r\n\r\n    # Traverse through all array elements in reverse order\r\n    for i in range(n - 1, 0, -1):\r\n\r\n        # Iterate from the beginning to the current position\r\n        for j in range(i):\r\n\r\n            # Swap if the element found is greater than the next element\r\n            if arr[j] > arr[j + 1]:\r\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\r\n\r\n    return arr\n"})}),(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Using a while loop and a for loop:"}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def while_for_implentation(list_a):\r\n    # Calculate the length of the list minus 1 (indexing starts from 0)\r\n    indexing_length = len(list_a) - 1\r\n    # Initialize a flag 'sorted' as False to indicate whether the list is sorted\r\n    sorted = False\r\n\r\n    # Continue sorting until the entire list is sorted\r\n    while not sorted:\r\n        # Assume the list is sorted until proven otherwise\r\n        sorted = True\r\n\r\n        # Iterate through the list using a for loop\r\n        for i in range(0, indexing_length):  # For every value in the list\r\n            # Check if the current element is not None or not False\r\n            if list_a[i]:\r\n                # If the current element is greater than the next element, swap them\r\n                sorted = False\r\n                list_a[i], list_a[i+1] = list_a[i+1], list_a[i]\r\n\r\n    # Return the sorted list\r\n    return list_a\n"})})]}),"\n",(0,t.jsx)(n.h2,{id:"insertion-sort",children:"Insertion Sort"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"watch this video below to easily visualize and understand the algorithm"}),"\n"]}),"\n",(0,t.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/JU767SDMDvA?si=oPUyn7BsEyb8XL10",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"watch the video below to understand the python code"}),"\n"]}),"\n",(0,t.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/R_wDA-PmGE4?si=kQuCpW3a8WRjiA--",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Code:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def insertion_sort(arr: list):\r\n    for i in range(1, len(arr)):\r\n        j = i   # start inner loop at the index of outer loop\r\n        while (j > 0) and (arr[j - 1] > arr[j]): # fix index error, compare current with left element\r\n            arr[j], arr[j-1] = arr[j-1], arr[j] # swap\r\n            j = j - 1 # go further to the left\r\n        # keep on swapping until while j>0 and everything is fully sorted\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"j = i"}),": start the inner loop at the index of the outer loop"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"(arr[j - 1] > arr[j])"}),": check if the neighbour is bigger than our current element"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"arr[j], arr[j-1] = arr[j-1], arr[j]"}),": swap the two elements (without a third variable)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"j = j - 1"}),": go further to the left"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"(j > 0)"})," if ",(0,t.jsx)(n.code,{children:"j"})," became ",(0,t.jsx)(n.code,{children:"0"}),", it would try to compare ",(0,t.jsx)(n.code,{children:"arr[0]"})," to ",(0,t.jsx)(n.code,{children:"arr[-1]"})," (",(0,t.jsx)(n.code,{children:"-1"})," element), which is wrong"]}),"\n"]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Pseudocode"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Psuedocode: easy to understand"}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"for i: 1 to lenght(Arr) -1\r\n    j = i\r\n    while (j > 0) and Arr[j-1] > Arr[j]\r\n        swap Arr[j] and Arr[j-1]\r\n    j = j - 1\n"})}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Psuedocode: from the text book"}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"FOR Pointer \u2190 1 TO NumberOfitems \u2013 1\r\n    ItemToBeInserted \u2190 List[Pointer]\r\n    CurrentItem \u2190 Pointer \u2013 1                       // pointer to last item in sorted part of list\r\n    WHILE (List[CurrentItem] > ItemToBeInserted)\r\n                AND (CurrentItem > \u20131) DO\r\n        List[CurrentItem + 1] \u2190 List[CurrentItem]   // move current item down\r\n        CurrentItem \u2190 CurrentItem \u2013 1               // look at the item above\r\n    ENDWHILE\r\n    List[CurrentItem + 1] \u2190 ItemToBeInserted        // insert item\r\nNEXT Pointer\n"})})]}),"\n",(0,t.jsx)(n.h2,{id:"linear-search",children:"Linear Search"}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Time Complexity"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Worst Case: ",(0,t.jsx)(n.strong,{children:"O(n)"})]}),"\n",(0,t.jsxs)(n.li,{children:["Best Case: ",(0,t.jsx)(n.strong,{children:"\u03a9(1)"})]}),"\n"]})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"looks at each element in a list one by one until it finds the given element (or until the list is over)"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def linear_search(arr: list, search_for):\r\n    for element in arr: # iterate through the list\r\n        if search_for == element: # compare each element\r\n            return element\n"})}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Detailed Example"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def linear_search(arr: list, search_for):\r\n    """\r\n    Perform linear search on the given list to find the specified element.\r\n\r\n    Parameters:\r\n    - arr (list): The list to be searched.\r\n    - search_for: The element to search for in the list.\r\n\r\n    Returns:\r\n    - The found element if present, otherwise None.\r\n    """\r\n    for element in arr:\r\n        # Check if the current element matches the search target.\r\n        if search_for == element:\r\n            # If a match is found, return the element.\r\n            return element\r\n\r\n    # If the loop completes without finding a match, return None.\r\n    return None\r\n\r\n# Example usage:\r\nmy_list = [1, 2, 3, 4, 5]\r\ntarget_element = 3\r\nresult = linear_search(my_list, target_element)\r\n\r\nif result is not None:\r\n    print(f"Element {target_element} found in the list.")\r\nelse:\r\n    print(f"Element {target_element} not found in the list.")\r\n\n'})})]}),"\n",(0,t.jsx)(n.h2,{id:"binary-search",children:"Binary Search"}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Time Complexity"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Worst Case: ",(0,t.jsx)(n.strong,{children:"O(log n)"})]}),"\n",(0,t.jsxs)(n.li,{children:["Best Case: ",(0,t.jsx)(n.strong,{children:"\u03a9(1)"})]}),"\n"]}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://cdn.discordapp.com/attachments/1163847683207856178/1189483935206482010/image.png",alt:"i1"})})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"basically a book tearing algorithm by prof. David J. Malan from CS50"}),"\n",(0,t.jsx)(n.li,{children:"divide and conquer"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def find_index(target, start, end): # target value, start index, end index\r\n\r\n    if start > end:\r\n        return "Not Found"\r\n\r\n    middle = (start + end) // 2\r\n\r\n    if arr[middle] == target:\r\n        return f"Found it at index {middle}"\r\n\r\n    if arr[middle] > target:\r\n        return find_index(target, start, middle - 1)\r\n\r\n    if arr[middle] < target:\r\n        return find_index(target, middle + 1, end)\n'})}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Detailed Example & Explanation"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["repeated checking of the middle item in an ordered search list and discarding the half of the list which does not contain the search item","\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)("br",{}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"the array should already be sorted!"}),"\n",(0,t.jsx)(n.li,{children:"logic:"}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"If no elements\r\n    return False\r\nIf we found the element\r\n    return True\r\nElse if number < middle element\r\n    search left half\r\nElse if number > middle element\r\n    search righ half\n"})}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"when implementing it, we can either use while loops or resursion"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"the recursive approach is much easier"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"python implementation: using recursion"}),"\n"]}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def find_index(target, start, end):\r\n    # target value, start index, end index\r\n    if start > end:\r\n        return "Not Found"\r\n\r\n    middle = (start + end) // 2\r\n\r\n    if arr[middle] == target:\r\n        return f"Found it at index {middle}"\r\n\r\n    if arr[middle] > target:\r\n        return find_index(target, start, middle - 1)\r\n\r\n    if arr[middle] < target:\r\n        return find_index(target, middle + 1, end)\r\n\r\n# Example usage\r\narr = ["a", "b", "c", "x", "y", "z"]\r\ntarget_value = "x"\r\nresult = find_index(target_value, 0, len(arr) - 1)\r\nprint(result)\n'})}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"python implementation: using loops"}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def find_index(target, arr):\r\n    start, end = 0, len(arr) - 1\r\n\r\n    while start <= end:\r\n        middle = (start + end) // 2\r\n\r\n        if arr[middle] == target:\r\n            return f"Found it at index {middle}"\r\n\r\n        elif arr[middle] < target:\r\n            start = middle + 1\r\n\r\n        else:\r\n            end = middle - 1\r\n\r\n    return "Not Found"\r\n\r\n# Example usage\r\narr = ["a", "b", "c", "x", "y", "z"]\r\ntarget_value = "x"\r\nresult = find_index(target_value, arr)\r\nprint(result)\r\n\n'})}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Pseudocode: from text book"}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'Found \u2190 FALSE\r\nSearchFailed \u2190 FALSE\r\nFirst \u2190 0\r\nLast \u2190 MaxItems \u2013 1 // set boundaries of search area\r\nWHILE NOT Found AND NOT SearchFailed DO\r\n    Middle \u2190 (First + Last) DIV 2 // find middle of current search area\r\n    IF List[Middle] = SearchItem THEN\r\n        Found \u2190 TRUE\r\n    ELSE\r\n        IF First >= Last THEN // no search area left\r\n            SearchFailed \u2190 TRUE\r\n        ELSE\r\n            IF List[Middle] > SearchItem THEN // must be in first half\r\n                Last \u2190 Middle - 1 // move upper boundary\r\n            ELSE // must be in second half\r\n                First \u2190 Middle + 1 // move lower boundary\r\n            ENDIF\r\n        ENDIF\r\n    ENDIF\r\nENDWHILE\r\nIF Found = TRUE THEN\r\n    OUTPUT Middle // output position where item was found\r\nELSE\r\n    OUTPUT "Item not present in array"\r\nENDIF\n'})})]}),"\n",(0,t.jsx)(n.h2,{id:"abstract-data-types",children:"Abstract Data Types"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Lets see the implementation of Linked Lists, Queues, Stacks and Binary Trees"}),"\n"]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsxs)("summary",{children:["Learn more about ",(0,t.jsx)(n.code,{children:".pop()"})," method for lists in Python"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://www.w3schools.com/python/ref_list_pop.asp",children:"Click here"})," to learn more"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Syntax:"}),"\n"]}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"list.pop(pos)\n"})}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Parameter Values:"}),"\n"]}),(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"pos"}),(0,t.jsx)(n.td,{children:"Optional. A number specifying the position of the element you want to remove, default value is -1, which returns the last item"})]})})]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Returns: the removed value"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Example 1: Remove and return the last item in the list"}),"\n"]}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"fruits = ['apple', 'banana', 'orange', 'grape']\r\n\r\nlast_fruit = fruits.pop()\r\nprint(\"Removed:\", last_fruit)\r\nprint(\"List after pop:\", fruits)\r\n\r\n# Output:\r\n# ---------------------------------------------\r\n# Removed: grape\r\n# List after pop: ['apple', 'banana', 'orange']\n"})}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Example 2: Remove at a Specific Index ",(0,t.jsx)(n.em,{children:"(remove and return the item at index 1)"})]}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"colors = ['red', 'green', 'blue', 'yellow']\r\n\r\nremoved_color = colors.pop(1)\r\nprint(\"Removed:\", removed_color)\r\nprint(\"List after pop:\", colors)\r\n\r\n# Output:\r\n# ---------------------------------------------\r\n# Removed: green\r\n# List after pop: ['red', 'blue', 'yellow']\n"})}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example 3: Handling IndexError, when an element at the given index does not exist"}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'numbers = [1, 2, 3]\r\n\r\ntry:\r\n    removed_number = numbers.pop(5) # index 5  is out of range\r\n    print("Removed:", removed_number)\r\nexcept IndexError as e:\r\n    print("Error:", e)\r\n\r\n# Output:\r\n# ---------------------------------------------\r\n# Error: pop index out of range\n'})})]}),"\n",(0,t.jsx)(n.h2,{id:"stacks",children:"Stacks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Stack:\r\n    def __init__(self):\r\n        self.items = []\r\n\r\n    def is_empty(self):\r\n        # Checks if the stack is empty\r\n        return len(self.items) == 0\r\n\r\n    def push(self, item):\r\n        # Adds an element to the top of the stack\r\n        self.items.append(item)\r\n\r\n    def pop(self):\r\n        # Removes the topmost element from the stack\r\n        if not self.is_empty():\r\n            # remove element at end\r\n            # element at end has index -1\r\n            # = last added topmost element of the stack\r\n            return self.items.pop()\r\n        else:\r\n            raise IndexError("pop from an empty stack")\r\n\r\n    def peek(self):\r\n        # Retrieves the value of the topmost element in the stack\r\n        # without removing it\r\n        if not self.is_empty():\r\n            return self.items[-1] # -1 index -> topmost element\r\n        else:\r\n            raise IndexError("peek from an empty stack")\r\n\r\n    def size(self):\r\n        # Returns the size of the stack\r\n        return len(self.items)\r\n\r\n# Example usage:\r\nstack = Stack()\r\n\r\nstack.push(1)\r\nstack.push(2)\r\nstack.push(3)\r\n\r\nprint("Stack:", stack.items)  # Output: Stack: [1, 2, 3]\r\nprint("Size of the stack:", stack.size())  # Output: Size of the stack: 3\r\nprint("Peek at the top of the stack:", stack.peek())  # Output: Peek at the top of the stack: 3\r\n\r\npopped_item = stack.pop()\r\nprint("Popped item:", popped_item)  # Output: Popped item: 3\r\nprint("Stack after pop:", stack.items)  # Output: Stack after pop: [1, 2]\n'})}),"\n",(0,t.jsx)(n.h2,{id:"queue",children:"Queue"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Queue:\r\n    def __init__(self):\r\n        self.items = []\r\n\r\n    def is_empty(self):\r\n        # Checks if the queue is empty\r\n        return len(self.items) == 0\r\n\r\n    def enqueue(self, item):\r\n        # Adds an element to the the rear/end of the queue\r\n        self.items.append(item)\r\n\r\n    def dequeue(self):\r\n        # Removes the element from the front of the queue\r\n        if not self.is_empty():\r\n            return self.items.pop(0) # remove the first element of self.items list\r\n        else:\r\n            raise IndexError("dequeue from an empty queue")\r\n\r\n    def peek(self):\r\n        # Returns the element at the front without removing it\r\n        if not self.is_empty():\r\n            return self.items[0] # first element of the array\r\n        else:\r\n            raise IndexError("peek from an empty queue")\r\n\r\n    def size(self):\r\n        # Returns the number of elements in the queue\r\n        return len(self.items)\r\n\r\n# Example usage:\r\nqueue = Queue()\r\n\r\nqueue.enqueue(1)\r\nqueue.enqueue(2)\r\nqueue.enqueue(3)\r\n\r\nprint("Queue:", queue.items)  # Output: Queue: [1, 2, 3]\r\nprint("Size of the queue:", queue.size())  # Output: Size of the queue: 3\r\nprint("Peek at the front of the queue:", queue.peek())  # Output: Peek at the front of the queue: 1\r\n\r\ndequeued_item = queue.dequeue()\r\nprint("Dequeued item:", dequeued_item)  # Output: Dequeued item: 1\r\nprint("Queue after dequeue:", queue.items)  # Output: Queue after dequeue: [2, 3]\n'})}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Circular Queues Implementation"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Circular Queues are used to improve the efficiency"}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class CircularQueue:\r\n    def __init__(self, capacity):\r\n        self.capacity = capacity\r\n        self.queue = [None] * capacity\r\n        self.front = self.rear = -1\r\n\r\n    def is_empty(self):\r\n        return self.front == -1\r\n\r\n    def is_full(self):\r\n        return (self.rear + 1) % self.capacity == self.front\r\n\r\n    def enqueue(self, item):\r\n        if self.is_full():\r\n            raise IndexError("enqueue to a full queue")\r\n        elif self.is_empty():\r\n            self.front = self.rear = 0\r\n        else:\r\n            self.rear = (self.rear + 1) % self.capacity\r\n        self.queue[self.rear] = item\r\n\r\n    def dequeue(self):\r\n        if self.is_empty():\r\n            raise IndexError("dequeue from an empty queue")\r\n        elif self.front == self.rear:\r\n            item = self.queue[self.front]\r\n            self.front = self.rear = -1\r\n        else:\r\n            item = self.queue[self.front]\r\n            self.front = (self.front + 1) % self.capacity\r\n        return item\r\n\r\n    def peek(self):\r\n        if self.is_empty():\r\n            raise IndexError("peek from an empty queue")\r\n        return self.queue[self.front]\r\n\r\n    def size(self):\r\n        if self.is_empty():\r\n            return 0\r\n        elif self.front <= self.rear:\r\n            return self.rear - self.front + 1\r\n        else:\r\n            return self.capacity - self.front + self.rear + 1\r\n\r\n# Example usage:\r\ncq = CircularQueue(3)\r\n\r\ncq.enqueue(1)\r\ncq.enqueue(2)\r\ncq.enqueue(3)\r\n\r\nprint("Circular Queue:", cq.queue)  # Output: Circular Queue: [1, 2, 3]\r\nprint("Size of the Circular Queue:", cq.size())  # Output: Size of the Circular Queue: 3\r\nprint("Peek at the front of the Circular Queue:", cq.peek())  # Output: Peek at the front of the Circular Queue: 1\r\n\r\ndequeued_item = cq.dequeue()\r\nprint("Dequeued item:", dequeued_item)  # Output: Dequeued item: 1\r\nprint("Circular Queue after dequeue:", cq.queue)  # Output: Circular Queue after dequeue: [None, 2, 3]\r\n\r\ncq.enqueue(4)\r\nprint("Circular Queue after enqueue:", cq.queue)  # Output: Circular Queue after enqueue: [4, 2, 3]\n'})})]}),"\n",(0,t.jsx)(n.h2,{id:"linked-list",children:"Linked List"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Key Terms:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Node"}),": an element of a list"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pointer"}),": a variable that stores the address of the node it points to"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Null pointer"}),": a pointer that does not point at anything"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Start pointer"}),": a variable that stores the address of the first element of a linked list"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Watch this video to learn about both Single and Double Linked Lists"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/_jQhALI4ujg?si=AnCxbonMacC_mfkl",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),"\n",(0,t.jsx)(n.h3,{id:"single-linked-list",children:"Single Linked List"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Watch the video below to learn more (also has a great visual representation)"}),"\n"]}),"\n",(0,t.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/R9PTBwOzceo?si=OTOLGFICANgQv--S",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),"\n"," ","\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Each node contains data and a pointer to the next node."}),"\n",(0,t.jsx)(n.li,{children:"Memory-efficient, as it uses less space per node."}),"\n",(0,t.jsx)(n.li,{children:"Forward traversal only."}),"\n",(0,t.jsxs)(n.li,{children:["Insertions and deletions are faster than doubly linked lists.","\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)("br",{}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Python Implementation"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Define a Node class to represent individual elements in the linked list\r\nclass Node:\r\n    def __init__(self, data):\r\n        self.data = data\r\n        self.next = None\r\n\r\n# Define a LinkedList class to implement the linked list operations\r\nclass LinkedList:\r\n    def __init__(self):\r\n        # Initialize an empty linked list with a head set to None\r\n        self.head = None\r\n\r\n    def is_empty(self):\r\n        # Check if the linked list is empty\r\n        return self.head is None\r\n\r\n    def add_at_head(self, data):\r\n        # Add a new node with data at the head of the linked list\r\n        new_node = Node(data)\r\n        new_node.next = self.head\r\n        self.head = new_node\r\n\r\n    def add_at_tail(self, data):\r\n        # Add a new node with data at the tail of the linked list\r\n        new_node = Node(data)\r\n\r\n        # If the linked list is empty, set the new node as the head\r\n        if self.is_empty():\r\n            self.head = new_node\r\n        else:\r\n            # Otherwise, traverse to the end and append the new node\r\n            current = self.head\r\n            while current.next is not None:\r\n                current = current.next\r\n            current.next = new_node\r\n\r\n    def add_at_middle(self, data, position):\r\n        # Add a new node with data at a specified position in the linked list\r\n        new_node = Node(data)\r\n\r\n        # If the linked list is empty, set the new node as the head\r\n        if self.is_empty():\r\n            self.head = new_node\r\n        elif position == 0:\r\n            # If position is 0, insert at the beginning\r\n            new_node.next = self.head\r\n            self.head = new_node\r\n        else:\r\n            # Traverse to the specified position and insert the new node\r\n            current = self.head\r\n            count = 1\r\n\r\n            while count < position and current.next is not None:\r\n                current = current.next\r\n                count += 1\r\n\r\n            new_node.next = current.next\r\n            current.next = new_node\r\n\r\n    def search(self, data):\r\n        # Search for a node with the given data in the linked list\r\n        current = self.head\r\n\r\n        while current is not None:\r\n            if current.data == data:\r\n                return True\r\n            current = current.next\r\n\r\n        return False\r\n\r\n    def remove(self, data):\r\n        # Remove the first occurrence of a node with the given data\r\n        if self.is_empty():\r\n            return\r\n\r\n        if self.head.data == data:\r\n            # If the head contains the data, update the head\r\n            self.head = self.head.next\r\n            return\r\n\r\n        current = self.head\r\n        while current.next is not None:\r\n            # Traverse the list to find and remove the node with the given data\r\n            if current.next.data == data:\r\n                current.next = current.next.next\r\n                return\r\n            current = current.next\r\n\r\n    def display(self):\r\n        # Display the elements of the linked list\r\n        current = self.head\r\n\r\n        while current is not None:\r\n            print(current.data, end=" -> ")\r\n            current = current.next\r\n\r\n        print("None")\r\n\r\n# Usage example\r\nlinked_list = LinkedList()\r\n\r\n# Add elements to the linked list\r\nlinked_list.add_at_head(3)\r\nlinked_list.add_at_head(2)\r\nlinked_list.add_at_head(1)\r\nlinked_list.add_at_tail(4)\r\n\r\n# Display the linked list\r\nlinked_list.display()  # Output: 1 -> 2 -> 3 -> 4 -> None\r\n\r\n# Search for a value in the linked list\r\nprint(linked_list.search(3))  # Output: True\r\n\r\n# Remove a node with a specific value from the linked list\r\nlinked_list.remove(2)\r\n\r\n# Display the modified linked list\r\nlinked_list.display()  # Output: 1 -> 3 -> 4 -> None\r\n\r\n# Create another linked list instance\r\nlinked_list2 = LinkedList()\r\n\r\n# Add elements to the second linked list, including adding in the middle\r\nlinked_list2.add_at_head(3)\r\nlinked_list2.add_at_head(2)\r\nlinked_list2.add_at_head(1)\r\nlinked_list2.add_at_middle(5, 1)\r\n\r\n# Display the second linked list\r\nlinked_list2.display()  # Output: 1 -> 5 -> 2 -> 3 -> None\r\n\r\n# Output\r\n# -------------------------------\r\n# 1 -> 2 -> 3 -> 4 -> None\r\n# True\r\n# 1 -> 3 -> 4 -> None\r\n# 1 -> 5 -> 2 -> 3 -> None\n'})}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Alternative Approach"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Define a Node class to represent each element in the linked list\r\nclass Node:\r\n    def __init__(self, data):\r\n        self.data = data  # Data stored in the node\r\n        self.next = None  # Reference to the next node in the list\r\n\r\n# Define a LinkedList class to represent the linked list and its operations\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.head = None  # Initialize an empty linked list with no head\r\n\r\n    def is_empty(self):\r\n        return self.head is None  # Check if the linked list is empty\r\n\r\n    def append(self, data):\r\n        new_node = Node(data)  # Create a new node with the given data\r\n        if self.head is None:\r\n            self.head = new_node  # If the list is empty, set the new node as the head\r\n            return\r\n        last_node = self.head\r\n        while last_node.next: # until the last node is met (with Node.next = None)\r\n            last_node = last_node.next # Set the next of the new node to the current head\r\n        last_node.next = new_node  # Append the new node at the end of the list\r\n\r\n    def prepend(self, data):\r\n        new_node = Node(data)\r\n        new_node.next = self.head  # Set the next of the new node to the current head\r\n        self.head = new_node  # Set the new node as the new head\r\n\r\n    def delete(self, data):\r\n        if self.head is None:\r\n            return\r\n\r\n        if self.head.data == data:\r\n            self.head = self.head.next  # If the head contains the data, move the head to the next node\r\n            return\r\n\r\n        current_node = self.head\r\n        while current_node.next and current_node.next.data != data:\r\n            current_node = current_node.next\r\n\r\n        if current_node.next:\r\n            current_node.next = current_node.next.next  # Skip the node containing the data to delete it\r\n\r\n    def display(self):\r\n        current_node = self.head\r\n        while current_node:\r\n            print(current_node.data, end=" -> ")  # Print the data in the current node\r\n            current_node = current_node.next\r\n        print("None")  # Print None to indicate the end of the list\r\n\r\n# Example usage:\r\nlinked_list = LinkedList()\r\nlinked_list.append(1)\r\nlinked_list.append(2)\r\nlinked_list.append(3)\r\nlinked_list.prepend(0)\r\nlinked_list.display()\r\n\r\nlinked_list.delete(2)\r\nlinked_list.display()\r\n\r\n# Output\r\n# -------------------------------\r\n# 0 -> 1 -> 2 -> 3 -> None\r\n# 0 -> 1 -> 3 -> None\n'})})]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Textbook's Approach"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Python Implementation"}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class ListNode:\r\n    def __init__(self, data=None, next_node=None):\r\n        self.data = data\r\n        self.next_node = next_node\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.start_node = None\r\n\r\n    def insert_node(self, new_item):\r\n        new_node = ListNode(data=new_item)\r\n        if not self.start_node or new_item < self.start_node.data:\r\n            new_node.next_node = self.start_node\r\n            self.start_node = new_node\r\n            return\r\n\r\n        current_node = self.start_node\r\n        while current_node.next_node and new_item >= current_node.next_node.data:\r\n            current_node = current_node.next_node\r\n\r\n        new_node.next_node = current_node.next_node\r\n        current_node.next_node = new_node\r\n\r\n    def find_node(self, data_item):\r\n        current_node = self.start_node\r\n        while current_node and current_node.data != data_item:\r\n            current_node = current_node.next_node\r\n        return current_node\r\n\r\n    def delete_node(self, data_item):\r\n        if not self.start_node:\r\n            return\r\n\r\n        if self.start_node.data == data_item:\r\n            self.start_node = self.start_node.next_node\r\n            return\r\n\r\n        current_node = self.start_node\r\n        while current_node.next_node and current_node.next_node.data != data_item:\r\n            current_node = current_node.next_node\r\n\r\n        if current_node.next_node:\r\n            current_node.next_node = current_node.next_node.next_node\r\n\r\n    def output_all_nodes(self):\r\n        current_node = self.start_node\r\n        while current_node:\r\n            print(current_node.data)\r\n            current_node = current_node.next_node\r\n\r\n# Example usage:\r\nlinked_list = LinkedList()\r\nlinked_list.insert_node("Apple")\r\nlinked_list.insert_node("Banana")\r\nlinked_list.insert_node("Orange")\r\nlinked_list.output_all_nodes()\r\n\r\nlinked_list.delete_node("Banana")\r\nlinked_list.output_all_nodes()\n'})}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Pseudocode"}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// NullPointer should be set to -1 if using array element with index 0\r\nCONSTANT NullPointer = \u20131\r\n// Declare record type to store data and pointer\r\nTYPE ListNode\r\n DECLARE Data : STRING\r\n DECLARE Pointer : INTEGER\r\nENDTYPE\r\nDECLARE StartPointer : INTEGER\r\nDECLARE FreeListPtr : INTEGER\r\nDECLARE List : ARRAY[0 : 6] OF ListNode\r\nPROCEDURE InitialiseList\r\n StartPointer \u2190 NullPointer // set start pointer\r\n FreeListPtr \u2190 0 // set starting position of free list\r\n FOR Index \u2190 0 TO 5 // link all nodes to make free list\r\n List[Index].Pointer \u2190 Index + 1\r\n NEXT Index\r\n List[6].Pointer \u2190 NullPointer // last node of free list\r\nENDPROCEDURE\r\n\r\nPROCEDURE InsertNode(NewItem)\r\n IF FreeListPtr <> NullPointer\r\n THEN // there is space in the array\r\n // take node from free list and store data item\r\n NewNodePtr \u2190 FreeListPtr\r\n List[NewNodePtr].Data \u2190 NewItem\r\n FreeListPtr \u2190 List[FreeListPtr].Pointer\r\n // find insertion point\r\n ThisNodePtr \u2190 StartPointer // start at beginning of list\r\n PreviousNodePtr \u2190 NullPointer\r\n WHILE ThisNodePtr <> NullPointer // while not end of list\r\n AND List[ThisNodePtr].Data < NewItem DO\r\n PreviousNodePtr \u2190 ThisNodePtr // remember this node\r\n // follow the pointer to the next node\r\n ThisNodePtr \u2190 List[ThisNodePtr].Pointer\r\n ENDWHILE\r\n IF PreviousNodePtr = StartPointer\r\n THEN // insert new node at start of list\r\n List[NewNodePtr].Pointer \u2190 StartPointer\r\n StartPointer \u2190 NewNodePtr\r\n ELSE // insert new node between previous node and this node\r\n List[NewNodePtr].Pointer \u2190 List[PreviousNodePtr].Pointer\r\n List[PreviousNodePtr].Pointer \u2190 NewNodePtr\r\n ENDIF\r\n ENDIF\r\nENDPROCEDURE\r\n\r\nFUNCTION FindNode(DataItem) RETURNS INTEGER // returns pointer to node\r\n CurrentNodePtr \u2190 StartPointer // start at beginning of list\r\n WHILE CurrentNodePtr <> NullPointer // not end of list\r\n AND List[CurrentNodePtr].Data <> DataItem DO // item not found\r\n // follow the pointer to the next node\r\n CurrentNodePtr \u2190 List[CurrentNodePtr].Pointer\r\nENDWHILE\r\n RETURN CurrentNodePtr // returns NullPointer if item not found\r\nENDFUNCTION\r\n\r\nPROCEDURE DeleteNode(DataItem)\r\n ThisNodePtr \u2190 StartPointer // start at beginning of list\r\n WHILE ThisNodePtr <> NullPointer // while not end of list\r\n AND List[ThisNodePtr].Data <> DataItem DO // and item not found\r\n PreviousNodePtr \u2190 ThisNodePtr // remember this node\r\n // follow the pointer to the next node\r\n ThisNodePtr \u2190 List[ThisNodePtr].Pointer\r\n ENDWHILE\r\n IF ThisNodePtr <> NullPointer // node exists in list\r\n THEN\r\n IF ThisNodePtr = StartPointer // first node to be deleted\r\n THEN\r\n // move start pointer to the next node in list\r\n StartPointer \u2190 List[StartPointer].Pointer\r\n ELSE\r\n // it is not the start node;\r\n // so make the previous node\u2019s pointer point to\r\n // the current node\u2019s 'next' pointer; thereby removing all\r\n // references to the current pointer from the list\r\n List[PreviousNodePtr].Pointer \u2190 List[ThisNodePtr].Pointer\r\n ENDIF\r\n List[ThisNodePtr].Pointer \u2190 FreeListPtr\r\n FreeListPtr \u2190 ThisNodePtr\r\n ENDIF\r\nENDPROCEDURE\r\n\r\nPROCEDURE OutputAllNodes\r\n CurrentNodePtr \u2190 StartPointer // start at beginning of list\r\n WHILE CurrentNodePtr <> NullPointer DO // while not end of list\r\n OUTPUT List[CurrentNodePtr].Data\r\n // follow the pointer to the next node\r\n CurrentNodePtr \u2190 List[CurrentNodePtr].Pointer\r\n ENDWHILE\r\nENDPROCEDURE\n"})})]}),"\n",(0,t.jsx)(n.h3,{id:"double-linked-list",children:"Double Linked List"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Each node contains data, a pointer to the next node, and a pointer to the previous node."}),"\n",(0,t.jsx)(n.li,{children:"Supports forward and backward traversal."}),"\n",(0,t.jsx)(n.li,{children:"Takes more memory per node due to the additional previous pointer."}),"\n",(0,t.jsx)(n.li,{children:"Insertions and deletions can be faster in certain scenarios due to bidirectional traversal."}),"\n",(0,t.jsxs)(n.li,{children:["Example:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"back and forward buttons in the web browser"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Detailed Example"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Node:\r\n    def __init__(self, data):\r\n        # Constructor for a Node in the doubly linked list\r\n        self.data = data  # Data stored in the node\r\n        self.next = None   # Pointer to the next node in the sequence\r\n        self.prev = None   # Pointer to the previous node in the sequence\r\n\r\nclass DoublyLinkedList:\r\n    def __init__(self):\r\n        # Constructor for the doubly linked list\r\n        self.head = None   # Reference to the head (start) of the list\r\n\r\n    def append(self, data):\r\n        # Add a new node with the given data at the end of the list\r\n        new_node = Node(data)  # Create a new node\r\n        if not self.head:\r\n            # If the list is empty, set the new node as the head\r\n            self.head = new_node\r\n        else:\r\n            # Traverse to the end of the list and add the new node\r\n            current = self.head\r\n            while current.next:\r\n                current = current.next\r\n            current.next = new_node\r\n            new_node.prev = current\r\n\r\n    def prepend(self, data):\r\n        # Add a new node with the given data at the beginning of the list\r\n        new_node = Node(data)  # Create a new node\r\n        new_node.next = self.head  # Set the next pointer of the new node to the current head\r\n        if self.head:\r\n            # If the list is not empty, set the previous pointer of the current head to the new node\r\n            self.head.prev = new_node\r\n        self.head = new_node  # Set the new node as the new head\r\n\r\n    def display_forward(self):\r\n        # Display the elements of the list in the forward direction\r\n        current = self.head\r\n        while current:\r\n            print(current.data, end=" ")\r\n            current = current.next\r\n        print()\r\n\r\n    def display_backward(self):\r\n        # Display the elements of the list in the backward direction\r\n        current = self.head\r\n        while current and current.next:\r\n            current = current.next\r\n\r\n        while current:\r\n            print(current.data, end=" ")\r\n            current = current.prev\r\n        print()\r\n\r\n# Example usage:\r\ndll = DoublyLinkedList()\r\ndll.append(1)\r\ndll.append(2)\r\ndll.append(3)\r\ndll.prepend(0)\r\n\r\nprint("Forward:")\r\ndll.display_forward()\r\n\r\nprint("Backward:")\r\ndll.display_backward()\n'})})]}),"\n",(0,t.jsx)(n.h3,{id:"circular-linked-list",children:"Circular Linked List"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Similar to singly linked lists but the last node points back to the first node, forming a circle."}),"\n",(0,t.jsx)(n.li,{children:"No need for a separate tail reference."}),"\n",(0,t.jsx)(n.li,{children:"Can be traversed indefinitely without encountering a None reference."}),"\n"]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Detailed Example"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Node class to represent individual elements in the circular linked list\r\nclass Node:\r\n    def __init__(self, data):\r\n        self.data = data\r\n        self.next = None\r\n\r\n\r\n# CircularLinkedList class to manage the circular linked list\r\nclass CircularLinkedList:\r\n    def __init__(self):\r\n        self.head = None\r\n\r\n    def is_empty(self):\r\n        return self.head is None\r\n\r\n    def append(self, data):\r\n        # Create a new node with the given data\r\n        new_node = Node(data)\r\n\r\n        # If the circular linked list is empty, make the new node the head and point it to itself\r\n        if self.is_empty():\r\n            new_node.next = new_node\r\n            self.head = new_node\r\n        else:\r\n            # Traverse to the last node and update its \'next\' pointer to the new node\r\n            temp = self.head\r\n            while temp.next != self.head:\r\n                temp = temp.next\r\n            temp.next = new_node\r\n            # Make the new node point to the head to create the circular link\r\n            new_node.next = self.head\r\n\r\n    def display(self):\r\n        # Display the elements in the circular linked list\r\n        if self.is_empty():\r\n            print("Circular Linked List is empty")\r\n        else:\r\n            temp = self.head\r\n            while True:\r\n                print(temp.data, end=" ")\r\n                temp = temp.next\r\n                # If we have traversed the entire circular linked list, break the loop\r\n                if temp == self.head:\r\n                    break\r\n            print()\r\n\r\n# Create a circular linked list\r\ncll = CircularLinkedList()\r\n\r\n# Appending elements to the circular linked list\r\ncll.append(1)\r\ncll.append(2)\r\ncll.append(3)\r\ncll.append(4)\r\n\r\n# Displaying the circular linked list\r\nprint("Circular Linked List:")\r\ncll.display()\r\n\n'})})]}),"\n",(0,t.jsx)(n.h2,{id:"binary-trees",children:"Binary Trees"}),"\n",(0,t.jsx)(n.h2,{id:"hash-tables",children:"Hash Tables"}),"\n",(0,t.jsx)(n.h2,{id:"dictionaries",children:"Dictionaries"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Watch this video below to learn more:"}),"\n"]}),"\n",(0,t.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/MZZSMaEAC2g?si=-unNmrbYMpcLDl0V",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["A dictionary in Python is defined using curly braces ",(0,t.jsx)(n.code,{children:"{}"})," and consists of key-value pairs separated by colons ",(0,t.jsx)(n.code,{children:":"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Keys are unique and immutable, while values can be of any data type."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Example 1:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Example dictionary\r\nmy_dict = {'name': 'John', 'age': 25, 'city': 'New York'}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example 2: from the text book"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# empty dictionary\r\nEnglishFrench = {}\r\n\r\n# add a key-value pair to the dictionary\r\nEnglishFrench["book"] = "livre"\r\nEnglishFrench["pen"] = "stylo"\r\n\r\n# access a value in the dictionary\r\nprint(EnglishFrench["book"])\r\n\r\n# alternative method of setting up a dictionary\r\nComputingTerms = {"Boolean" : "can be TRUE or FALSE", "Bit" : "0 or 1"}\r\nprint(ComputingTerms["Bit"])\n'})}),"\n",(0,t.jsx)(n.h4,{id:"note",children:"NOTE:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"my_dict = {}    # this is an empty dictionary\r\nmy_dict = {,}   # this is an empty set\n"})}),"\n",(0,t.jsx)(n.h3,{id:"available-methods",children:"Available Methods:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"dict.keys()"})}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Returns a view of dictionary keys."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"keys = my_dict.keys()\r\nprint(keys)  # dict_keys(['name', 'age', 'city'])\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"dict.values()"})}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Returns a view of dictionary values."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"values = my_dict.values()\r\nprint(values)  # dict_values(['John', 25, 'New York'])\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"dict.items()"})}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Returns a view of key-value pairs as tuples."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"items = my_dict.items()\r\nprint(items)  # dict_items([('name', 'John'), ('age', 25), ('city', 'New York')])\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"dict.get(key, default)"})}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Returns the value for a given key. If the key is not present, it returns the default value."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"age = my_dict.get('age', 0)\r\nprint(age)  # 25\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"dict.setdefault(key, default)"})}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Similar to ",(0,t.jsx)(n.code,{children:"get()"}),", but sets the default value for the key if it doesn't exist."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"my_dict.setdefault('gender', 'Male')\r\nprint(my_dict)  # {'name': 'John', 'age': 25, 'city': 'New York', 'gender': 'Male'}\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"dict.update(dictionary)"})}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Updates the dictionary with key-value pairs from another dictionary."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"other_dict = {'country': 'USA', 'age': 26}\r\nmy_dict.update(other_dict)\r\nprint(my_dict)  # {'name': 'John', 'age': 26, 'city': 'New York', 'gender': 'Male', 'country': 'USA'}\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"dict.pop(key, default)"})}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Removes and returns the value for a given key. If the key is not present, it returns the default value."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"city = my_dict.pop('city', 'Unknown')\r\nprint(city)  # 'New York'\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"dict.popitem()"})}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Removes and returns the last key-value pair as a tuple."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"last_item = my_dict.popitem()\r\nprint(last_item)  # ('country', 'USA')\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Custom Implementation of a Dictionary in Python (Extra)"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class CustomDict:\r\n    def __init__(self):\r\n        # Initialize an empty list to store key-value pairs\r\n        self.items = []\r\n\r\n    def __getitem__(self, key):\r\n        # Get the value associated with the given key\r\n        for k, v in self.items:\r\n            if k == key:\r\n                return v\r\n        # Raise KeyError if the key is not found\r\n        raise KeyError(key)\r\n\r\n    def __setitem__(self, key, value):\r\n        # Set the value associated with the given key\r\n        for i, (k, v) in enumerate(self.items):\r\n            if k == key:\r\n                # If the key already exists, update its value\r\n                self.items[i] = (key, value)\r\n                return\r\n        # If the key does not exist, add a new key-value pair\r\n        self.items.append((key, value))\r\n\r\n    def __delitem__(self, key):\r\n        # Delete the key-value pair associated with the given key\r\n        for i, (k, v) in enumerate(self.items):\r\n            if k == key:\r\n                del self.items[i]\r\n                return\r\n        # Raise KeyError if the key is not found\r\n        raise KeyError(key)\r\n\r\n    def __contains__(self, key):\r\n        # Check if the given key exists in the dictionary\r\n        return any(k == key for k, _ in self.items)\r\n\r\n    def keys(self):\r\n        # Return a list of all keys in the dictionary\r\n        return [k for k, _ in self.items]\r\n\r\n    def values(self):\r\n        # Return a list of all values in the dictionary\r\n        return [v for _, v in self.items]\r\n\r\n    def items(self):\r\n        # Return a list of all key-value pairs in the dictionary\r\n        return self.items\r\n\r\n    def __repr__(self):\r\n        # Return a string representation of the dictionary\r\n        return '{' + ', '.join(f'{k}: {v}' for k, v in self.items) + '}'\r\n\r\n# Example usage:\r\ncustom_dict = CustomDict()\r\ncustom_dict['name'] = 'John'\r\ncustom_dict['age'] = 25\r\nprint(custom_dict)  # Output: {'name': 'John', 'age': 25}\r\n\r\nprint(custom_dict['name'])  # Output: John\r\n\r\nprint('city' in custom_dict)  # Output: False\r\n\r\ndel custom_dict['age']\r\nprint(custom_dict)  # Output: {'name': 'John'}\n"})})]}),"\n",(0,t.jsx)(n.h2,{id:"big-o-notation",children:"Big O Notation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://www.bigocheatsheet.com/",children:"Click here"})," open the Big-O-Cheat-Sheet"]}),"\n",(0,t.jsx)(n.li,{children:"Watch the below video before getting started:"}),"\n"]}),"\n",(0,t.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/__vX2sjlpXU?si=7gIqmddlrWTYe37C",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.h3,{id:"rules",children:"Rules"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Ignore Constants"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["5n -> ",(0,t.jsx)(n.code,{children:"O(n)"})]}),"\n",(0,t.jsxs)(n.li,{children:["when ",(0,t.jsx)(n.code,{children:"n"})," gets large, the 5 no longer matters"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Certain terms dominate others"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"O(1)"})," < ",(0,t.jsx)(n.code,{children:"O(log n)"})," < ",(0,t.jsx)(n.code,{children:"O(n)"})," < ",(0,t.jsx)(n.code,{children:"O(n log n)"})," < ",(0,t.jsx)(n.code,{children:"O(n^2)"})," < ",(0,t.jsx)(n.code,{children:"O(2^n)"})," < ",(0,t.jsx)(n.code,{children:"O(n!)"})]})}),"\n",(0,t.jsx)(n.li,{children:"ignore of drop low order terms, when they are dominated by high order ones"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://www.bigocheatsheet.com/",children:"Big O Complexity Chart"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Red (Horrible) --\x3e Green (Excellent)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s,{}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Order of Growth"}),(0,t.jsx)(n.th,{children:"Example"}),(0,t.jsx)(n.th,{children:"Explanation"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"O(1)"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"GetFirstItem(List: ARRAY)"})}),(0,t.jsx)(n.td,{children:"The complexity of the algorithm does not change regardless of the data set size."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"O(n)"})}),(0,t.jsxs)(n.td,{children:["Linear search",(0,t.jsx)("br",{}),"Bubble sort on a sorted list"]}),(0,t.jsx)(n.td,{children:"Linear growth - Time complexity increases linearly with the size of the data set."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"O(log\u2082n)"})}),(0,t.jsx)(n.td,{children:"Binary search"}),(0,t.jsx)(n.td,{children:"The total time taken increases as the data set size increases, but each comparison halves the data set. So, the time taken increases by smaller amounts and approaches constant time."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"O(n\xb2)"})}),(0,t.jsxs)(n.td,{children:["Bubble sort",(0,t.jsx)("br",{}),"Insertion sort"]}),(0,t.jsx)(n.td,{children:"Polynomial growth - Common with algorithms that involve nested iterations over the data set."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"O(n\xb3)"})}),(0,t.jsx)(n.td,{children:"Deeper nested iterations"}),(0,t.jsx)(n.td,{children:"Polynomial growth - Deeper nested iterations will result in O(n\xb3), O(n\u2074), and so on."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"O(2\u207f)"})}),(0,t.jsx)(n.td,{children:"Recursive calculation of Fibonacci numbers"}),(0,t.jsx)(n.td,{children:"Exponential growth - Time complexity grows exponentially with the size of the data set."})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Example 1 - ",(0,t.jsx)(n.strong,{children:"Constant Time"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"x = 5 + (5 * 20)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"independent of input size, N"}),"\n",(0,t.jsxs)(n.li,{children:["Time Complexity:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"O(1)"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Example 2"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"x = 5 + (5 * 20)    # O(1)\r\ny = 15 -2           # O(1)\r\nprint(x + y)        # O(1)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Time Complexity:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"O(1)"})," + ",(0,t.jsx)(n.code,{children:"O(1)"})," + ",(0,t.jsx)(n.code,{children:"O(1)"})," ",(0,t.jsx)(n.em,{children:"--\x3e (everything has the same dominance)"})]}),"\n",(0,t.jsxs)(n.li,{children:["3 * ",(0,t.jsx)(n.code,{children:"O(1)"})," ",(0,t.jsx)(n.em,{children:"--\x3e (we drop constant)"})]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"O(1)"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsxs)(n.li,{children:["Example 3 - ",(0,t.jsx)(n.strong,{children:"Linear Runtime"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"for i in range(0, n):   # n\r\n    print(x)            # O(1)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Time Complexity:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["n * ",(0,t.jsx)(n.code,{children:"O(1)"})]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"O(n)"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsx)(n.li,{children:"Example 4"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"y = 5 + (5 * 120)       # O(1)\r\nfor i in range(0, n):   # O(n)\r\n    print(x)            #\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Time Complexity:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"O(1)"})," + ",(0,t.jsx)(n.code,{children:"O(n)"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"O(n)"})," ",(0,t.jsx)(n.em,{children:"--\x3e (rule 2, we only keep the most dominant)"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"5",children:["\n",(0,t.jsxs)(n.li,{children:["Example 5 - ",(0,t.jsx)(n.strong,{children:"Quadratic  Runtime"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"for i in range(0, n):       # O(n)\r\n    for j in range(0, n):   # O(n)\r\n        print(i*j)          # O(1)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Time Complexity:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"O(n)"})," + ",(0,t.jsx)(n.code,{children:"O(n)"})," + ",(0,t.jsx)(n.code,{children:"O(1)"})]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"O(n^2)"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["basically, ",(0,t.jsx)(n.code,{children:"n"})," to the power of number of inner loops"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"6",children:["\n",(0,t.jsx)(n.li,{children:"Example 6"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"y = 5 + (5 * 120)           # O(1)\r\nfor i in range(0, n):       # O(n)\r\n    print(x)                #\r\nfor i in range(0, n):       # O(n^2)\r\n    for j in range(0, n):   # \r\n        print(i*j)          # \n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Time Complexity:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"O(1)"})," + ",(0,t.jsx)(n.code,{children:"O(n)"})," + ",(0,t.jsx)(n.code,{children:"O(n^2)"})]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"O(n^2)"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"7",children:["\n",(0,t.jsx)(n.li,{children:"Example 7"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"if x > 0:\r\n    ...         # O(1)\r\nelse if x < 0:\r\n    ...         # O(log n)\r\nelse:\r\n    ...         # O(n^2)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Time Complexity:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"we choose the worst case scenrio, in this case,"}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"O(n^2)"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"(Extra) - Asymptotic Notations"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"This is a mathematical concept"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"There are:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Big O: ",(0,t.jsx)(n.code,{children:"O(n)"})," - ",(0,t.jsx)(n.em,{children:"Upper Bound (Worst Case)"})]}),"\n",(0,t.jsxs)(n.li,{children:["Theta: ",(0,t.jsx)(n.code,{children:"\u03b8(n)"})," - ",(0,t.jsx)(n.em,{children:"Average Bound (Average Case)"})]}),"\n",(0,t.jsxs)(n.li,{children:["Omega: ",(0,t.jsx)(n.code,{children:"\u03a9(n)"})," - ",(0,t.jsx)(n.em,{children:"Lower Bound (Best Case)"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Watch  the videos below to learn more:"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Sinhala Explanation:"}),"\n"]}),"\n"]}),(0,t.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/bYc2FwCnjus?si=2yW4bEaQAI7YDiCK",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Good Explanation in English:"}),"\n"]}),(0,t.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/A03oI0znAoc?si=EdN1Ndr9UQQANpbj",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),(0,t.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/Nd0XDY-jVHs?si=_eIrYkiQ_OkNjbEA",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0})]})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>d,a:()=>l});var t=r(7294);const i={},s=t.createContext(i);function l(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);