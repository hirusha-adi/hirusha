"use strict";(self.webpackChunkhirusha=self.webpackChunkhirusha||[]).push([[9472],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>k});var i=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,i,l=function(e,t){if(null==e)return{};var a,i,l={},n=Object.keys(e);for(i=0;i<n.length;i++)a=n[i],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(i=0;i<n.length;i++)a=n[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=i.createContext({}),p=function(e){var t=i.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},m=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var a=e.components,l=e.mdxType,n=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=p(a),u=l,k=c["".concat(s,".").concat(u)]||c[u]||d[u]||n;return a?i.createElement(k,r(r({ref:t},m),{},{components:a})):i.createElement(k,r({ref:t},m))}));function k(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var n=a.length,r=new Array(n);r[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:l,r[1]=o;for(var p=2;p<n;p++)r[p]=a[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8141:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>n,metadata:()=>o,toc:()=>p});var i=a(7462),l=(a(7294),a(3905));const n={title:"Chapter 1 - Information representation",sidebar_label:"1. Information representation",slug:"chapter_1_information_representation",sidebar_position:1},r=void 0,o={unversionedId:"study/cie_al/computer_science/paper_1/my_revision_notes/chapter_1",id:"study/cie_al/computer_science/paper_1/my_revision_notes/chapter_1",title:"Chapter 1 - Information representation",description:"Basics",source:"@site/docs/study/cie_al/computer_science/paper_1/my_revision_notes/chapter_1.md",sourceDirName:"study/cie_al/computer_science/paper_1/my_revision_notes",slug:"/study/cie_al/computer_science/paper_1/my_revision_notes/chapter_1_information_representation",permalink:"/docs/study/cie_al/computer_science/paper_1/my_revision_notes/chapter_1_information_representation",draft:!1,editUrl:"https://github.com/hirusha-adi/hirusha/tree/main/docs/study/cie_al/computer_science/paper_1/my_revision_notes/chapter_1.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Chapter 1 - Information representation",sidebar_label:"1. Information representation",slug:"chapter_1_information_representation",sidebar_position:1},sidebar:"study",previous:{title:"My Revision Notes",permalink:"/docs/study/cie_al/computer_science/paper_1/my_revision_notes/"},next:{title:"2. Communication and networking technologies",permalink:"/docs/study/cie_al/computer_science/paper_1/my_revision_notes/chapter_2_communication_and_networking_technologies"}},s={},p=[{value:"Basics",id:"basics",level:2},{value:"Structure",id:"structure",level:3},{value:"Addition",id:"addition",level:3},{value:"Substraction",id:"substraction",level:3},{value:"Decimal",id:"decimal",level:2},{value:"to Binary",id:"to-binary",level:3},{value:"to Hex",id:"to-hex",level:3},{value:"Method 1 (No Calculator)",id:"method-1-no-calculator",level:4},{value:"Method 2 (Need Calculator)",id:"method-2-need-calculator",level:4},{value:"Binary",id:"binary",level:2},{value:"to Decimal",id:"to-decimal",level:3},{value:"to Hex",id:"to-hex-1",level:3},{value:"Hexadecmal",id:"hexadecmal",level:2},{value:"to Decimal",id:"to-decimal-1",level:3},{value:"to Binary",id:"to-binary-1",level:3},{value:"Number Representation",id:"number-representation",level:2},{value:"Unsigned Integers",id:"unsigned-integers",level:3},{value:"Signed Integers",id:"signed-integers",level:3},{value:"Ones Complement",id:"ones-complement",level:3},{value:"Twos Complement",id:"twos-complement",level:3},{value:"Binary Coded Decimals",id:"binary-coded-decimals",level:2},{value:"Overflow",id:"overflow",level:2},{value:"What is an Overlfow?",id:"what-is-an-overlfow",level:4},{value:"Example",id:"example",level:4},{value:"BCD Overflow Fix",id:"bcd-overflow-fix",level:3},{value:"Character Sets",id:"character-sets",level:2},{value:"How is a word stored?",id:"how-is-a-word-stored",level:4},{value:"ASCII",id:"ascii",level:3},{value:"Extended ASCII",id:"extended-ascii",level:3},{value:"Unicode",id:"unicode",level:3},{value:"Remember these character codes",id:"remember-these-character-codes",level:4},{value:"What is the character code of <code>c</code> given that the character code of <code>a</code> is <code>97</code>?",id:"what-is-the-character-code-of-c-given-that-the-character-code-of-a-is-97",level:4},{value:"Sound",id:"sound",level:2},{value:"Definitions",id:"definitions",level:3},{value:"Sampling",id:"sampling",level:4},{value:"Sampling Resolution",id:"sampling-resolution",level:4},{value:"Sampling Rate",id:"sampling-rate",level:4},{value:"Components",id:"components",level:3},{value:"ADC",id:"adc",level:4},{value:"Band Lmiting Filter",id:"band-lmiting-filter",level:4},{value:"Vector Graphics",id:"vector-graphics",level:2},{value:"How are vectors stored?",id:"how-are-vectors-stored",level:4},{value:"why vector graphics have a lower file size?",id:"why-vector-graphics-have-a-lower-file-size",level:4},{value:"why don&#39;t vector graphics loose quality when resized?",id:"why-dont-vector-graphics-loose-quality-when-resized",level:4},{value:"file formats?",id:"file-formats",level:4},{value:"Definitions",id:"definitions-1",level:3},{value:"Drawing Object",id:"drawing-object",level:4},{value:"Property",id:"property",level:4},{value:"Bitmaps",id:"bitmaps",level:2},{value:"File Formats",id:"file-formats-1",level:4},{value:"Defnitions",id:"defnitions",level:3},{value:"Pixel",id:"pixel",level:4},{value:"Color Depth",id:"color-depth",level:4},{value:"Bit Depth",id:"bit-depth",level:4},{value:"Image Resultion",id:"image-resultion",level:4},{value:"Bitmap Header",id:"bitmap-header",level:3},{value:"Calculating File Size",id:"calculating-file-size",level:3},{value:"Compression",id:"compression",level:2},{value:"Why compress data?",id:"why-compress-data",level:4},{value:"Lossy Compression",id:"lossy-compression",level:3},{value:"Lossless Compression",id:"lossless-compression",level:3},{value:"Run Length Encoding",id:"run-length-encoding",level:4},{value:"Compressing Data",id:"compressing-data",level:3},{value:"Compressing Images",id:"compressing-images",level:4},{value:"Compressing Audio",id:"compressing-audio",level:4},{value:"Compressing Text",id:"compressing-text",level:4},{value:"Why RLE might be bad for compressing text files?",id:"why-rle-might-be-bad-for-compressing-text-files",level:5},{value:"Other",id:"other",level:2},{value:"Multimedia Container Format",id:"multimedia-container-format",level:3},{value:"File Formats",id:"file-formats-2",level:4},{value:"Bitmaps vs Vectors",id:"bitmaps-vs-vectors",level:3},{value:"Bitmaps",id:"bitmaps-1",level:4},{value:"Vectors",id:"vectors",level:4}],m={toc:p},c="wrapper";function d(e){let{components:t,...a}=e;return(0,l.kt)(c,(0,i.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"basics"},"Basics"),(0,l.kt)("h3",{id:"structure"},"Structure"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"In a byte, there are 8 bits:\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"         0   0   0   0     0   0   0   0\n(most significant bit)       (least significant bit) \n")),(0,l.kt)("h3",{id:"addition"},"Addition"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"overflow errors are very common here ")),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/1163847683207856178/1168495164176740352/image.png?ex=6551f8ec&is=653f83ec&hm=459efa9b9bbd0e8ecc1c8ad400b3082d53da55f714b7baafc2384fa18ec23846&",alt:"iaa"})),(0,l.kt)("h3",{id:"substraction"},"Substraction"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Basics:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"1 - 0  =  1")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"10 - 1  =  1")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"11 - 1  =  10")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Note:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"You can\u2019t: ",(0,l.kt)("inlineCode",{parentName:"li"},"0 - 1"),", so, you have to borrow")))),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/1163847683207856178/1168495537612410950/image.png?ex=6551f945&is=653f8445&hm=3bb31abb1c54432eb229b66b9e2934971113e956bf3f7879b766c4687f36584b&",alt:"iaa3"})),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"this is discussed further under ",(0,l.kt)("a",{parentName:"li",href:"#twos-complement"},"Two's Complement"))),(0,l.kt)("h2",{id:"decimal"},"Decimal"),(0,l.kt)("h3",{id:"to-binary"},"to Binary"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/1163847683207856178/1168486746800017502/image.png?ex=6551f115&is=653f7c15&hm=06a8618235cd1998b2c2a04366ff218c8d0511656579222a7a83ac5936591a54&",alt:"img1"})),(0,l.kt)("h3",{id:"to-hex"},"to Hex"),(0,l.kt)("h4",{id:"method-1-no-calculator"},"Method 1 (No Calculator)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"first, convert to Binary"),(0,l.kt)("li",{parentName:"ul"},"then, convert to Hexadeximal",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"consider each 4 bits from LSB (as blocks of 4 bits)")))),(0,l.kt)("h4",{id:"method-2-need-calculator"},"Method 2 (Need Calculator)"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/1163847683207856178/1168487441972334642/image.png?ex=6551f1bb&is=653f7cbb&hm=c564ea57d53e5553abf0d020cee6cf1692b6bbc067fe45cba3d39c4715bda0f9&",alt:"img3"})),(0,l.kt)("h2",{id:"binary"},"Binary"),(0,l.kt)("h3",{id:"to-decimal"},"to Decimal"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/1163847683207856178/1168487246043828264/image.png?ex=6551f18c&is=653f7c8c&hm=88d7984e5e0559886d89900aa03b5a2edc935fdaaf94682315264b739ce2a4b6&",alt:"img2"})),(0,l.kt)("h3",{id:"to-hex-1"},"to Hex"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/1163847683207856178/1168488572899315803/image.png?ex=6551f2c9&is=653f7dc9&hm=0bfdc47d1cf8aaa8a633be0b92b4a841c262ed78394295de55e45c8aaf0e541f&",alt:"img6"})),(0,l.kt)("h2",{id:"hexadecmal"},"Hexadecmal"),(0,l.kt)("h3",{id:"to-decimal-1"},"to Decimal"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/1163847683207856178/1168487979614994463/image.png?ex=6551f23b&is=653f7d3b&hm=8a1d04ea8f8e88c983eaaf4b0ab5d30b98adcc6b87cfde34c2b4714b9db0d7b5&",alt:"img4"})),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/1163847683207856178/1168488190110339122/image.png?ex=6551f26d&is=653f7d6d&hm=b1300e46f4bbe013e7828e0ec09e214ef15d46aea304c12343da8186a591b5c9&",alt:"img5"})),(0,l.kt)("h3",{id:"to-binary-1"},"to Binary"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/1163847683207856178/1168488731494330428/image.png?ex=6551f2ef&is=653f7def&hm=ec9cb8efe99fa07cf945773907d3aa113e40ba92c1a75da576197ec76b4144d1&",alt:"img7"})),(0,l.kt)("h2",{id:"number-representation"},"Number Representation"),(0,l.kt)("h3",{id:"unsigned-integers"},"Unsigned Integers"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"store only positive numbers"),(0,l.kt)("li",{parentName:"ul"},"uses all bits to store the value")),(0,l.kt)("h3",{id:"signed-integers"},"Signed Integers"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"1 bit is used to store the sign")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can store negative number"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"if MSB is one it's negative"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"there are two types"),(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},"one's complement "),(0,l.kt)("li",{parentName:"ol"},"two's complement ")))),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/1163847683207856178/1168491617884319804/image.png?ex=6551f59f&is=653f809f&hm=a980b7cad8d786a59aae406fce8d3f62f282f78bcc377c2dc1247f5ef19b279f&",alt:"im7"})),(0,l.kt)("h3",{id:"ones-complement"},"Ones Complement"),(0,l.kt)("p",null,"one from each bit or invert every bit"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/1163847683207856178/1168490255754743808/image.png?ex=6551f45a&is=653f7f5a&hm=010b2a17035c42f07e0526a6b07012f32de666b137541149a3ccb24e4c7b019f&",alt:"im1"})),(0,l.kt)("h3",{id:"twos-complement"},"Twos Complement"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"ones complement + 1"),(0,l.kt)("li",{parentName:"ul"},"or"),(0,l.kt)("li",{parentName:"ul"},"start from the first bit (LSB) upto the first '1' (inclusive) and invert everything from that point")),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/1163847683207856178/1168490442850050098/image.png?ex=6551f487&is=653f7f87&hm=1cddb9d8658f79fb241879e8cb3c13276ccf3118991ae30040e9ce04d1faab44&",alt:"im2"})),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/1163847683207856178/1168490417222856704/image.png?ex=6551f480&is=653f7f80&hm=ada722561814280d3612e71aa0e4e9062848f111fe789bd33c468322ff889ea5&",alt:"im3"})),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"when substracting negative numbers, ",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"convert the absolute value of that negative number to binary, ",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"( absolute value of of ",(0,l.kt)("inlineCode",{parentName:"li"},"-4")," is ",(0,l.kt)("inlineCode",{parentName:"li"},"4")," )"))),(0,l.kt)("li",{parentName:"ul"},"gets its twos complement "),(0,l.kt)("li",{parentName:"ul"},"and add it to the number we need to subtract from")))),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/1163847683207856178/1168491077917999236/image.png?ex=6551f51e&is=653f801e&hm=8725a7f48c6021093a89eb48e48a218dbe6dc84c6c8dff723945db71616c35a3&",alt:"im4"})),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/1163847683207856178/1168491091746635867/image.png?ex=6551f521&is=653f8021&hm=7b332c66a013a570959bdbf0efd07006fa43df6322f54b03883723423e18e873&",alt:"im5"})),(0,l.kt)("h2",{id:"binary-coded-decimals"},"Binary Coded Decimals"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"often reffered to as BCD")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"valid only if 0 (0000) to 9 (1001)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Only ",(0,l.kt)("strong",{parentName:"p"},"0000-1001")," are ",(0,l.kt)("strong",{parentName:"p"},"valid"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"eg:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u201c85\u201d can be represented as:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"0000",(0,l.kt)("strong",{parentName:"li"},"1000"),"  0000",(0,l.kt)("strong",{parentName:"li"},"0101")," \t",(0,l.kt)("em",{parentName:"li"},"(one BCD digit per byte)")),(0,l.kt)("li",{parentName:"ul"},"1000",(0,l.kt)("strong",{parentName:"li"},"0101")," \t\t\t        ",(0,l.kt)("em",{parentName:"li"},"(two BCD digits per byte)")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u201c8503\u201d can be represented as:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"0000",(0,l.kt)("strong",{parentName:"li"},"1000")," 0000",(0,l.kt)("strong",{parentName:"li"},"0101")," 0000",(0,l.kt)("strong",{parentName:"li"},"0000")," 0000",(0,l.kt)("strong",{parentName:"li"},"0011"),"   ",(0,l.kt)("em",{parentName:"li"},"(one BCD digit per byte)")),(0,l.kt)("li",{parentName:"ul"},"1000",(0,l.kt)("strong",{parentName:"li"},"0101"),"0000",(0,l.kt)("strong",{parentName:"li"},"0011")," \t\t\t\t\t            ",(0,l.kt)("em",{parentName:"li"},"(two BCD digits per byte)"))))))),(0,l.kt)("h2",{id:"overflow"},"Overflow"),(0,l.kt)("h4",{id:"what-is-an-overlfow"},"What is an Overlfow?"),(0,l.kt)("h4",{id:"example"},"Example"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/1163847683207856178/1168493630462361740/image.png?ex=6551f77f&is=653f827f&hm=19344495742ce33a05e7a91ba9ba3ce8988266e62ac9b3ff06d5c59102204655&",alt:"ia1"})),(0,l.kt)("h3",{id:"bcd-overflow-fix"},"BCD Overflow Fix"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"add ",(0,l.kt)("inlineCode",{parentName:"li"},"0110")," to fix")),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/1163847683207856178/1168493807545876480/image.png?ex=6551f7a9&is=653f82a9&hm=ae1052078c97a90a86983f5eea465f0814440bd3d4e89af66500a8bd9b17aa03&",alt:"ia1"})),(0,l.kt)("h2",{id:"character-sets"},"Character Sets"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"symbols/list of characters recognised by a computer")),(0,l.kt)("h4",{id:"how-is-a-word-stored"},"How is a word stored?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"each character gets replaced by their unique code"),(0,l.kt)("li",{parentName:"ul"},"the codes are stored in the same order as in the word")),(0,l.kt)("h3",{id:"ascii"},"ASCII"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"uses 7 bits per character"),(0,l.kt)("li",{parentName:"ul"},"has lesser character range"),(0,l.kt)("li",{parentName:"ul"},"english characters only")),(0,l.kt)("h3",{id:"extended-ascii"},"Extended ASCII"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"uses 8 bits per character"),(0,l.kt)("li",{parentName:"ul"},"slightly larger character range that ASCII")),(0,l.kt)("h3",{id:"unicode"},"Unicode"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"uses 4 bytes per character"),(0,l.kt)("li",{parentName:"ul"},"has a greater character range"),(0,l.kt)("li",{parentName:"ul"},"standardized ")),(0,l.kt)("p",null,"EXAMPLE SUPERSET / SUBSET"),(0,l.kt)("h4",{id:"remember-these-character-codes"},"Remember these character codes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"a")," : 97"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"z")," : 122"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"A")," : 65"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Z")," : 90")),(0,l.kt)("h4",{id:"what-is-the-character-code-of-c-given-that-the-character-code-of-a-is-97"},"What is the character code of ",(0,l.kt)("inlineCode",{parentName:"h4"},"c")," given that the character code of ",(0,l.kt)("inlineCode",{parentName:"h4"},"a")," is ",(0,l.kt)("inlineCode",{parentName:"h4"},"97"),"?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"basically, start counting"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"a")," : 97"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"b")," : 98"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"c")," : 99"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"character code of ",(0,l.kt)("inlineCode",{parentName:"p"},"c")," is 99")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"you can also add 3 to the character code of ",(0,l.kt)("inlineCode",{parentName:"p"},"a")," which is ",(0,l.kt)("inlineCode",{parentName:"p"},"97")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"c")," is 3 letters to right from ",(0,l.kt)("inlineCode",{parentName:"p"},"a")))),(0,l.kt)("h2",{id:"sound"},"Sound"),(0,l.kt)("h3",{id:"definitions"},"Definitions"),(0,l.kt)("h4",{id:"sampling"},"Sampling"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"measuring the amplitude of the wave at a regualr time interval")),(0,l.kt)("h4",{id:"sampling-resolution"},"Sampling Resolution"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"number of bits used to represent each sample")),(0,l.kt)("h4",{id:"sampling-rate"},"Sampling Rate"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"number of samples taken per unit time")),(0,l.kt)("h3",{id:"components"},"Components"),(0,l.kt)("h4",{id:"adc"},"ADC"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Analogue to Digital Converter"),(0,l.kt)("li",{parentName:"ul"},"Converts analogue sound wave to a digital form so that the computer can understand and interpret it")),(0,l.kt)("h4",{id:"band-lmiting-filter"},"Band Lmiting Filter"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"removes high frequency parts that humans cannot hear")),(0,l.kt)("h2",{id:"vector-graphics"},"Vector Graphics"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"graphics made of drawing objects in a drawing list")),(0,l.kt)("h4",{id:"how-are-vectors-stored"},"How are vectors stored?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"series of geometric shapes"),(0,l.kt)("li",{parentName:"ul"},"has coordinates stored"),(0,l.kt)("li",{parentName:"ul"},"contains the drawing list"),(0,l.kt)("li",{parentName:"ul"},"has commands for all objects + attributes (properties)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"like: color, line thickness, line style, background color, foreground color")))),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/1163847683207856178/1168493980862910555/image.png?ex=6551f7d2&is=653f82d2&hm=4ab15c629f2f750afcbc23ba406b184a41ef327c73fe6795bd2415f893af8fdd&",alt:"vec1"})),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"->")," Vector Graphic File",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"->")," Drawing List",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"->")," Command for each object",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"->")," Attributes",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"->")," Define a property of the object",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"->")," Basic Geometric Data")))))))))))),(0,l.kt)("h4",{id:"why-vector-graphics-have-a-lower-file-size"},"why vector graphics have a lower file size?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"only the instructions to create the image are stored"),(0,l.kt)("li",{parentName:"ul"},"not individual pictures, like bitmap images")),(0,l.kt)("h4",{id:"why-dont-vector-graphics-loose-quality-when-resized"},"why don't vector graphics loose quality when resized?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the instructions to create the image are stored"),(0,l.kt)("li",{parentName:"ul"},"the image is calculated again dynamically to the required size using these given instructions"),(0,l.kt)("li",{parentName:"ul"},"therefore, no distortions / not pixellating")),(0,l.kt)("h4",{id:"file-formats"},"file formats?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".svg")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".cdr")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".eps"))),(0,l.kt)("h3",{id:"definitions-1"},"Definitions"),(0,l.kt)("h4",{id:"drawing-object"},"Drawing Object"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"component defined by a geometric formulae and associated properties")),(0,l.kt)("h4",{id:"property"},"Property"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"defines one aspect of the appearance of drawing objects")),(0,l.kt)("h2",{id:"bitmaps"},"Bitmaps"),(0,l.kt)("h4",{id:"file-formats-1"},"File Formats"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".bmp")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".png")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".jpg")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".jpeg"))),(0,l.kt)("h3",{id:"defnitions"},"Defnitions"),(0,l.kt)("h4",{id:"pixel"},"Pixel"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"smallest identifiable component of a bitmap image"),(0,l.kt)("li",{parentName:"ul"},"image is made from a two dimentional pixel array"),(0,l.kt)("li",{parentName:"ul"},"each pixel in this array has a position and a color")),(0,l.kt)("h4",{id:"color-depth"},"Color Depth"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"total number of colors that can be represented in an image"),(0,l.kt)("li",{parentName:"ul"},"number of bits per pixel"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"8")," bits = ",(0,l.kt)("inlineCode",{parentName:"li"},"256")," colors"),(0,l.kt)("li",{parentName:"ul"},"and also",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"4")," colors = ",(0,l.kt)("inlineCode",{parentName:"li"},"2")," bits"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"8")," colors = ",(0,l.kt)("inlineCode",{parentName:"li"},"3")," bits"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"5")," colors = ",(0,l.kt)("inlineCode",{parentName:"li"},"3")," bits (as ",(0,l.kt)("inlineCode",{parentName:"li"},"5>4"),")")))),(0,l.kt)("h4",{id:"bit-depth"},"Bit Depth"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"number of bits used to represent each pixel in an image"),(0,l.kt)("li",{parentName:"ul"},"number of bits used to represent one pixel"),(0,l.kt)("li",{parentName:"ul"},"allows colors variations and shades"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"8")," bits = ",(0,l.kt)("inlineCode",{parentName:"li"},"256")," shades of one color")),(0,l.kt)("h4",{id:"image-resultion"},"Image Resultion"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"number of pixels in image"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"length * height")," in pixels")),(0,l.kt)("h3",{id:"bitmap-header"},"Bitmap Header"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"stores metadata about the image:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"bit depth"),(0,l.kt)("li",{parentName:"ul"},"image resolution"),(0,l.kt)("li",{parentName:"ul"},"dimensions"),(0,l.kt)("li",{parentName:"ul"},"offset of image data in file"),(0,l.kt)("li",{parentName:"ul"},"compression type"),(0,l.kt)("li",{parentName:"ul"},"file type info (specially important for linux)")))),(0,l.kt)("h3",{id:"calculating-file-size"},"Calculating File Size"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"(length in px) * (breadth in px) * (color depth) = X bits"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"then, convert from bits to whatever you want")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"the original file size may be larger than what was estimated during this calculation")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"its because the did not include the size of the bitmap header")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"eg:"),(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"calculate a value for the minimum size of a bitmap file. The bitmap is to use a bit depth of 8 and the bitmap is to be printed with 72 dpi (dots per inch) and to have dimensions 5 inches by 3 inches"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"bit depth is 8, which means 8 bits for each of the RGB components, so 24 (8*3) bits are needed for one pixel."),(0,l.kt)("li",{parentName:"ul"},"72 dpi means 72 pixels per inch"),(0,l.kt)("li",{parentName:"ul"},"number of pixels per row is 5 \xd7 72 = 360 pixels"),(0,l.kt)("li",{parentName:"ul"},"number of pixels per column is 3 \xd7 72 = 216 pixels"),(0,l.kt)("li",{parentName:"ul"},"total number of pixels is 360 \xd7 216 = 77 760 pixels"),(0,l.kt)("li",{parentName:"ul"},"total number of bits is 77 760 \xd7 24 = 1866240 bits"),(0,l.kt)("li",{parentName:"ul"},"File size is (1866240/8/1024) = 227.8 KiB"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"resolution is 1366 by 768 and color depth is 24"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"number of bits we need is: 1366 ",(0,l.kt)("em",{parentName:"li"}," 768 ")," 24 = 25178112 bits"),(0,l.kt)("li",{parentName:"ul"},"= 25178112 \xf7 8 = 3147264 bytes"),(0,l.kt)("li",{parentName:"ul"},"= 3147264 \xf7 1024 = 3073.5 kibibytes (3073.5 KiB)"),(0,l.kt)("li",{parentName:"ul"},"= 3073.5 \xf7 1024 = approximately 3 MiB")))))),(0,l.kt)("h2",{id:"compression"},"Compression"),(0,l.kt)("h4",{id:"why-compress-data"},"Why compress data?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"to save storage space"),(0,l.kt)("li",{parentName:"ul"},"reduce transmission costs / time "),(0,l.kt)("li",{parentName:"ul"},"faster load times (important for websites)"),(0,l.kt)("li",{parentName:"ul"},"meet file size limitations (eg: in an email)")),(0,l.kt)("h3",{id:"lossy-compression"},"Lossy Compression"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"data is lost ar compression"),(0,l.kt)("li",{parentName:"ul"},"decompressed file won't be same as the original"),(0,l.kt)("li",{parentName:"ul"},"has a higher compression ratio")),(0,l.kt)("h3",{id:"lossless-compression"},"Lossless Compression"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"all data is retained"),(0,l.kt)("li",{parentName:"ul"},"nothing is lost"),(0,l.kt)("li",{parentName:"ul"},"low compression ratio"),(0,l.kt)("li",{parentName:"ul"},"has two methods",(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},"Run Length Encoding"),(0,l.kt)("li",{parentName:"ol"},"Huffman Encoding (click here to learn something beyond the scope of this syllabus)")))),(0,l.kt)("h4",{id:"run-length-encoding"},"Run Length Encoding"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a lossless compression technique"),(0,l.kt)("li",{parentName:"ul"},"looks for ",(0,l.kt)("strong",{parentName:"li"},"consecutive")," blocks of same repeating bits"),(0,l.kt)("li",{parentName:"ul"},"and replace them with one block of those bits"),(0,l.kt)("li",{parentName:"ul"},"along with the number of times its repeated"),(0,l.kt)("li",{parentName:"ul"},"eg:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"aaaaa")," can be replaced with ",(0,l.kt)("inlineCode",{parentName:"li"},"5a")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"393939")," can be replaced with ",(0,l.kt)("inlineCode",{parentName:"li"},"339"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"here, the first ",(0,l.kt)("inlineCode",{parentName:"li"},"3")," tells that there are 3 sets of ",(0,l.kt)("inlineCode",{parentName:"li"},"39"))))))),(0,l.kt)("h3",{id:"compressing-data"},"Compressing Data"),(0,l.kt)("h4",{id:"compressing-images"},"Compressing Images"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"use RLE for areas with same color (lossless)"),(0,l.kt)("li",{parentName:"ul"},"reduce the resolution (lossy)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"fewer pixels stored"),(0,l.kt)("li",{parentName:"ul"},"less storage occupied"))),(0,l.kt)("li",{parentName:"ul"},"reduce the color depth (lossy)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"less colors per pixel"),(0,l.kt)("li",{parentName:"ul"},"each pixel has fewer bits to be stored"),(0,l.kt)("li",{parentName:"ul"},"less storage is occupied")))),(0,l.kt)("h4",{id:"compressing-audio"},"Compressing Audio"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"use RLE for similiar amplitude points (lossless)"),(0,l.kt)("li",{parentName:"ul"},"reduce the sampling resolution (lossy)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"less bits used for each sample"))),(0,l.kt)("li",{parentName:"ul"},"reduce sampling rate",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"less samples taken per second")))),(0,l.kt)("h4",{id:"compressing-text"},"Compressing Text"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"DO NOT")," use lossy compression (we need to retain the original data)"),(0,l.kt)("li",{parentName:"ul"},"if characters are lost"),(0,l.kt)("li",{parentName:"ul"},"it won't make sense")),(0,l.kt)("h5",{id:"why-rle-might-be-bad-for-compressing-text-files"},"Why RLE might be bad for compressing text files?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"with RLE, ",(0,l.kt)("inlineCode",{parentName:"li"},"aaaaa")," is written as ",(0,l.kt)("inlineCode",{parentName:"li"},"a5")),(0,l.kt)("li",{parentName:"ul"},"most characters are used only once in sequence"),(0,l.kt)("li",{parentName:"ul"},"RLE with therefore give a bad compression ratio"),(0,l.kt)("li",{parentName:"ul"},"or even be larger than the source file")),(0,l.kt)("h2",{id:"other"},"Other"),(0,l.kt)("h3",{id:"multimedia-container-format"},"Multimedia Container Format"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"type of format that combines sound and image components of the video")),(0,l.kt)("h4",{id:"file-formats-2"},"File Formats"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".mp4")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".wmv")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".avi"))),(0,l.kt)("h3",{id:"bitmaps-vs-vectors"},"Bitmaps vs Vectors"),(0,l.kt)("h4",{id:"bitmaps-1"},"Bitmaps"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"loose quality when charged")),(0,l.kt)("h4",{id:"vectors"},"Vectors"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"smaller file size"),(0,l.kt)("li",{parentName:"ul"},"easy storage and transmission")))}d.isMDXComponent=!0}}]);