"use strict";(self.webpackChunkhirusha=self.webpackChunkhirusha||[]).push([[9753],{9474:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>o});var n=t(1527),i=t(6213);const r={title:"Notes - Low-level programming",sidebar_label:"Notes",slug:"notes",sidebar_position:1},c=void 0,d={id:"study/cie_al/computer_science/paper_4/my_study_notes/chapter_28/notes",title:"Notes - Low-level programming",description:"Our instruction set",source:"@site/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_28/notes.md",sourceDirName:"study/cie_al/computer_science/paper_4/my_study_notes/chapter_28",slug:"/study/cie_al/computer_science/paper_4/my_study_notes/chapter_28/notes",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_28/notes",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Notes - Low-level programming",sidebar_label:"Notes",slug:"notes",sidebar_position:1},sidebar:"study",previous:{title:"Chapter 28 - Low-level programming",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_28/"},next:{title:"ESQ",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_28/esq"}},l={},o=[{value:"Our instruction set",id:"our-instruction-set",level:2},{value:"Symbolic Addresses",id:"symbolic-addresses",level:2},{value:"Problem Solving",id:"problem-solving",level:2},{value:"Assignment",id:"assignment",level:3}];function a(e){const s={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h2,{id:"our-instruction-set",children:"Our instruction set"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:'"An instruction set architecture is a part of the abstract model of a computer, which generally defines how software controls the CPU. A device that executes instructions described by that ISA, such as a central processing unit, is called an implementation"'})," - ",(0,n.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Instruction_set_architecture",children:"Wikipedia"})]}),"\n",(0,n.jsx)(s.p,{children:"Below is the instruction set that we will be working with:"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.img,{alt:"alt text",src:t(3208).Z+"",width:"812",height:"931"}),"\n",(0,n.jsx)(s.img,{alt:"alt text",src:t(4695).Z+"",width:"810",height:"270"})]}),"\n",(0,n.jsx)(s.p,{children:"In the assembly code in this chapter:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"ACC"})," denotes the Accumulator"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"IX"})," denotes the Index Register"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"#"})," denotes immediate addressing"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"B"})," denotes a binary number, e.g. B01001010"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"&"})," denotes a hexadecimal number, e.g. &4A"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"<address>"})," can be an absolute address or a symbolic address."]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"symbolic-addresses",children:"Symbolic Addresses"}),"\n",(0,n.jsx)(s.p,{children:"A label is a symbolic name for the memory location that it represents."}),"\n",(0,n.jsx)(s.p,{children:"You can treat it like a variable name"}),"\n",(0,n.jsx)(s.p,{children:"The assembler will allocate absolute addresses during the assembly process."}),"\n",(0,n.jsx)(s.h2,{id:"problem-solving",children:"Problem Solving"}),"\n",(0,n.jsx)(s.h3,{id:"assignment",children:"Assignment"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Pseudocode"}),(0,n.jsx)(s.th,{children:"Assembly Code"}),(0,n.jsx)(s.th,{children:"Explanation"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"A <- 34"})}),(0,n.jsxs)(s.td,{children:[(0,n.jsx)(s.code,{children:"LDM #34"}),(0,n.jsx)("br",{}),(0,n.jsx)(s.code,{children:"STO A"})]}),(0,n.jsx)(s.td,{children:"Assign value to A"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"B <- B + 1"})}),(0,n.jsxs)(s.td,{children:[(0,n.jsx)(s.code,{children:"LDD B"}),(0,n.jsx)("br",{}),(0,n.jsx)(s.code,{children:"INC ACC"}),(0,n.jsx)("br",{}),(0,n.jsx)(s.code,{children:"STO B"})]}),(0,n.jsx)(s.td,{children:"Increment value of B"})]})]})]})]})}function h(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},4695:(e,s,t)=>{t.d(s,{Z:()=>n});const n=t.p+"assets/images/image-1-ee678a0709cc31cb9f0937f07e1e1814.png"},3208:(e,s,t)=>{t.d(s,{Z:()=>n});const n=t.p+"assets/images/image-f65462a19d8ee6f728781ad950839aa4.png"},6213:(e,s,t)=>{t.d(s,{Z:()=>d,a:()=>c});var n=t(959);const i={},r=n.createContext(i);function c(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);