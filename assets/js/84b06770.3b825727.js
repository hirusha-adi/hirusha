"use strict";(self.webpackChunkhirusha=self.webpackChunkhirusha||[]).push([[6004],{7676:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var r=s(1527),t=s(6213);const i={title:"Object-Oriented Programming (OOP) Concepts",sidebar_label:"OOP Concepts",slug:"oop",sidebar_position:4},a=void 0,l={id:"study/cie_al/computer_science/paper_4/my_study_notes/chapter_27/oop",title:"Object-Oriented Programming (OOP) Concepts",description:"1. Inheritance",source:"@site/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_27/oop.md",sourceDirName:"study/cie_al/computer_science/paper_4/my_study_notes/chapter_27",slug:"/study/cie_al/computer_science/paper_4/my_study_notes/chapter_27/oop",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_27/oop",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Object-Oriented Programming (OOP) Concepts",sidebar_label:"OOP Concepts",slug:"oop",sidebar_position:4},sidebar:"study",previous:{title:"Dunder Methods",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_27/dunder"},next:{title:"Edexcel IAL",permalink:"/docs/study/edexcel_ial/"}},d={},o=[{value:"1. Inheritance",id:"1-inheritance",level:2},{value:"Basic Inheritance",id:"basic-inheritance",level:3},{value:"Creating a Base Class",id:"creating-a-base-class",level:4},{value:"Creating a Derived Class",id:"creating-a-derived-class",level:4},{value:"Method Overriding",id:"method-overriding",level:3},{value:"Using <code>super()</code> to Invoke the Parent Class",id:"using-super-to-invoke-the-parent-class",level:3},{value:"2. Encapsulation",id:"2-encapsulation",level:2},{value:"Basic Encapsulation",id:"basic-encapsulation",level:3},{value:"Creating a Class with Private Attributes",id:"creating-a-class-with-private-attributes",level:4},{value:"Accessing Private Attributes",id:"accessing-private-attributes",level:4},{value:"Properties",id:"properties",level:3},{value:"Getters &amp; Setters",id:"getters--setters",level:3},{value:"Getters",id:"getters",level:3},{value:"Setters",id:"setters",level:3},{value:"3. Abstraction",id:"3-abstraction",level:2},{value:"Abstract Classes and Methods",id:"abstract-classes-and-methods",level:3},{value:"Creating an Abstract Class",id:"creating-an-abstract-class",level:3},{value:"Creating Concrete Classes",id:"creating-concrete-classes",level:3},{value:"Using Abstraction in Code",id:"using-abstraction-in-code",level:3},{value:"4. Polymorphism",id:"4-polymorphism",level:2},{value:"1. Method Overloading",id:"1-method-overloading",level:4},{value:"Defining Multiple Methods with the Same Name",id:"defining-multiple-methods-with-the-same-name",level:4},{value:"Using Method Overloading",id:"using-method-overloading",level:4},{value:"2. Method Overriding",id:"2-method-overriding",level:4},{value:"Redefining Methods in Subclasses",id:"redefining-methods-in-subclasses",level:4},{value:"Using Method Overriding",id:"using-method-overriding",level:4},{value:"3. Interfaces",id:"3-interfaces",level:4},{value:"Defining Common Interfaces",id:"defining-common-interfaces",level:4},{value:"Implementing Interfaces",id:"implementing-interfaces",level:4},{value:"Using Interfaces for Polymorphism",id:"using-interfaces-for-polymorphism",level:4},{value:"Method Overloading",id:"method-overloading",level:3},{value:"Defining Multiple Methods with the Same Name",id:"defining-multiple-methods-with-the-same-name-1",level:4},{value:"Using Method Overloading",id:"using-method-overloading-1",level:4},{value:"Method Overriding",id:"method-overriding-1",level:3},{value:"Redefining Methods in Subclasses",id:"redefining-methods-in-subclasses-1",level:4},{value:"Using Method Overriding",id:"using-method-overriding-1",level:4},{value:"More about <code>super()</code>",id:"more-about-super",level:2}];function c(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"1-inheritance",children:"1. Inheritance"}),"\n",(0,r.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/an59YHkdK9A?si=RrERAdfk4VByvnYq",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),"\n",(0,r.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/J2_DHndMW9s?si=8IopBW9_zEiq3JtI",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),"\n",(0,r.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/mRIeUXhIAxg?si=6imvSrskMKwPMAS0",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Allows a class (subclass/derived class) to inherit properties and behaviors from another class (superclass/base class)."}),"\n",(0,r.jsx)(n.li,{children:"This promotes code reusability and helps in organizing and structuring code effectively."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"basic-inheritance",children:"Basic Inheritance"}),"\n",(0,r.jsx)(n.h4,{id:"creating-a-base-class",children:"Creating a Base Class"}),"\n",(0,r.jsx)(n.p,{children:"Let's start by creating a simple base class:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Animal:\r\n    def __init__(self, name):\r\n        self.name = name\r\n\r\n    def speak(self):\r\n        print(f"{self.name} makes a sound.")\n'})}),"\n",(0,r.jsx)(n.h4,{id:"creating-a-derived-class",children:"Creating a Derived Class"}),"\n",(0,r.jsxs)(n.p,{children:["Now, let's create a derived class that inherits from the ",(0,r.jsx)(n.code,{children:"Animal"})," class:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Dog(Animal):\r\n    def bark(self):\r\n        print(f"{self.name} barks loudly!")\r\n\r\n# Creating an instance of the derived class\r\ndog_instance = Dog("Buddy")\r\n\r\n# Accessing the base class method\r\ndog_instance.speak()  # Output: Buddy makes a sound.\r\n\r\n# Calling the method defined in the derived class\r\ndog_instance.bark()   # Output: Buddy barks loudly!\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, ",(0,r.jsx)(n.code,{children:"Dog"})," is a subclass of ",(0,r.jsx)(n.code,{children:"Animal"}),", and it inherits the ",(0,r.jsx)(n.code,{children:"__init__"})," and ",(0,r.jsx)(n.code,{children:"speak"})," methods from the base class."]}),"\n",(0,r.jsx)(n.h3,{id:"method-overriding",children:"Method Overriding"}),"\n",(0,r.jsx)(n.p,{children:"Subclasses can override methods inherited from the base class by providing their own implementation."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Cat(Animal):\r\n    def speak(self):\r\n        print(f"{self.name} meows softly.")\r\n\r\n# Creating an instance of the derived class\r\ncat_instance = Cat("Whiskers")\r\n\r\n# Overriding the speak method\r\ncat_instance.speak()  # Output: Whiskers meows softly.\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Here, the ",(0,r.jsx)(n.code,{children:"speak"})," method in the ",(0,r.jsx)(n.code,{children:"Cat"})," class overrides the method in the ",(0,r.jsx)(n.code,{children:"Animal"})," class."]}),"\n",(0,r.jsxs)(n.h3,{id:"using-super-to-invoke-the-parent-class",children:["Using ",(0,r.jsx)(n.code,{children:"super()"})," to Invoke the Parent Class"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"super()"})," function is used to call methods and constructors of the parent class. Let's illustrate this with an example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Bird(Animal):\r\n    def __init__(self, name, wingspan):\r\n        super().__init__(name)\r\n        self.wingspan = wingspan\r\n\r\n    def fly(self):\r\n        print(f"{self.name} is flying with a wingspan of {self.wingspan} inches.")\r\n\r\n# Creating an instance of the derived class\r\nbird_instance = Bird("Robin", 10)\r\n\r\n# Accessing the base class method using super()\r\nbird_instance.speak()  # Output: Robin makes a sound.\r\n\r\n# Accessing the overridden method in the derived class\r\nbird_instance.fly()    # Output: Robin is flying with a wingspan of 10 inches.\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, ",(0,r.jsx)(n.code,{children:"super().__init__(name)"})," is used to invoke the constructor of the base class (",(0,r.jsx)(n.code,{children:"Animal"}),") and initialize the ",(0,r.jsx)(n.code,{children:"name"})," attribute."]}),"\n",(0,r.jsx)(n.h2,{id:"2-encapsulation",children:"2. Encapsulation"}),"\n",(0,r.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/dzmYoSzL8ok?si=MOqUZHwsTROOTQZW",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Involves bundling data and methods that operate on the data into a single unit known as a class."}),"\n",(0,r.jsx)(n.li,{children:"It helps in restricting access to certain components of the object and preventing unintended interference, providing data integrity and security."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"basic-encapsulation",children:"Basic Encapsulation"}),"\n",(0,r.jsx)(n.h4,{id:"creating-a-class-with-private-attributes",children:"Creating a Class with Private Attributes"}),"\n",(0,r.jsx)(n.p,{children:"Let's start by creating a class with private attributes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class BankAccount:\r\n    def __init__(self, account_number, balance):\r\n        self.__account_number = account_number  # Private attribute\r\n        self.__balance = balance                # Private attribute\r\n\r\n    def get_balance(self):\r\n        return self.__balance\r\n\r\n    def deposit(self, amount):\r\n        if amount > 0:\r\n            self.__balance += amount\r\n            print(f"Deposited ${amount}. New balance: ${self.__balance}")\r\n        else:\r\n            print("Invalid deposit amount.")\r\n\r\n    def withdraw(self, amount):\r\n        if 0 < amount <= self.__balance:\r\n            self.__balance -= amount\r\n            print(f"Withdrew ${amount}. New balance: ${self.__balance}")\r\n        else:\r\n            print("Invalid withdrawal amount.")\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, ",(0,r.jsx)(n.code,{children:"__account_number"})," and ",(0,r.jsx)(n.code,{children:"__balance"})," are private attributes."]}),"\n",(0,r.jsx)(n.h4,{id:"accessing-private-attributes",children:"Accessing Private Attributes"}),"\n",(0,r.jsx)(n.p,{children:"Now, let's use the class and access its methods:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Creating an instance of the class\r\naccount = BankAccount("123456", 1000)\r\n\r\n# Accessing a public method\r\ncurrent_balance = account.get_balance()\r\nprint(f"Current balance: ${current_balance}")\r\n\r\n# Accessing private attributes indirectly through methods\r\naccount.deposit(500)  # Output: Deposited $500. New balance: $1500\r\naccount.withdraw(200)  # Output: Withdrew $200. New balance: $1300\n'})}),"\n",(0,r.jsx)(n.p,{children:"In this example, private attributes are accessed and modified through public methods, providing encapsulation."}),"\n",(0,r.jsx)(n.h3,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(n.p,{children:"A property is a special feature that allows you to control access to the attributes or fields of a class."}),"\n",(0,r.jsx)(n.p,{children:"It provides a way to get, set, or delete the value of an attribute while allowing additional logic to be executed."}),"\n",(0,r.jsxs)(n.p,{children:["Consider the following example ",(0,r.jsx)(n.strong,{children:"without"})," using properties:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Dog:\r\n    def __init__(self):\r\n        self.__age = None\r\n\r\n    def get_age(self):\r\n        return self.__age\r\n\r\n    def set_age(self, age):\r\n        if age > 0:\r\n            self.__age = age\r\n\r\nobj = Dog()\r\nobj.set_age(15) # we run methods in this class\r\n\r\n# wouldn't it be easier if we could:\r\n# obj.age = 15 # but with all the checks?\n"})}),"\n",(0,r.jsx)(n.p,{children:"In the above code, you would need to call methods manually to set values for private variables. However, in Python, you can leverage properties with getters and setters to simplify this process."}),"\n",(0,r.jsx)(n.h3,{id:"getters--setters",children:"Getters & Setters"}),"\n",(0,r.jsx)(n.p,{children:"Getters and setters are methods used to control access to the attributes of a class, making them an essential part of encapsulation."}),"\n",(0,r.jsx)(n.p,{children:"They allow you to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"enforce read and write access restrictions,"}),"\n",(0,r.jsx)(n.li,{children:"apply validation logic,"}),"\n",(0,r.jsx)(n.li,{children:"and maintain the integrity of the class's data."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["In Python, you can use the ",(0,r.jsx)(n.code,{children:"@property"})," decorator for the getter method and the ",(0,r.jsx)(n.code,{children:"@<property_name>.setter"})," decorator for the setter method."]}),"\n",(0,r.jsx)(n.h3,{id:"getters",children:"Getters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The getter method is responsible for getting the value of a property."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["In Python, you can use the ",(0,r.jsx)(n.code,{children:"@property"})," decorator to define a method as a getter."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["It allows you to access the property using the syntax ",(0,r.jsx)(n.code,{children:"object.property"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Key Points:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"Encapsulation Aspect"}),": By using a getter method, you can provide controlled access to the value of an attribute without exposing the attribute directly."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"Data Protection"}),": Getter methods allow you to enforce read-only access or perform additional logic before returning the attribute value."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class MyClass:\r\n    def __init__(self):\r\n        self._my_property = 42  # A private attribute\r\n\r\n    @property\r\n    def my_property(self):\r\n        return self._my_property\r\n\r\nobj = MyClass()\r\nprint(obj.my_property)  # Accessing the property\n"})}),"\n",(0,r.jsx)(n.h3,{id:"setters",children:"Setters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The setter method is responsible for setting the value of a property."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["In Python, you can use the ",(0,r.jsx)(n.code,{children:"@<property_name>.setter"})," decorator to define a method as a setter."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["It allows you to modify the property using the syntax ",(0,r.jsx)(n.code,{children:"object.property = new_value"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Key Points"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"Encapsulation Aspect"}),": Setter methods allow you to control the modification of attribute values, adding a layer of abstraction to the internal workings of the class."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"Data Protection"}),": Setter methods enable you to validate incoming values, ensuring that only valid data is assigned to the attributes."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class MyClass:\r\n    def __init__(self):\r\n        self._my_property = 42  # A private attribute\r\n\r\n    @property\r\n    def my_property(self):\r\n        return self._my_property\r\n\r\n    @my_property.setter\r\n    def my_property(self, new_value):\r\n        if new_value >= 0:\r\n            self._my_property = new_value\r\n        else:\r\n            print("Invalid value. Must be non-negative.")\r\n\r\nobj = MyClass()\r\nobj.my_property = 99  # Modifying the property\n'})}),"\n",(0,r.jsx)(n.h2,{id:"3-abstraction",children:"3. Abstraction"}),"\n",(0,r.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/TeDlx2Klij0?si=92anMGNwvy8foCmS",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Involves simplifying complex systems by modeling classes based on essential features and hiding unnecessary details."}),"\n",(0,r.jsx)(n.li,{children:"It allows developers to focus on relevant aspects while hiding implementation complexities."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"abstract-classes-and-methods",children:"Abstract Classes and Methods"}),"\n",(0,r.jsx)(n.h3,{id:"creating-an-abstract-class",children:"Creating an Abstract Class"}),"\n",(0,r.jsx)(n.p,{children:"An abstract class in Python is a class that cannot be instantiated and is meant to be subclassed."}),"\n",(0,r.jsx)(n.p,{children:"It may contain abstract methods, which are declared but do not provide an implementation in the abstract class itself."}),"\n",(0,r.jsxs)(n.p,{children:["Abstract classes are created using the ",(0,r.jsx)(n.code,{children:"ABC"})," (Abstract Base Class) module."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from abc import ABC, abstractmethod\r\n\r\nclass Shape(ABC):\r\n    @abstractmethod\r\n    def area(self):\r\n        pass\r\n\r\n    @abstractmethod\r\n    def perimeter(self):\r\n        pass\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, ",(0,r.jsx)(n.code,{children:"Shape"})," is an abstract class with abstract methods ",(0,r.jsx)(n.code,{children:"area"})," and ",(0,r.jsx)(n.code,{children:"perimeter"}),". Any concrete class inheriting from ",(0,r.jsx)(n.code,{children:"Shape"})," must implement these methods."]}),"\n",(0,r.jsx)(n.h3,{id:"creating-concrete-classes",children:"Creating Concrete Classes"}),"\n",(0,r.jsx)(n.p,{children:"Concrete classes inherit from abstract classes and provide concrete implementations for abstract methods."}),"\n",(0,r.jsx)(n.p,{children:"Note: every abstraction method should be overridden"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Circle(Shape):\r\n    def __init__(self, radius):\r\n        self.radius = radius\r\n\r\n    def area(self):\r\n        return 3.14 * self.radius * self.radius\r\n\r\n    def perimeter(self):\r\n        return 2 * 3.14 * self.radius\r\n\r\nclass Rectangle(Shape):\r\n    def __init__(self, length, width):\r\n        self.length = length\r\n        self.width = width\r\n\r\n    def area(self):\r\n        return self.length * self.width\r\n\r\n    def perimeter(self):\r\n        return 2 * (self.length + self.width)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Here, ",(0,r.jsx)(n.code,{children:"Circle"})," and ",(0,r.jsx)(n.code,{children:"Rectangle"})," are concrete classes that inherit from the abstract class Shape and provide implementations for the ",(0,r.jsx)(n.code,{children:"area"})," and ",(0,r.jsx)(n.code,{children:"perimeter"})," methods."]}),"\n",(0,r.jsx)(n.h3,{id:"using-abstraction-in-code",children:"Using Abstraction in Code"}),"\n",(0,r.jsx)(n.p,{children:"Now, let's use the abstract classes and concrete implementations:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Creating instances of concrete classes\r\ncircle_instance = Circle(5)\r\nrectangle_instance = Rectangle(4, 6)\r\n\r\n# Accessing methods through abstraction\r\nprint("Circle Area:", circle_instance.area())         # Output: Circle Area: 78.5\r\nprint("Circle Perimeter:", circle_instance.perimeter()) # Output: Circle Perimeter: 31.400000000000002\r\n\r\nprint("Rectangle Area:", rectangle_instance.area())           # Output: Rectangle Area: 24\r\nprint("Rectangle Perimeter:", rectangle_instance.perimeter()) # Output: Rectangle Perimeter: 20\n'})}),"\n",(0,r.jsx)(n.p,{children:"By utilizing abstraction, we focus on the essential aspects of shapes (area and perimeter) without worrying about the specific implementation details of each shape."}),"\n",(0,r.jsx)(n.h2,{id:"4-polymorphism",children:"4. Polymorphism"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Allows objects of different classes to be treated as objects of a common base class."}),"\n",(0,r.jsx)(n.li,{children:"It enables flexibility and adaptability in code by providing a consistent interface for diverse objects."}),"\n",(0,r.jsx)(n.li,{children:"In Python, polymorphism is achieved through method overloading and method overriding."}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Polymorphism with Java"}),(0,r.jsxs)(n.p,{children:["In Java, polymorphism is achieved through method overloading, method overriding, and ",(0,r.jsx)(n.strong,{children:"interfaces"}),"."]}),(0,r.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/jhDUxynEQRI?si=4eVz2ObqAgtAIdp9",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),(0,r.jsx)(n.h4,{id:"1-method-overloading",children:"1. Method Overloading"}),(0,r.jsx)(n.h4,{id:"defining-multiple-methods-with-the-same-name",children:"Defining Multiple Methods with the Same Name"}),(0,r.jsx)(n.p,{children:"Method overloading in Java involves defining multiple methods in the same class with the same name but different parameter lists. The correct method is chosen at compile-time based on the method signature."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class MathOperations {\r\n    public int add(int x, int y) {\r\n        return x + y;\r\n    }\r\n\r\n    public double add(double x, double y) {\r\n        return x + y;\r\n    }\r\n}\n"})}),(0,r.jsxs)(n.p,{children:["In this example, the ",(0,r.jsx)(n.code,{children:"add"})," method is overloaded with two different parameter lists\u2014one for integers and another for doubles."]}),(0,r.jsx)(n.h4,{id:"using-method-overloading",children:"Using Method Overloading"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'MathOperations mathOps = new MathOperations();\r\n\r\nint resultInt = mathOps.add(3, 5);\r\nSystem.out.println("Result with integers: " + resultInt);  // Output: Result with integers: 8\r\n\r\ndouble resultDouble = mathOps.add(3.5, 2.5);\r\nSystem.out.println("Result with doubles: " + resultDouble);  // Output: Result with doubles: 6.0\n'})}),(0,r.jsxs)(n.p,{children:["The appropriate ",(0,r.jsx)(n.code,{children:"add"})," method is selected at compile-time based on the argument types, demonstrating polymorphic behavior."]}),(0,r.jsx)(n.h4,{id:"2-method-overriding",children:"2. Method Overriding"}),(0,r.jsx)(n.h4,{id:"redefining-methods-in-subclasses",children:"Redefining Methods in Subclasses"}),(0,r.jsx)(n.p,{children:"Method overriding in Java involves redefining a method in a subclass that is already defined in its superclass. The overridden method in the subclass provides a specific implementation."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class Animal {\r\n    public void speak() {\r\n        System.out.println("Animal makes a sound.");\r\n    }\r\n}\r\n\r\npublic class Dog extends Animal {\r\n    @Override\r\n    public void speak() {\r\n        System.out.println("Dog barks loudly!");\r\n    }\r\n}\r\n\r\npublic class Cat extends Animal {\r\n    @Override\r\n    public void speak() {\r\n        System.out.println("Cat meows softly!");\r\n    }\n'})}),(0,r.jsxs)(n.p,{children:["In this example, the ",(0,r.jsx)(n.code,{children:"speak"})," method is overridden in the ",(0,r.jsx)(n.code,{children:"Dog"})," and ",(0,r.jsx)(n.code,{children:"Cat"})," subclasses, providing specific implementations for each."]}),(0,r.jsx)(n.h4,{id:"using-method-overriding",children:"Using Method Overriding"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"Animal dog = new Dog();\r\nAnimal cat = new Cat();\r\n\r\ndog.speak();  // Output: Dog barks loudly!\r\ncat.speak();  // Output: Cat meows softly!\n"})}),(0,r.jsxs)(n.p,{children:["Here, the ",(0,r.jsx)(n.code,{children:"speak"})," method of the base class ",(0,r.jsx)(n.code,{children:"Animal"})," is overridden in the derived classes ",(0,r.jsx)(n.code,{children:"Dog"})," and ",(0,r.jsx)(n.code,{children:"Cat"}),", demonstrating polymorphic behavior based on the actual type of the objects."]}),(0,r.jsx)(n.h4,{id:"3-interfaces",children:"3. Interfaces"}),(0,r.jsx)(n.h4,{id:"defining-common-interfaces",children:"Defining Common Interfaces"}),(0,r.jsx)(n.p,{children:"Java interfaces provide a way to achieve polymorphism by defining common interfaces that classes can implement. This allows objects of different classes to be treated uniformly."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public interface Shape {\r\n    double area();\r\n    double perimeter();\r\n}\n"})}),(0,r.jsxs)(n.p,{children:["Here, the ",(0,r.jsx)(n.code,{children:"Shape"})," interface declares methods for calculating the area and perimeter."]}),(0,r.jsx)(n.h4,{id:"implementing-interfaces",children:"Implementing Interfaces"}),(0,r.jsx)(n.p,{children:"Classes can implement the interface, providing concrete implementations for the declared methods."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class Circle implements Shape {\r\n    private double radius;\r\n\r\n    public Circle(double radius) {\r\n        this.radius = radius;\r\n    }\r\n\r\n    @Override\r\n    public double area() {\r\n        return Math.PI * radius * radius;\r\n    }\r\n\r\n    @Override\r\n    public double perimeter() {\r\n        return 2 * Math.PI * radius;\r\n    }\r\n}\n"})}),(0,r.jsxs)(n.p,{children:["In this example, the ",(0,r.jsx)(n.code,{children:"Circle"})," class implements the ",(0,r.jsx)(n.code,{children:"Shape"})," interface, providing specific implementations for the ",(0,r.jsx)(n.code,{children:"area"})," and ",(0,r.jsx)(n.code,{children:"perimeter"})," methods."]}),(0,r.jsx)(n.h4,{id:"using-interfaces-for-polymorphism",children:"Using Interfaces for Polymorphism"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'Shape circle = new Circle(5.0);\r\n\r\nSystem.out.println("Circle Area: " + circle.area());        // Output: Circle Area: 78.53981633974483\r\nSystem.out.println("Circle Perimeter: " + circle.perimeter());// Output: Circle Perimeter: 31.41592653589793\n'})}),(0,r.jsxs)(n.p,{children:["By treating a ",(0,r.jsx)(n.code,{children:"Circle"})," object as a ",(0,r.jsx)(n.code,{children:"Shape"})," object, we achieve polymorphism through interface implementation."]})]}),"\n",(0,r.jsx)(n.h3,{id:"method-overloading",children:"Method Overloading"}),"\n",(0,r.jsx)(n.h4,{id:"defining-multiple-methods-with-the-same-name-1",children:"Defining Multiple Methods with the Same Name"}),"\n",(0,r.jsx)(n.p,{children:"This involves defining multiple methods with the same name in a class, but with different parameter lists. The appropriate method is selected at runtime based on the number or types of arguments passed."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class MathOperations:\r\n    def add(self, x, y):\r\n        return x + y\r\n\r\n    def add(self, x, y, z):\r\n        return x + y + z\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, the ",(0,r.jsx)(n.code,{children:"add"})," method is overloaded with two different parameter lists. The correct version of the method is chosen based on the number of arguments provided."]}),"\n",(0,r.jsx)(n.h4,{id:"using-method-overloading-1",children:"Using Method Overloading"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'math_ops = MathOperations()\r\n\r\nresult_2_args = math_ops.add(3, 5)\r\nprint("Result with 2 args:", result_2_args)  # Output: Result with 2 args: 8\r\n\r\nresult_3_args = math_ops.add(3, 5, 7)\r\nprint("Result with 3 args:", result_3_args)  # Output: Result with 3 args: 15\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In this usage, the appropriate ",(0,r.jsx)(n.code,{children:"add"})," method is invoked based on the number of arguments provided."]}),"\n",(0,r.jsx)(n.h3,{id:"method-overriding-1",children:"Method Overriding"}),"\n",(0,r.jsx)(n.h4,{id:"redefining-methods-in-subclasses-1",children:"Redefining Methods in Subclasses"}),"\n",(0,r.jsx)(n.p,{children:"Method overriding involves redefining a method in a subclass that is already defined in its superclass. The overridden method provides a specific implementation in the subclass."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Animal:\r\n    def speak(self):\r\n        print("Animal makes a sound.")\r\n\r\nclass Dog(Animal):\r\n    def speak(self):\r\n        print("Dog barks loudly!")\r\n\r\nclass Cat(Animal):\r\n    def speak(self):\r\n        print("Cat meows softly!")\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, the ",(0,r.jsx)(n.code,{children:"speak"})," method is overridden in the Dog and Cat subclasses, providing specific implementations for each."]}),"\n",(0,r.jsx)(n.h4,{id:"using-method-overriding-1",children:"Using Method Overriding"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"dog_instance = Dog()\r\ncat_instance = Cat()\r\n\r\ndog_instance.speak()  # Output: Dog barks loudly!\r\ncat_instance.speak()  # Output: Cat meows softly!\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Here, the ",(0,r.jsx)(n.code,{children:"speak"})," method of the base class ",(0,r.jsx)(n.code,{children:"Animal"})," is overridden in the derived classes ",(0,r.jsx)(n.code,{children:"Dog"})," and ",(0,r.jsx)(n.code,{children:"Cat"}),", allowing for polymorphic behavior based on the object's actual type."]}),"\n",(0,r.jsxs)(n.h2,{id:"more-about-super",children:["More about ",(0,r.jsx)(n.code,{children:"super()"})]}),"\n",(0,r.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/MBbVq_FIYDA?si=ZflR8G3wBnBx6llw",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"You can use the super() function to call a method in the parent class, even if the child class has overridden that method."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Parent:\r\n    def speak(self):\r\n        print("Parent class speaks.")\r\n\r\nclass Child(Parent):\r\n    def speak(self):\r\n        # Calling the speak method of the parent class using super()\r\n        super().speak()\r\n        print("Child class speaks too.")\r\n\r\n# Creating an instance of the child class\r\nchild_instance = Child()\r\n\r\n# Calling the speak method of the child class\r\nchild_instance.speak()\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, the ",(0,r.jsx)(n.code,{children:"Child"})," class inherits from the ",(0,r.jsx)(n.code,{children:"Parent"})," class, and both classes have a method named ",(0,r.jsx)(n.code,{children:"speak"}),". Inside the speak method of the ",(0,r.jsx)(n.code,{children:"Child"})," class, ",(0,r.jsx)(n.code,{children:"super().speak()"})," is used to invoke the ",(0,r.jsx)(n.code,{children:"speak"})," method of the parent class."]}),"\n",(0,r.jsx)(n.p,{children:"When you run this code, the output will be:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Parent class speaks.\r\nChild class speaks too.\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This demonstrates how ",(0,r.jsx)(n.code,{children:"super()"})," can be used to call the method in the parent class, allowing you to extend or override functionality while still utilizing the behavior from the parent class."]})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},6213:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>a});var r=s(959);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);