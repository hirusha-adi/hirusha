"use strict";(self.webpackChunkhirusha=self.webpackChunkhirusha||[]).push([[1687],{79895:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>c,toc:()=>d});var r=i(11527),s=i(56213);const t={title:"Exam Style Questions - Declarative programming",sidebar_label:"ESQ",slug:"esq",sidebar_position:2},a=void 0,c={id:"study/cie_al/computer_science/paper_4/my_study_notes/chapter_29/esq",title:"Exam Style Questions - Declarative programming",description:"Question 1",source:"@site/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_29/esq.md",sourceDirName:"study/cie_al/computer_science/paper_4/my_study_notes/chapter_29",slug:"/study/cie_al/computer_science/paper_4/my_study_notes/chapter_29/esq",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_29/esq",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Exam Style Questions - Declarative programming",sidebar_label:"ESQ",slug:"esq",sidebar_position:2},sidebar:"study",previous:{title:"Notes",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_29/notes"},next:{title:"Setup Prolog",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_29/initial_setup"}},l={},d=[{value:"Question 1",id:"question-1",level:2},{value:"Question 2",id:"question-2",level:2}];function o(e){const n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"question-1",children:"Question 1"}),"\n",(0,r.jsx)(n.p,{children:"A logic programming language is used to represent, as a set of facts and rules, details of cities of the world. The set of facts and rules are shown below in clauses labelled 1 to 17."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-prolog",children:"01 capital(vienna).\r\n02 capital(london).\r\n03 capital(santiago).\r\n04 capital(caracas).\r\n05 capital(tokyo).\r\n06 cityIn(vienna, austria).\r\n07 cityIn(santiago, chile).\r\n08 cityIn(salzburg, austria).\r\n09 cityIn(maracaibo, venezuela).\r\n10 continent(austria, europe).\r\n11 continent(chile, southAmerica).\r\n12 continent(uk, europe).\r\n13 continent(argentina, southAmerica).\r\n14 iVisited(vienna).\r\n15 iVisited(tokyo).\r\n16 capitalOf(City, Country)\r\n    IF capital(City) AND cityIn(City, Country).\r\n17 europeanCity(City)\r\n    IF cityIn(City, Country) AND continent(Country, europe).\n"})}),"\n",(0,r.jsx)(n.p,{children:"These clauses have the following meanings:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Clause"}),(0,r.jsx)(n.th,{children:"Meaning"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"01"}),(0,r.jsx)(n.td,{children:"Vienna is a capital."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"06"}),(0,r.jsx)(n.td,{children:"Vienna is in Austria."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"10"}),(0,r.jsx)(n.td,{children:"Austria is in the continent of Europe."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"14"}),(0,r.jsx)(n.td,{children:"I visited the city of Vienna."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"16"}),(0,r.jsxs)(n.td,{children:["City is the capital of Country if ",(0,r.jsx)("br",{})," City is a capital and it is in Country."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"17"}),(0,r.jsx)(n.td,{children:"City is a city in Europe if City is in Country and Country is in Europe."})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"a) Write down the extra clauses needed to express the following facts:"}),"\n",(0,r.jsx)(n.p,{children:"i)London is in the UK."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-prolog",children:"cityIn(london, uk).\n"})}),"\n",(0,r.jsx)(n.p,{children:"ii) I visited the city of Strasbourg."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-prolog",children:"iVisited(strasbourg).\n"})}),"\n",(0,r.jsxs)(n.p,{children:["b) The clause cityIn(City, austria) would return the result: vienna, salzburg. Write down the result returned by the clause: ",(0,r.jsx)(n.code,{children:"continent(Country, southAmerica)."})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-prolog",children:"Country = chile ; \r\nCountry = argentina.\n"})}),"\n",(0,r.jsxs)(n.p,{children:["c) Complete the rule to list countries that I have visited ",(0,r.jsx)(n.code,{children:"countriesIVisited(Country) IF ..."})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-prolog",children:"countriesIVisited(Country) :- iVisited(City), cityIn(City, Country).\n"})}),"\n",(0,r.jsx)(n.h2,{id:"question-2",children:"Question 2"}),"\n",(0,r.jsx)(n.p,{children:"In a particular country, to become a qualified driver you must:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"have a licence: there is a minimum age at which a person can be issued with a licence and it is different for cars and trucks"}),"\n",(0,r.jsx)(n.li,{children:"pass a theory test: it is the same test for cars and trucks"}),"\n",(0,r.jsx)(n.li,{children:"pass a driving test for a specific vehicle (car or truck)."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"A declarative programming language is to be used to represent the knowledge base shown below:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-prolog",children:"01 minimumAge(car, 18).\r\n02 minimumAge(truck, 21).\r\n03 age(fred, 19).\r\n04 age(jack, 22).\r\n05 age(mike, 17).\r\n06 age(jhon, 20).\r\n07 age(emma, 22).\r\n08 age(sheena, 19).\r\n09 hasLicence(fred).\r\n10 hasLicence(jack).\r\n11 hasLicence(mike).\r\n12 hasLicence(jhon).\r\n13 hasLicence(emma).\r\n14 hasLicence(sheena).\r\n15 allowedToDrive(X, V)\r\n    IF hasLicence(X) AND minimumAge(V, L)\r\n        AND age(X, A)\r\n        AND A >= L.\r\n16 passedTheoryTest(jack).\r\n17 passedTheoryTest(emma).\r\n18 passedTheoryTest(jhon).\r\n19 passedTheoryTest(fred).\r\n20 passedDrivingTest(jhon, car).\r\n21 passedDrivingTest(fred, car).\r\n22 passedDrivingTest(jack, car).\r\n23 passedDrivingTest(jack, truck).\r\n24 passedDrivingTest(sheena, car).\r\n25 qualifiedDriver(X, V)\r\n    IF allowedToDrive(X, V)\r\n        AND passedTheoryTest(X)\r\n        AND passedDrivingTest(X, V).\n"})}),"\n",(0,r.jsx)(n.p,{children:"These clauses have the following meanings:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Clause"}),(0,r.jsx)(n.th,{children:"Meaning"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"01"}),(0,r.jsx)(n.td,{children:"The minimum age for a car licence is 18."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"03"}),(0,r.jsx)(n.td,{children:"Fred is aged 19."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"09"}),(0,r.jsx)(n.td,{children:"Fred has a licence."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"15"}),(0,r.jsx)(n.td,{children:"Person X is able to drive vehicle V if person X has a licence and the age A of person X is greater than or equal to the minimum age L to drive vehicle V."})]})]})]}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:"Runnable code"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-prolog",children:"minimumAge(car, 18).\r\nminimumAge(truck, 21).\r\nage(fred, 19).\r\nage(jack, 22).\r\nage(mike, 17).\r\nage(jhon, 20).\r\nage(emma, 22).\r\nage(sheena, 19).\r\nhasLicence(fred).\r\nhasLicence(jack).\r\nhasLicence(mike).\r\nhasLicence(jhon).\r\nhasLicence(emma).\r\nhasLicence(sheena).\r\nallowedToDrive(X, V):- \r\n        hasLicence(X),\r\n        minimumAge(V, L),\r\n        age(X, A),\r\n        A >= L.\r\npassedTheoryTest(jack).\r\npassedTheoryTest(emma).\r\npassedTheoryTest(jhon).\r\npassedTheoryTest(fred).\r\npassedDrivingTest(jhon, car).\r\npassedDrivingTest(fred, car).\r\npassedDrivingTest(jack, car).\r\npassedDrivingTest(jack, truck).\r\npassedDrivingTest(sheena, car).\r\nqualifiedDriver(X, V):- allowedToDrive(X, V),\r\n        passedTheoryTest(X),\r\n        passedDrivingTest(X, V).\n"})})]}),"\n",(0,r.jsx)(n.p,{children:"a)"}),"\n",(0,r.jsx)(n.p,{children:"i) Give one example of a fact in this knowledge base."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"age(fred, 19)."})," - This states the fact that Fred is aged 19."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"ii) Give one example of a rule in this knowledge base."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"qualifiedDriver(X, V) IF allowedToDrive(X, V) AND passedTheoryTest(X) AND passedDrivingTest(X, V)."})," - This is a rule that defines a qualified driver. It states that a person X is a qualified driver of vehicle V if they are allowed to drive that vehicle, have passed the theory test, and have passed the driving test for that vehicle."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"b) State the output produced from these clauses:"}),"\n",(0,r.jsx)(n.p,{children:"i) passedDrivingTest(Who, truck)."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"This will output all individuals (Who) who have passed the driving test for a truck."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-prolog",children:"?- passedDrivingTest(Who, truck).\r\nWho = jack.\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"ii) allowedToDrive(mike, car)."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"This will output true if Mike is allowed to drive a car according to the knowledge base, based on having a license and meeting the minimum age requirement for driving a car."}),"\n",(0,r.jsx)(n.p,{children:"``prolog\r\n?- allowedToDrive(mike, car).\r\nfalse."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"iii) NOT(hasLicence(sheena))."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"This will output true if Sheena does not have a license according to the knowledge base."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-prolog",children:"?- hasLicence(sheena).\r\ntrue.\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"c) Write a clause to output:"}),"\n",(0,r.jsx)(n.p,{children:"i) all qualified car drivers."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-prolog",children:"qualifiedCarDriver(X) :-\r\n   qualifiedDriver(X, car).\n"})}),"\n",(0,r.jsx)(n.p,{children:"ii) all drivers who have passed the theory test but not a driving test."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-prolog",children:"passedTheoryButNotDriving(X) :-\r\n   passedTheoryTest(X),\r\n   NOT(passedDrivingTest(X, _)).\n"})}),"\n",(0,r.jsxs)(n.p,{children:["d) To produce the output from a clause, the inference engine uses a process called backtracking Consider the clause: ",(0,r.jsx)(n.code,{children:"allowedToDrive(mike, car)."})," Identify the order in which clauses are used to produce the output. For each clause, describe the result that it returns."]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The clause ",(0,r.jsx)(n.code,{children:"allowedToDrive(X, V)"})," is used, where X = mike and V = car. It checks if Mike has a license and if his age is greater than or equal to the minimum age to drive a car. If both conditions are met, it returns true."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The clause ",(0,r.jsx)(n.code,{children:"hasLicence(mike)"})," is used to check if Mike has a license. If this is true, it proceeds to the next step."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The clause ",(0,r.jsx)(n.code,{children:"minimumAge(car, L)"})," is used to determine the minimum age to drive a car. If Mike's age is greater than or equal to this minimum age (which is 18), it returns true."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"So, if Mike is aged 17 (as per the provided knowledge base), the output would be false since he does not meet the minimum age requirement to drive a car."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-prolog",children:"[trace]  ?- allowedToDrive(mike, car).\r\n   Call: (10) allowedToDrive(mike, car) ? creep\r\n   Call: (11) hasLicence(mike) ? creep\r\n   Exit: (11) hasLicence(mike) ? creep\r\n   Call: (11) minimumAge(car, _22812) ? creep\r\n   Exit: (11) minimumAge(car, 18) ? creep\r\n   Call: (11) age(mike, _24322) ? creep\r\n   Exit: (11) age(mike, 17) ? creep\r\n   Call: (11) 17>=18 ? creep\r\n   Fail: (11) 17>=18 ? creep\r\n   Fail: (10) allowedToDrive(mike, car) ? creep\r\nfalse.\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},56213:(e,n,i)=>{i.d(n,{Z:()=>c,a:()=>a});var r=i(50959);const s={},t=r.createContext(s);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);