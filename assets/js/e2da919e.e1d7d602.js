"use strict";(self.webpackChunkhirusha=self.webpackChunkhirusha||[]).push([[8829],{6694:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=t(1527),i=t(6213);const a={title:"Exam Style Questions - Algorithms",sidebar_label:"ESQ",slug:"esq",sidebar_position:2},o=void 0,s={id:"study/cie_al/computer_science/paper_4/my_study_notes/chapter_23/esq",title:"Exam Style Questions - Algorithms",description:"Question 1",source:"@site/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_23/esq.md",sourceDirName:"study/cie_al/computer_science/paper_4/my_study_notes/chapter_23",slug:"/study/cie_al/computer_science/paper_4/my_study_notes/chapter_23/esq",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_23/esq",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Exam Style Questions - Algorithms",sidebar_label:"ESQ",slug:"esq",sidebar_position:2},sidebar:"study",previous:{title:"Notes",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_23/notes"},next:{title:"Chapter 24 - Recursion",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_24/"}},d={},l=[{value:"Question 1",id:"question-1",level:2},{value:"a) Complete the algorithm for a binary search function FindName. The data being searched is stored in the array <code>Names[0 : 50]</code>. The name to be searched for is passed as a parameter.",id:"a-complete-the-algorithm-for-a-binary-search-function-findname-the-data-being-searched-is-stored-in-the-array-names0--50-the-name-to-be-searched-for-is-passed-as-a-parameter",level:4},{value:"b) The binary search does not work if the data in the array being searched is \u2026\u2026\u2026\u2026\u2026\u2026",id:"b-the-binary-search-does-not-work-if-the-data-in-the-array-being-searched-is-",level:4},{value:"c) State the return value of the function FindName return when:",id:"c-state-the-return-value-of-the-function-findname-return-when",level:4},{value:"i the name searched for exists in the array.",id:"i-the-name-searched-for-exists-in-the-array",level:4},{value:"ii the name searched for does not exist in the array.",id:"ii-the-name-searched-for-does-not-exist-in-the-array",level:4},{value:"Question 2",id:"question-2",level:2},{value:"2) A queue Abstract Data Type (ADT) is to be implemented as a linked list of nodes. Each node is a record, consisting of a data field and a pointer field. The queue ADT also has a FrontOfQueue pointer and an EndOfQueue pointer associated with it. The possible queue operations are: JoinQueue and LeaveQueue.",id:"2-a-queue-abstract-data-type-adt-is-to-be-implemented-as-a-linked-list-of-nodes-each-node-is-a-record-consisting-of-a-data-field-and-a-pointer-field-the-queue-adt-also-has-a-frontofqueue-pointer-and-an-endofqueue-pointer-associated-with-it-the-possible-queue-operations-are-joinqueue-and-leavequeue",level:4},{value:"a) i Write labels on the diagram to show the state of the queue after three data items have been added to the queue in the given order: Apple, Pear, Banana.",id:"a-i-write-labels-on-the-diagram-to-show-the-state-of-the-queue-after-three-data-items-have-been-added-to-the-queue-in-the-given-order-apple-pear-banana",level:4},{value:"ii Write labels on the diagram to show how the unused nodes are linked to form a list of free nodes. This list has a StartOfFreeList pointer associated with it",id:"ii-write-labels-on-the-diagram-to-show-how-the-unused-nodes-are-linked-to-form-a-list-of-free-nodes-this-list-has-a-startoffreelist-pointer-associated-with-it",level:4},{value:"b) i Write program code to declare the record type Node",id:"b-i-write-program-code-to-declare-the-record-type-node",level:4},{value:"ii Write program code to create an array Queue with 50 records of type Node. Your solution should link all nodes and initialise the pointers FrontOfQueue, EndOfQueue and StartOfFreeList.",id:"ii-write-program-code-to-create-an-array-queue-with-50-records-of-type-node-your-solution-should-link-all-nodes-and-initialise-the-pointers-frontofqueue-endofqueue-and-startoffreelist",level:4},{value:"c) The pseudocode algorithm for the queue operation JoinQueue is written as a procedure with the header: <code>PROCEDURE JoinQueue(NewItem)</code> where NewItem is the new value to be added to the queue. The procedure uses the variables shown in the following identifier table:",id:"c-the-pseudocode-algorithm-for-the-queue-operation-joinqueue-is-written-as-a-procedure-with-the-header-procedure-joinqueuenewitem-where-newitem-is-the-new-value-to-be-added-to-the-queue-the-procedure-uses-the-variables-shown-in-the-following-identifier-table",level:4},{value:"i Complete the identifier table.",id:"i-complete-the-identifier-table",level:4},{value:"ii Complete the pseudocode using the identifiers from the table in part (c) (i)",id:"ii-complete-the-pseudocode-using-the-identifiers-from-the-table-in-part-c-i",level:4},{value:"Question 3",id:"question-3",level:2},{value:"A program is required that sorts a list of words into alphabetical order. The list of words is supplied as a text file",id:"a-program-is-required-that-sorts-a-list-of-words-into-alphabetical-order-the-list-of-words-is-supplied-as-a-text-file",level:4},{value:"a) Write a program to declare a string array, WordList, that can hold 500 elements. Initialise the array so all elements contain the empty string.",id:"a-write-a-program-to-declare-a-string-array-wordlist-that-can-hold-500-elements-initialise-the-array-so-all-elements-contain-the-empty-string",level:4},{value:"b) Write a procedure, OutputList, to output all elements in index order.",id:"b-write-a-procedure-outputlist-to-output-all-elements-in-index-order",level:4},{value:"c) Write a procedure, LoadWords, that asks the user for a filename and reads the contents of the text file, storing each line of text (word) in a separate array element. The procedure should output a relevant error message if: - the file doesn\u2019t exist - the array is full.",id:"c-write-a-procedure-loadwords-that-asks-the-user-for-a-filename-and-reads-the-contents-of-the-text-file-storing-each-line-of-text-word-in-a-separate-array-element-the-procedure-should-output-a-relevant-error-message-if---the-file-doesnt-exist---the-array-is-full",level:4},{value:"d) Write a procedure, SortWords, to perform a bubble sort on all non-empty array elements, so that the words are in alphabetical order.",id:"d-write-a-procedure-sortwords-to-perform-a-bubble-sort-on-all-non-empty-array-elements-so-that-the-words-are-in-alphabetical-order",level:4},{value:"e) Write program code to call LoadWords, then OutputList, followed by SortWords and then OutputList again.",id:"e-write-program-code-to-call-loadwords-then-outputlist-followed-by-sortwords-and-then-outputlist-again",level:4},{value:"f) Test your program by running it first with a non-existing file, and then with a text file ontaining 20 words in random order. Take screenshots of your test runs that show your code works correctly.",id:"f-test-your-program-by-running-it-first-with-a-non-existing-file-and-then-with-a-text-file-ontaining-20-words-in-random-order-take-screenshots-of-your-test-runs-that-show-your-code-works-correctly",level:4}];function u(e){const r={code:"code",h2:"h2",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components},{Details:t}=r;return t||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h2,{id:"question-1",children:"Question 1"}),"\n",(0,n.jsxs)(r.h4,{id:"a-complete-the-algorithm-for-a-binary-search-function-findname-the-data-being-searched-is-stored-in-the-array-names0--50-the-name-to-be-searched-for-is-passed-as-a-parameter",children:["a) Complete the algorithm for a binary search function FindName. The data being searched is stored in the array ",(0,n.jsx)(r.code,{children:"Names[0 : 50]"}),". The name to be searched for is passed as a parameter."]}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.img,{src:"https://cdn.discordapp.com/attachments/1163847683207856178/1187213911783649460/image.png",alt:"i1"})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"FUNCTION FindName(s : STRING) RETURNS INTEGER\r\n    Index \u2190 -1\r\n    First \u2190 0\r\n    Last \u2190 50\r\n\r\n    WHILE (Last >= First) AND (Index = -1) DO\r\n        Middle \u2190 (First + Last) DIV 2\r\n\r\n        IF Names[Middle] = s THEN\r\n            Index \u2190 Middle\r\n        ELSE\r\n            IF Names[Middle] > s THEN\r\n                Last \u2190 Middle - 1\r\n            ELSE\r\n                First \u2190 Middle + 1\r\n            ENDIF\r\n        ENDIF\r\n    ENDWHILE\r\n\r\n    RETURN Index\r\nENDFUNCTION\n"})}),"\n",(0,n.jsx)(r.h4,{id:"b-the-binary-search-does-not-work-if-the-data-in-the-array-being-searched-is-",children:"b) The binary search does not work if the data in the array being searched is \u2026\u2026\u2026\u2026\u2026\u2026"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"not sorted."}),"\n"]}),"\n",(0,n.jsx)(r.h4,{id:"c-state-the-return-value-of-the-function-findname-return-when",children:"c) State the return value of the function FindName return when:"}),"\n",(0,n.jsx)(r.h4,{id:"i-the-name-searched-for-exists-in-the-array",children:"i the name searched for exists in the array."}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"will return the index of that name in the array."}),"\n"]}),"\n",(0,n.jsx)(r.h4,{id:"ii-the-name-searched-for-does-not-exist-in-the-array",children:"ii the name searched for does not exist in the array."}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"will return -1 to indicate that the name is not found in the array."}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"question-2",children:"Question 2"}),"\n",(0,n.jsx)(r.h4,{id:"2-a-queue-abstract-data-type-adt-is-to-be-implemented-as-a-linked-list-of-nodes-each-node-is-a-record-consisting-of-a-data-field-and-a-pointer-field-the-queue-adt-also-has-a-frontofqueue-pointer-and-an-endofqueue-pointer-associated-with-it-the-possible-queue-operations-are-joinqueue-and-leavequeue",children:"2) A queue Abstract Data Type (ADT) is to be implemented as a linked list of nodes. Each node is a record, consisting of a data field and a pointer field. The queue ADT also has a FrontOfQueue pointer and an EndOfQueue pointer associated with it. The possible queue operations are: JoinQueue and LeaveQueue."}),"\n",(0,n.jsx)(r.h4,{id:"a-i-write-labels-on-the-diagram-to-show-the-state-of-the-queue-after-three-data-items-have-been-added-to-the-queue-in-the-given-order-apple-pear-banana",children:"a) i Write labels on the diagram to show the state of the queue after three data items have been added to the queue in the given order: Apple, Pear, Banana."}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"lets assume you have a node structure like this:"}),"\n"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"Node:\r\n  - Data\r\n  - Next (pointer to the next node)\n"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:"at the start, the FrontOfQueue and EndOfQueue pointers are set to null because the queue is empty."}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:'After adding "Apple"'}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"FrontOfQueue -> [Apple] <- EndOfQueue\n"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:'After adding "Pear"'}),"\n"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"FrontOfQueue -> [Apple] -> [Pear] <- EndOfQueue\n"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:'After adding "Banana"'}),"\n"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"FrontOfQueue -> [Apple] -> [Pear] -> [Banana] <- EndOfQueue\n"})}),"\n",(0,n.jsx)(r.h4,{id:"ii-write-labels-on-the-diagram-to-show-how-the-unused-nodes-are-linked-to-form-a-list-of-free-nodes-this-list-has-a-startoffreelist-pointer-associated-with-it",children:"ii Write labels on the diagram to show how the unused nodes are linked to form a list of free nodes. This list has a StartOfFreeList pointer associated with it"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"after the initial setup"}),"\n"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"FrontOfQueue -> null\r\nEndOfQueue   -> null\r\n\r\nStartOfFreeList -> [Apple] -> [Pear] -> [Banana] -> null\n"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:'after adding "Apple" to the queue'}),"\n"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"FrontOfQueue -> [Apple]\r\nEndOfQueue   -> [Apple]\r\n\r\nStartOfFreeList -> [Pear] -> [Banana] -> null\n"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:'after adding "Pear" to the queue'}),"\n"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"FrontOfQueue -> [Apple] -> [Pear]\r\nEndOfQueue   -> [Pear]\r\n\r\nStartOfFreeList -> [Banana] -> null\n"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:'after adding "Banana" to the queue'}),"\n"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"FrontOfQueue -> [Apple] -> [Pear] -> [Banana]\r\nEndOfQueue   -> [Banana]\r\n\r\nStartOfFreeList -> null\n"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:'the EndOfQueue points to the node containing "Banana".'}),"\n",(0,n.jsx)(r.li,{children:"all nodes are in use, and the free list is empty."}),"\n"]}),"\n",(0,n.jsx)(r.h4,{id:"b-i-write-program-code-to-declare-the-record-type-node",children:"b) i Write program code to declare the record type Node"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"class Node:\r\n    def __init__(self, data=None):\r\n        self.data = data\r\n        self.next = None\n"})}),"\n",(0,n.jsx)(r.h4,{id:"ii-write-program-code-to-create-an-array-queue-with-50-records-of-type-node-your-solution-should-link-all-nodes-and-initialise-the-pointers-frontofqueue-endofqueue-and-startoffreelist",children:"ii Write program code to create an array Queue with 50 records of type Node. Your solution should link all nodes and initialise the pointers FrontOfQueue, EndOfQueue and StartOfFreeList."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'class Node:\r\n    def __init__(self, data=None):\r\n        self.data = data\r\n        self.next = None\r\n\r\n# Initialize an array Queue with 50 records of type Node\r\nQueue = [Node() for _ in range(50)]\r\n\r\n# Link all nodes in the array\r\nfor i in range(len(Queue) - 1):\r\n    Queue[i].next = Queue[i + 1]\r\n\r\n# Initialize pointers\r\nFrontOfQueue = None\r\nEndOfQueue = None\r\n\r\n# Set FrontOfQueue and EndOfQueue to the first node\r\nFrontOfQueue = Queue[0] if Queue else None\r\nEndOfQueue = Queue[-1] if Queue else None\r\n\r\n# Initialize the StartOfFreeList pointer\r\nStartOfFreeList = Queue[0] if Queue else None\r\n\r\n# Print the state of pointers for demonstration\r\nprint("FrontOfQueue:", FrontOfQueue.data if FrontOfQueue else None)\r\nprint("EndOfQueue:", EndOfQueue.data if EndOfQueue else None)\r\nprint("StartOfFreeList:", StartOfFreeList.data if StartOfFreeList else None)\n'})}),"\n",(0,n.jsxs)(r.h4,{id:"c-the-pseudocode-algorithm-for-the-queue-operation-joinqueue-is-written-as-a-procedure-with-the-header-procedure-joinqueuenewitem-where-newitem-is-the-new-value-to-be-added-to-the-queue-the-procedure-uses-the-variables-shown-in-the-following-identifier-table",children:["c) The pseudocode algorithm for the queue operation JoinQueue is written as a procedure with the header: ",(0,n.jsx)(r.code,{children:"PROCEDURE JoinQueue(NewItem)"})," where NewItem is the new value to be added to the queue. The procedure uses the variables shown in the following identifier table:"]}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.img,{src:"https://cdn.discordapp.com/attachments/1163847683207856178/1187217297186758706/image.png",alt:"a1"})}),"\n",(0,n.jsx)(r.h4,{id:"i-complete-the-identifier-table",children:"i Complete the identifier table."}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Identifier"}),(0,n.jsx)(r.th,{children:"Data Type"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"NullPointer"}),(0,n.jsx)(r.td,{children:"INTEGER"}),(0,n.jsx)(r.td,{children:"Constant set to -1"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"QueueArray"}),(0,n.jsx)(r.td,{children:"ARRAY"}),(0,n.jsx)(r.td,{children:"Array to store queue data"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"NewItem"}),(0,n.jsx)(r.td,{children:"STRING"}),(0,n.jsx)(r.td,{children:"Value to be added"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"FreeNodePointer"}),(0,n.jsx)(r.td,{children:"INTEGER"}),(0,n.jsx)(r.td,{children:"Pointer to next free node in array"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"FrontOfQueue"}),(0,n.jsx)(r.td,{children:"POINTER"}),(0,n.jsx)(r.td,{children:"Pointer to the first node in queue"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"EndOfQueue"}),(0,n.jsx)(r.td,{children:"POINTER"}),(0,n.jsx)(r.td,{children:"Pointer to the last node in queue"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"NodeToAdd"}),(0,n.jsx)(r.td,{children:"POINTER"}),(0,n.jsx)(r.td,{children:"Pointer to the node to be added"})]})]})]}),"\n",(0,n.jsx)(r.h4,{id:"ii-complete-the-pseudocode-using-the-identifiers-from-the-table-in-part-c-i",children:"ii Complete the pseudocode using the identifiers from the table in part (c) (i)"}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.img,{src:"https://cdn.discordapp.com/attachments/1163847683207856178/1187217991574753330/image.png",alt:"b1"}),"\r\n",(0,n.jsx)(r.img,{src:"https://cdn.discordapp.com/attachments/1163847683207856178/1187218056942977095/image.png",alt:"b2"})]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"PROCEDURE JoinQueue(NewItem : STRING)\r\n// Report error if no free nodes remaining\r\nIF StartOfFreeList = NullPointer\r\nTHEN\r\n    Report Error\r\nELSE\r\n    // new data item placed in node at start of free list\r\n    NewNodePointer \u2190 StartOfFreeList\r\n    Queue[NewNodePointer].Data \u2190 NewItem\r\n    // adjust free list pointer\r\n    StartOfFreeList \u2190 Queue[NewNodePointer].Pointer\r\n    Queue[NewNodePointer].Pointer \u2190 NullPointer\r\n    // if the first item in the queue then adjust front of queue pointer\r\n    IF FrontOfQueue = NullPointer\r\n    THEN\r\n        FrontOfQueue \u2190 NewNodePointer\r\n    ENDIF\r\n    // new node is the new end of queue\r\n    Queue[NewNodePointer].Pointer \u2190 NullPointer\r\n    IF EndOfQueue = NullPointer\r\n    THEN\r\n        EndOfQueue \u2190 NewNodePointer\r\n    ELSE\r\n        Queue[EndOfQueue].Pointer \u2190 NewNodePointer\r\n        EndOfQueue \u2190 NewNodePointer\r\n    ENDIF\r\nENDIF\r\nENDPROCEDURE\n"})}),"\n",(0,n.jsxs)(t,{children:[(0,n.jsx)("summary",{children:"Alternative python code"}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'class Node:\r\n    def __init__(self, data=None):\r\n        self.data = data\r\n        self.pointer = None\r\n\r\nclass Queue:\r\ndef **init**(self):\r\nself.QueueArray = [Node() for _ in range(50)]\r\nself.StartOfFreeList = 0\r\nself.FrontOfQueue = None\r\nself.EndOfQueue = None\r\n\r\n    def JoinQueue(self, NewItem):\r\n        # Report error if no free nodes remaining\r\n        if self.StartOfFreeList is None:\r\n            print("Error: No free nodes remaining.")\r\n        else:\r\n            # new data item placed in node at start of free list\r\n            NewNodePointer = self.StartOfFreeList\r\n            self.QueueArray[NewNodePointer].data = NewItem\r\n            # adjust free list pointer\r\n            self.StartOfFreeList = self.QueueArray[NewNodePointer].pointer\r\n            self.QueueArray[NewNodePointer].pointer = None\r\n            # if the first item in the queue then adjust front of queue pointer\r\n            if self.FrontOfQueue is None:\r\n                self.FrontOfQueue = NewNodePointer\r\n            # new node is the new end of queue\r\n            self.QueueArray[NewNodePointer].pointer = None\r\n            if self.EndOfQueue is None:\r\n                self.EndOfQueue = NewNodePointer\r\n            else:\r\n                self.QueueArray[self.EndOfQueue].pointer = NewNodePointer\r\n                self.EndOfQueue = NewNodePointer\r\n\r\n# Example usage:\r\n\r\nmy_queue = Queue()\r\nmy_queue.JoinQueue("Apple")\r\nmy_queue.JoinQueue("Pear")\r\nmy_queue.JoinQueue("Banana")\n'})})]}),"\n",(0,n.jsx)(r.h2,{id:"question-3",children:"Question 3"}),"\n",(0,n.jsx)(r.h4,{id:"a-program-is-required-that-sorts-a-list-of-words-into-alphabetical-order-the-list-of-words-is-supplied-as-a-text-file",children:"A program is required that sorts a list of words into alphabetical order. The list of words is supplied as a text file"}),"\n",(0,n.jsx)(r.h4,{id:"a-write-a-program-to-declare-a-string-array-wordlist-that-can-hold-500-elements-initialise-the-array-so-all-elements-contain-the-empty-string",children:"a) Write a program to declare a string array, WordList, that can hold 500 elements. Initialise the array so all elements contain the empty string."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"# a. Declare and initialize the WordList array\r\nWordList = [''] * 500\n"})}),"\n",(0,n.jsx)(r.h4,{id:"b-write-a-procedure-outputlist-to-output-all-elements-in-index-order",children:"b) Write a procedure, OutputList, to output all elements in index order."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'# b. Procedure to output all elements in index order\r\ndef OutputList():\r\n    for i, word in enumerate(WordList):\r\n        print(f"{i + 1}. {word}")\n'})}),"\n",(0,n.jsx)(r.h4,{id:"c-write-a-procedure-loadwords-that-asks-the-user-for-a-filename-and-reads-the-contents-of-the-text-file-storing-each-line-of-text-word-in-a-separate-array-element-the-procedure-should-output-a-relevant-error-message-if---the-file-doesnt-exist---the-array-is-full",children:"c) Write a procedure, LoadWords, that asks the user for a filename and reads the contents of the text file, storing each line of text (word) in a separate array element. The procedure should output a relevant error message if: - the file doesn\u2019t exist - the array is full."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'# c. Procedure to load words from a file into the WordList array\r\ndef LoadWords():\r\n    filename = input("Enter the filename: ")\r\n\r\n    try:\r\n        with open(filename, \'r\') as file:\r\n            for i, line in enumerate(file):\r\n                line = line.strip()\r\n                if i < len(WordList):\r\n                    WordList[i] = line\r\n                else:\r\n                    print("Error: Array is full.")\r\n                    return\r\n        print("Words loaded successfully.")\r\n    except FileNotFoundError:\r\n        print("Error: File not found.")\n'})}),"\n",(0,n.jsxs)(t,{children:[(0,n.jsx)("summary",{children:"alternative list comprehension approach"}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'# c. Procedure to load words from a file into the WordList array\r\ndef LoadWords():\r\n    filename = input("Enter the filename: ")\r\n\r\n    try:\r\n        with open(filename, \'r\') as file:\r\n            WordList[:len(file.readlines())] = [line.strip() for line in file]\r\n        print("Words loaded successfully.")\r\n    except FileNotFoundError:\r\n        print("Error: File not found.")\r\n    except IndexError:\r\n        print("Error: Array is full.")\n'})}),(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["to further describe this one liner: ",(0,n.jsx)(r.code,{children:"WordList[:len(file.readlines())] = [line.strip() for line in file]"})]}),"\n"]}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"# Read all lines from the file and strip whitespace from each line\r\nfile_lines_stripped = [line.strip() for line in file]\r\n\r\n# Determine the length of the list of stripped lines\r\nnum_lines = len(file_lines_stripped)\r\n\r\n# Slice the WordList array to accommodate the lines from the file\r\n# This ensures that only the necessary elements are updated, and any remaining elements in WordList remain unchanged.\r\nWordList[:num_lines] = file_lines_stripped\n"})})]}),"\n",(0,n.jsx)(r.h4,{id:"d-write-a-procedure-sortwords-to-perform-a-bubble-sort-on-all-non-empty-array-elements-so-that-the-words-are-in-alphabetical-order",children:"d) Write a procedure, SortWords, to perform a bubble sort on all non-empty array elements, so that the words are in alphabetical order."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"# d. Procedure to perform bubble sort on non-empty array elements\r\ndef SortWords():\r\n    n = len(WordList)\r\n    for i in range(n):\r\n        for j in range(0, n-i-1):\r\n            if WordList[j] and WordList[j] > WordList[j+1]:\r\n                WordList[j], WordList[j+1] = WordList[j+1], WordList[j]\n"})}),"\n",(0,n.jsx)(r.h4,{id:"e-write-program-code-to-call-loadwords-then-outputlist-followed-by-sortwords-and-then-outputlist-again",children:"e) Write program code to call LoadWords, then OutputList, followed by SortWords and then OutputList again."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'# e. Call LoadWords, OutputList, SortWords, and OutputList\r\nLoadWords()\r\nprint("\\nOriginal Word List:")\r\nOutputList()\r\n\r\nSortWords()\r\nprint("\\nSorted Word List:")\r\nOutputList()\n'})}),"\n",(0,n.jsx)(r.h4,{id:"f-test-your-program-by-running-it-first-with-a-non-existing-file-and-then-with-a-text-file-ontaining-20-words-in-random-order-take-screenshots-of-your-test-runs-that-show-your-code-works-correctly",children:"f) Test your program by running it first with a non-existing file, and then with a text file ontaining 20 words in random order. Take screenshots of your test runs that show your code works correctly."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'# f. Test the program with a non-existing file and a file with 20 words\r\n# Test 1: Non-existing file\r\nLoadWords()  # This will display an error message\r\n\r\n# Test 2: File with 20 words in random order\r\nwith open("word_list.txt", \'w\') as test_file:\r\n    test_file.write("banana\\napple\\norange\\ngrape\\nkiwi\\npear\\ncherry\\nmelon\\n")\r\n    test_file.write("peach\\nstrawberry\\nblueberry\\nraspberry\\npineapple\\nmango\\n")\r\n    test_file.write("watermelon\\npapaya\\napricot\\nplum\\nfig")\r\n\r\nLoadWords()\r\nprint("\\nOriginal Word List:")\r\nOutputList()\r\n\r\nSortWords()\r\nprint("\\nSorted Word List:")\r\nOutputList()\n'})}),"\n",(0,n.jsxs)(t,{children:[(0,n.jsx)("summary",{children:"the whole program should look something like this:"}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'# a. Declare and initialize the WordList array\r\nWordList = [\'\'] * 500\r\n\r\n# b. Procedure to output all elements in index order\r\ndef OutputList():\r\n    for i, word in enumerate(WordList):\r\n        print(f"{i + 1}. {word}")\r\n\r\n# c. Procedure to load words from a file into the WordList array\r\ndef LoadWords():\r\n    filename = input("Enter the filename: ")\r\n\r\n    try:\r\n        with open(filename, \'r\') as file:\r\n            for i, line in enumerate(file):\r\n                line = line.strip()\r\n                if i < len(WordList):\r\n                    WordList[i] = line\r\n                else:\r\n                    print("Error: Array is full.")\r\n                    return\r\n        print("Words loaded successfully.")\r\n    except FileNotFoundError:\r\n        print("Error: File not found.")\r\n\r\n# d. Procedure to perform bubble sort on non-empty array elements\r\ndef SortWords():\r\n    n = len(WordList)\r\n    for i in range(n):\r\n        for j in range(0, n-i-1):\r\n            if WordList[j] and WordList[j] > WordList[j+1]:\r\n                WordList[j], WordList[j+1] = WordList[j+1], WordList[j]\r\n\r\n# e. Call LoadWords, OutputList, SortWords, and OutputList\r\nLoadWords()\r\nprint("\\nOriginal Word List:")\r\nOutputList()\r\n\r\nSortWords()\r\nprint("\\nSorted Word List:")\r\nOutputList()\r\n\r\n# f. Test the program with a non-existing file and a file with 20 words\r\n# Test 1: Non-existing file\r\nLoadWords()  # This will display an error message\r\n\r\n# Test 2: File with 20 words in random order\r\nwith open("word_list.txt", \'w\') as test_file:\r\n    test_file.write("banana\\napple\\norange\\ngrape\\nkiwi\\npear\\ncherry\\nmelon\\n")\r\n    test_file.write("peach\\nstrawberry\\nblueberry\\nraspberry\\npineapple\\nmango\\n")\r\n    test_file.write("watermelon\\npapaya\\napricot\\nplum\\nfig")\r\n\r\nLoadWords()\r\nprint("\\nOriginal Word List:")\r\nOutputList()\r\n\r\nSortWords()\r\nprint("\\nSorted Word List:")\r\nOutputList()\n'})})]})]})}function h(e={}){const{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},6213:(e,r,t)=>{t.d(r,{Z:()=>s,a:()=>o});var n=t(959);const i={},a=n.createContext(i);function o(e){const r=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);