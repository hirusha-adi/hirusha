"use strict";(self.webpackChunkhirusha=self.webpackChunkhirusha||[]).push([[9555],{3934:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>d,toc:()=>o});var r=i(1527),s=i(6213);const c={title:"Notes - File processing and exception handling",sidebar_label:"Notes",slug:"notes",sidebar_position:1},l=void 0,d={id:"study/cie_al/computer_science/paper_4/my_study_notes/chapter_26/notes",title:"Notes - File processing and exception handling",description:"Some words used here might not be exactly correct. I'm just sticking with whats in the book. classes will be further discussed in other chaptersj under OOP.",source:"@site/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_26/notes.mdx",sourceDirName:"study/cie_al/computer_science/paper_4/my_study_notes/chapter_26",slug:"/study/cie_al/computer_science/paper_4/my_study_notes/chapter_26/notes",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_26/notes",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Notes - File processing and exception handling",sidebar_label:"Notes",slug:"notes",sidebar_position:1},sidebar:"study",previous:{title:"Chapter 26 - File processing and exception handling",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_26/"},next:{title:"ESQ",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_26/esq"}},t={},o=[{value:"Records",id:"records",level:2},{value:"File Processing",id:"file-processing",level:2},{value:"Now, please refer to the Pickles note before continuing forward and come back",id:"now-please-refer-to-the-pickles-note-before-continuing-forward-and-come-back",level:4},{value:"Sequential File Processing",id:"sequential-file-processing",level:3},{value:"Random-access file processing",id:"random-access-file-processing",level:3},{value:"Exception Handling",id:"exception-handling",level:2}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.admonition,{title:"Note",type:"danger",children:(0,r.jsx)(n.p,{children:"Some words used here might not be exactly correct. I'm just sticking with whats in the book. classes will be further discussed in other chaptersj under OOP."})}),"\n",(0,r.jsx)(n.h2,{id:"records",children:"Records"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# class definition\n# ---------------------------------------\nclass CarRecord:\n    def __init__(self): # constructor\n        self.VehicleID = ""\n        self.Registration = ""\n        self.DateOfRegistration = None\n        self.EngineSize = 0\n        self.PurchasePrice = 0.00\n\n# example\n# ---------------------------------------\nThisCar = CarRecord()\nThisCar.EngineSize = 2500\n\n# make a list of 100 car records\nCar = [CarRecord() for i in range(100)] \nCar[1].EngineSize = 2500\n'})}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:"Pseudocode"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"type definition"}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"TYPE CarRecord\n    DECLARE VehicleID : STRING // unique identifier and record key\n    DECLARE Registration : STRING\n    DECLARE DateOfRegistration : DATE\n    DECLARE EngineSize : INTEGER\n    DECLARE PurchasePrice : CURRENCY\nENDTYPE\n"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"to declare a variable of this type CarRecord"}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"DECLARE ThisCar : CarRecord\n"})})]}),"\n",(0,r.jsx)(n.h2,{id:"file-processing",children:"File Processing"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Random file"}),": a file that stores records at specific addresses that can be accessed directly"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Pseudocode File Operations:"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Structured English"}),(0,r.jsx)(n.th,{children:"Pseudocode"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Create a file and open it for writing OPENFILE"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"<filename> FOR WRITE"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Open a file in append mode"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"OPENFILE <filename> FOR APPEND"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Open a file for reading"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"OPENFILE <filename> FOR READ"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Open a file for random access"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"OPENFILE <filename> FOR RANDOM"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Close a file"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"CLOSEFILE <filename>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Write a record to a file"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"PUTRECORD <filename>, <identifier>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Read a record from a file"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"GETRECORD <filename>, <identifier>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Move to a specific disk address within the file"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"SEEK <filename>, <address>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Test for end of file"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"EOF(<filename>)"})})]})]})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Note that there are two new operations:"}),"\n"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Structured English"}),(0,r.jsx)(n.th,{children:"Pseudocode"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Write a record to a file"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"PUTRECORD <filename>, <identifier>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Read a record from a file"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"GETRECORD <filename>, <identifier>"})})]})]})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"These can be used to directly store records (objects in our memmory) to a file (serialized)"}),"\n",(0,r.jsx)(n.li,{children:"When needed, we can directly load that object to the memmory with pickles"}),"\n",(0,r.jsxs)(n.li,{children:["the ",(0,r.jsx)(n.code,{children:".pkl"})," or ",(0,r.jsx)(n.code,{children:".dat"})," file that stores this object is meaning less unless its loaded into memmory using the python's ",(0,r.jsx)(n.code,{children:"pickle"})," module"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"now-please-refer-to-the-pickles-note-before-continuing-forward-and-come-back",children:["Now, please refer to the ",(0,r.jsx)(n.a,{href:"pickles",children:"Pickles note"})," before continuing forward and come back"]}),"\n",(0,r.jsx)(n.h3,{id:"sequential-file-processing",children:"Sequential File Processing"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"If we have an array of records, we may want to store the records on disk before the program quits, so that we don't lose the data."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"We can open a binary file and write one record after another to the file."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"We can then read the records back into the array when the program is run again."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Python:"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import pickle\n\nCar = [CarRecord() for i in range(100)]\n\nwith open('CarFile.DAT', 'wb') as file:\n    for i in range(100):\n        pickle.dump(Car[i], file) # write a whole record to the binary file\n\nCar = []\nwith open('CarFile.DAT', 'rb') as file:\n    while True: # check for end of file\n        Car.append(pickle.load(file)) # append record from file to end of list\n"})}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:"Pseudocode"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Saving contents of array"}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"OPENFILE CarFile FOR WRITE\nFOR i \u2190 1 TO MaxRecords\n    PUTRECORD CarFile, Car[i]\nNEXT i\nCLOSEFILE CarFile \n"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Restoring contents of array"}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"OPENFILE CarFile FOR READ\nFOR i \u2190 1 TO MaxRecords\n    GETRECORD CarFile, Car[i]\nNEXT i\nCLOSEFILE CarFile \n"})})]}),"\n",(0,r.jsx)(n.h3,{id:"random-access-file-processing",children:"Random-access file processing"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Python:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import pickle\n\nclass CarRecord:\n    def __init__(self, VehicleID):\n        self.VehicleID = VehicleID\n\n# Writing a record to the file\nThisCar = CarRecord(VehicleID='12345') \nAddress = hash(ThisCar.VehicleID)\n\nwith open('CarFile.DAT', 'rb+') as CarFile: # rb+ - can append\n    CarFile.seek(Address)\n    pickle.dump(ThisCar, CarFile)\n\n\n# Reading a record from the file\nVehicleID_to_find = '12345' \n\nwith open('CarFile.DAT', 'rb') as CarFile:\n    Address = hash(VehicleID_to_find)\n    CarFile.seek(Address)    \n    ThisCar = pickle.load(CarFile)\n\n# Print the loaded record\nprint(f\"Loaded Record: VehicleID - {ThisCar.VehicleID}\")\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["To retrieve a record based on a given VehicleID,","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["the file is opened in read mode (",(0,r.jsx)(n.code,{children:"rb"}),")."]}),"\n",(0,r.jsx)(n.li,{children:"The file pointer is moved to the calculated address using seek,"}),"\n",(0,r.jsx)(n.li,{children:"and then pickle.load is used to deserialize (load) the record from the file."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:"Pseudocode"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Saving a record"}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"OPENFILE CarFile FOR RANDOM\nAddress \u2190 Hash(ThisCar.VehicleID)\nSEEK CarFile, Address\nPUTRECORD CarFile, ThisCar\nCLOSEFILE CarFile\n"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Retrieving a record"}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"OPENFILE CarFile FOR RANDOM\nAddress \u2190 Hash(ThisCar.VehicleID)\nSEEK CarFile, Address\nPUTRECORD CarFile, ThisCar\nCLOSEFILE CarFile \n"})})]}),"\n",(0,r.jsx)(n.h2,{id:"exception-handling",children:"Exception Handling"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"essential for writing robust and error-tolerant code."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"allows developers to gracefully handle unexpected errors and prevent program crashes"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Try-Except Block:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Syntax:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"try:\n    # Code that might raise an exception\n    # ...\nexcept SomeSpecificException as e:\n    # Handle specific exception\n    # ...\nexcept AnotherSpecificException as e:\n    # Handle another specific exception\n    # ...\nexcept Exception as e:\n    # Handle generic exception\n    # ...\nelse:\n    # Executed if no exception occurs in the try block\n    # ...\nfinally:\n    # Always executed, regardless of whether an exception occurred or not\n    # ...\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'try:\n    # Code that might raise an exception\n    result = 10 / 0\nexcept ZeroDivisionError:\n    # Handling a specific exception\n    print("Error: Cannot divide by zero!")\nexcept Exception as e:\n    # Handling a generic exception\n    print(f"An error occurred: {e}")\nelse:\n    # Executed if no exception occurs in the try block\n    print("No errors!")\nfinally:\n    # Always executed, regardless of whether an exception occurred or not\n    print("Finally block executed.")\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Common Exception Types:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"IOError"}),": for example, a file cannot be opened"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ImportError"}),": Python cannot find the module"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ValueError"}),": an argument has an inappropriate value"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"KeyboardInterrupt"}),": the user presses Ctrl+C or Ctrl+Del"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"EOFError"}),": a file-read meets an end-of-file condition"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ZeroDivisionError"}),": a division by zero has been attempted"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Finally Block:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"finally"})," block is optional and is used for code that must be executed regardless of whether an exception occurred."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"try:\n    # Code that may raise an exception\nexcept ExceptionType as e:\n    # Code to handle the exception\nfinally:\n    # Code that always runs, regardless of exceptions\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Custom Exceptions:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Developers can create custom exception classes by inheriting from the ",(0,r.jsx)(n.code,{children:"Exception"})," class."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class CustomError(Exception):\n    def __init__(self, message):\n        self.message = message\n\ntry:\n    raise CustomError("This is a custom exception")\nexcept CustomError as e:\n    print("Custom Error:", e.message)\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:"Pseudocode"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"TRY\n    <statementsA>\nEXCEPT\n    <statementsB>\nENDTRY\n"})})]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},6213:(e,n,i)=>{i.d(n,{Z:()=>d,a:()=>l});var r=i(959);const s={},c=r.createContext(s);function l(e){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);