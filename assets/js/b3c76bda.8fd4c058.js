"use strict";(self.webpackChunkhirusha=self.webpackChunkhirusha||[]).push([[9305],{9491:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var t=n(1527),s=n(6213);const r={title:"Exam Style Questions - System software",sidebar_label:"ESQ",slug:"esq",sidebar_position:2},o=void 0,a={id:"study/cie_al/computer_science/paper_3/my_study_notes/chapter_20/esq",title:"Exam Style Questions - System software",description:"Question 1",source:"@site/docs/study/cie_al/computer_science/paper_3/my_study_notes/chapter_20/esq.md",sourceDirName:"study/cie_al/computer_science/paper_3/my_study_notes/chapter_20",slug:"/study/cie_al/computer_science/paper_3/my_study_notes/chapter_20/esq",permalink:"/docs/study/cie_al/computer_science/paper_3/my_study_notes/chapter_20/esq",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Exam Style Questions - System software",sidebar_label:"ESQ",slug:"esq",sidebar_position:2},sidebar:"study",previous:{title:"Notes",permalink:"/docs/study/cie_al/computer_science/paper_3/my_study_notes/chapter_20/notes"},next:{title:"Chapter 21 - Security",permalink:"/docs/study/cie_al/computer_science/paper_3/my_study_notes/chapter_21/"}},l={},c=[{value:"Question 1",id:"question-1",level:2},{value:"a) In a multiprogramming environment, the concept of a process has been found to be very useful in controlling the execution of programs.",id:"a-in-a-multiprogramming-environment-the-concept-of-a-process-has-been-found-to-be-very-useful-in-controlling-the-execution-of-programs",level:4},{value:"i Explain the concept of a process",id:"i-explain-the-concept-of-a-process",level:4},{value:"ii In one model for the execution of a program, there are five defined process states. Identify three of them and explain the meaning of each.",id:"ii-in-one-model-for-the-execution-of-a-program-there-are-five-defined-process-states-identify-three-of-them-and-explain-the-meaning-of-each",level:4},{value:"b) The transition of processes between states is controlled by a scheduler",id:"b-the-transition-of-processes-between-states-is-controlled-by-a-scheduler",level:4},{value:"i Identify two scheduling algorithms and for each classify its type",id:"i-identify-two-scheduling-algorithms-and-for-each-classify-its-type",level:4},{value:"ii A scheduling algorithm might be chosen to use prioritisation. Identify two criteria that could be used to assign a priority to a process",id:"ii-a-scheduling-algorithm-might-be-chosen-to-use-prioritisation-identify-two-criteria-that-could-be-used-to-assign-a-priority-to-a-process",level:4},{value:"Question 2",id:"question-2",level:2},{value:"a) Three memory management techniques are partitioning, scheduling and paging.",id:"a-three-memory-management-techniques-are-partitioning-scheduling-and-paging",level:4},{value:"i Give definitions of them",id:"i-give-definitions-of-them",level:4},{value:"b) Some systems use virtual memory.",id:"b-some-systems-use-virtual-memory",level:4},{value:"i Identify which of the techniques in part a is used to create virtual memory",id:"i-identify-which-of-the-techniques-in-part-a-is-used-to-create-virtual-memory",level:4},{value:"ii Explain two advantages of using virtual memory.",id:"ii-explain-two-advantages-of-using-virtual-memory",level:4},{value:"Explain one problem that can occur in a virtual memory system",id:"explain-one-problem-that-can-occur-in-a-virtual-memory-system",level:4},{value:"Question 3",id:"question-3",level:2},{value:"a) A compiler is used to translate a program into machine code.",id:"a-a-compiler-is-used-to-translate-a-program-into-machine-code",level:4},{value:"i A compiler is modelled as containing a front end and a back end. State the overall aim of the front end and of the back end.",id:"i-a-compiler-is-modelled-as-containing-a-front-end-and-a-back-end-state-the-overall-aim-of-the-front-end-and-of-the-back-end",level:4},{value:"ii Identify two processes which are part of the front end.",id:"ii-identify-two-processes-which-are-part-of-the-front-end",level:4},{value:"iii Identify two processes which are part of the back end.",id:"iii-identify-two-processes-which-are-part-of-the-back-end",level:4},{value:"b) Complete the following Backus\u2013Naur definition of a signed integer:",id:"b-complete-the-following-backusnaur-definition-of-a-signed-integer",level:4},{value:'i "<Digit>" ::=',id:"i-digit-",level:4},{value:'ii "<Sign>" ::=',id:"ii-sign-",level:4},{value:'iii "<Unsigned integer>" ::=',id:"iii-unsigned-integer-",level:4},{value:'iv "<Signed integer>" ::= [4]',id:"iv-signed-integer--4",level:4},{value:"c) Give the Reverse Polish notation equivalent of the expression (a + 6) + b / c .",id:"c-give-the-reverse-polish-notation-equivalent-of-the-expression-a--6--b--c-",level:4},{value:"d) Give the infix notation equivalent of the Reverse Polish expression a 3 b _ 6 c _ - + .",id:"d-give-the-infix-notation-equivalent-of-the-reverse-polish-expression-a-3-b-_-6-c-_----",level:4},{value:"Question 4",id:"question-4",level:2},{value:"The following syntax diagrams, for a particular programming language, show the syntax of:",id:"the-following-syntax-diagrams-for-a-particular-programming-language-show-the-syntax-of",level:4},{value:"an assignment statement",id:"an-assignment-statement",level:4},{value:"a variable",id:"a-variable",level:4},{value:"a letter",id:"a-letter",level:4},{value:"an operator",id:"an-operator",level:4},{value:"a) The following assignment statements are invalid. Give the reason in each case.",id:"a-the-following-assignment-statements-are-invalid-give-the-reason-in-each-case",level:4},{value:"i. a = b + c [1]",id:"i-a--b--c-1",level:4},{value:"ii. a = b \u2013 2; [1]",id:"ii-a--b--2-1",level:4},{value:"iii. a = dd * cce; [1]",id:"iii-a--dd--cce-1",level:4},{value:"b) Write the Backus-Naur Form (BNF) for the syntax diagrams shown above.",id:"b-write-the-backus-naur-form-bnf-for-the-syntax-diagrams-shown-above",level:4},{value:"i. <code>&lt;assignmentstatement&gt; ::=</code>",id:"i-assignmentstatement-",level:4},{value:"ii. <code>&lt;variable&gt; ::=</code>",id:"ii-variable-",level:4},{value:"iii. <code>&lt;letter&gt; ::=</code>",id:"iii-letter-",level:4},{value:"iv. <code>&lt;operator&gt; ::= [6]</code>",id:"iv-operator--6",level:4},{value:"c) Rewrite the BNF rule for a variable so that it can be any number of letters. <code>&lt;variable&gt; ::= </code>",id:"c-rewrite-the-bnf-rule-for-a-variable-so-that-it-can-be-any-number-of-letters-variable--",level:4},{value:"d) Programmers working for a software development company use both interpreters and compilers.",id:"d-programmers-working-for-a-software-development-company-use-both-interpreters-and-compilers",level:4},{value:"i The programmers prefer to debug their programs using an interpreter. Give one possible reason why.",id:"i-the-programmers-prefer-to-debug-their-programs-using-an-interpreter-give-one-possible-reason-why",level:4},{value:"The company sells compiled versions of its programs. Give a reason why this helps to protect the security of the source code",id:"the-company-sells-compiled-versions-of-its-programs-give-a-reason-why-this-helps-to-protect-the-security-of-the-source-code",level:4},{value:"Question 5",id:"question-5",level:2},{value:"A number of processes are being executed in a computer.",id:"a-number-of-processes-are-being-executed-in-a-computer",level:4},{value:"a) Explain the difference between a program and a process.",id:"a-explain-the-difference-between-a-program-and-a-process",level:4},{value:"A process can be in one of three states: running, ready or blocked.",id:"a-process-can-be-in-one-of-three-states-running-ready-or-blocked",level:4},{value:"b) For each of the following, the process is moved from the first state to the second state. Describe the conditions that cause each of the following changes of the state of a process:",id:"b-for-each-of-the-following-the-process-is-moved-from-the-first-state-to-the-second-state-describe-the-conditions-that-cause-each-of-the-following-changes-of-the-state-of-a-process",level:4},{value:"i From running to ready",id:"i-from-running-to-ready",level:4},{value:"ii From ready to running",id:"ii-from-ready-to-running",level:4},{value:"iii From running to blocked",id:"iii-from-running-to-blocked",level:4},{value:"c) Explain why a process cannot be moved from the blocked state to the running state.",id:"c-explain-why-a-process-cannot-be-moved-from-the-blocked-state-to-the-running-state",level:4},{value:"d) Explain the role of the high-level scheduler in a multiprogramming operating system.",id:"d-explain-the-role-of-the-high-level-scheduler-in-a-multiprogramming-operating-system",level:4}];function d(e){const i={code:"code",h2:"h2",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h2,{id:"question-1",children:"Question 1"}),"\n",(0,t.jsx)(i.h4,{id:"a-in-a-multiprogramming-environment-the-concept-of-a-process-has-been-found-to-be-very-useful-in-controlling-the-execution-of-programs",children:"a) In a multiprogramming environment, the concept of a process has been found to be very useful in controlling the execution of programs."}),"\n",(0,t.jsx)(i.h4,{id:"i-explain-the-concept-of-a-process",children:"i Explain the concept of a process"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"a program that has begun execution"}),"\n",(0,t.jsx)(i.li,{children:"a program in memory that has an associated process control block"}),"\n",(0,t.jsx)(i.li,{children:"a process is an independent unit of execution that represents a program in execution"}),"\n",(0,t.jsx)(i.li,{children:"it includes the program code, current execution state, and allocated system resources"}),"\n",(0,t.jsx)(i.li,{children:"processes allow for concurrent execution, isolation between tasks, and efficient resource management"}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"ii-in-one-model-for-the-execution-of-a-program-there-are-five-defined-process-states-identify-three-of-them-and-explain-the-meaning-of-each",children:"ii In one model for the execution of a program, there are five defined process states. Identify three of them and explain the meaning of each."}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Ready: The process is prepared to execute but is waiting for the CPU to be assigned by the scheduler."}),"\n",(0,t.jsx)(i.li,{children:"Running: The process is currently being executed by the CPU."}),"\n",(0,t.jsx)(i.li,{children:"Blocked/Waiting: The process is temporarily halted, often waiting for an event or resource (e.g., I/O operation) before it can proceed."}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"b-the-transition-of-processes-between-states-is-controlled-by-a-scheduler",children:"b) The transition of processes between states is controlled by a scheduler"}),"\n",(0,t.jsx)(i.h4,{id:"i-identify-two-scheduling-algorithms-and-for-each-classify-its-type",children:"i Identify two scheduling algorithms and for each classify its type"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsx)(i.p,{children:"Round Robin (RR)"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Preemptive"}),"\n",(0,t.jsx)(i.li,{children:"Round Robin is a preemptive scheduling algorithm where each process is assigned a fixed time slot (time quantum). When a time quantum expires, the process is moved to the back of the queue, and the next process in the queue is given CPU time."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsx)(i.p,{children:"First-Come-First-Serve (FCFS)"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Non-preemptive"}),"\n",(0,t.jsx)(i.li,{children:"FCFS is a non-preemptive scheduling algorithm where the process that arrives first is the first to be executed. Once a process starts its execution, it continues until it completes or is blocked, without interruption by the scheduler."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"ii-a-scheduling-algorithm-might-be-chosen-to-use-prioritisation-identify-two-criteria-that-could-be-used-to-assign-a-priority-to-a-process",children:"ii A scheduling algorithm might be chosen to use prioritisation. Identify two criteria that could be used to assign a priority to a process"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"estimated time of process execution (when the time taken to complete the required process is very low (shorter burst times))"}),"\n",(0,t.jsx)(i.li,{children:"estimated remaining time for execution"}),"\n",(0,t.jsx)(i.li,{children:"length of time already spent in the ready queue"}),"\n",(0,t.jsx)(i.li,{children:"whether the process is I/O bound or CPU bound."}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"question-2",children:"Question 2"}),"\n",(0,t.jsx)(i.h4,{id:"a-three-memory-management-techniques-are-partitioning-scheduling-and-paging",children:"a) Three memory management techniques are partitioning, scheduling and paging."}),"\n",(0,t.jsx)(i.h4,{id:"i-give-definitions-of-them",children:"i Give definitions of them"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"partitioning: dividing the physical memory into fixed-size or variable-size partitions to accommodate multiple processes"}),"\n",(0,t.jsx)(i.li,{children:"scheduling: determining the order in which processes or tasks are executed by the CPU. Examples of some scheduling algorithms are: First-Come-First-Serve (FCFS), Round Robin (RR)"}),"\n",(0,t.jsx)(i.li,{children:"paging: The process is divided into equal-sized pages and memory is divided into frames of the same size. The secondary storage can also be divided into frames."}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"b-some-systems-use-virtual-memory",children:"b) Some systems use virtual memory."}),"\n",(0,t.jsx)(i.h4,{id:"i-identify-which-of-the-techniques-in-part-a-is-used-to-create-virtual-memory",children:"i Identify which of the techniques in part a is used to create virtual memory"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"paging"}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"ii-explain-two-advantages-of-using-virtual-memory",children:"ii Explain two advantages of using virtual memory."}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Increased Address Space: Virtual memory provides a larger address space than physical RAM, accommodating larger programs."}),"\n",(0,t.jsx)(i.li,{children:"Multitasking: Enables concurrent execution of multiple processes, improving system efficiency."}),"\n",(0,t.jsx)(i.li,{children:"Memory Isolation: Protects processes from interfering with each other, enhancing system stability and security."}),"\n",(0,t.jsx)(i.li,{children:"Demand Paging: Efficiently loads only necessary program portions into memory, reducing I/O operations and improving performance."}),"\n",(0,t.jsx)(i.li,{children:"Ease of Memory Management: Simplifies memory allocation, allowing flexible use of resources."}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"explain-one-problem-that-can-occur-in-a-virtual-memory-system",children:"Explain one problem that can occur in a virtual memory system"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"page faults can occur when a program tries to access a page that is not currently in the physical memory"}),"\n",(0,t.jsx)(i.li,{children:"this leads to additional time and resources being spent to bring the required page into memory"}),"\n",(0,t.jsx)(i.li,{children:"causing a delay in the execution"}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"question-3",children:"Question 3"}),"\n",(0,t.jsx)(i.h4,{id:"a-a-compiler-is-used-to-translate-a-program-into-machine-code",children:"a) A compiler is used to translate a program into machine code."}),"\n",(0,t.jsx)(i.h4,{id:"i-a-compiler-is-modelled-as-containing-a-front-end-and-a-back-end-state-the-overall-aim-of-the-front-end-and-of-the-back-end",children:"i A compiler is modelled as containing a front end and a back end. State the overall aim of the front end and of the back end."}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsx)(i.p,{children:"Front End"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"responsible for analyzing the source code"}),"\n",(0,t.jsx)(i.li,{children:"understand and represent the program's structure and meaning in an intermediate form"}),"\n",(0,t.jsx)(i.li,{children:"it does lexical analysis, syntax analysis, semantic analysis, and the creation of an intermediate representation"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsx)(i.p,{children:"Back End"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"takes the intermediate representation generated by the front end and translates it into the target machine code"}),"\n",(0,t.jsx)(i.li,{children:"focuses on code optimization, code generation, and the production of an executable output that can run on the target platform's hardware"}),"\n",(0,t.jsx)(i.li,{children:"aims to produce efficient and optimized machine code to the specific architecture"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"ii-identify-two-processes-which-are-part-of-the-front-end",children:"ii Identify two processes which are part of the front end."}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"lexical analysis: breaking the source code into tokens, identifying keywords, operators and other elements of the language"}),"\n",(0,t.jsx)(i.li,{children:"semantic anlysis: checks the meaning of statements and expressions in the program, ensuring they conform to the language's rules and semantics"}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"iii-identify-two-processes-which-are-part-of-the-back-end",children:"iii Identify two processes which are part of the back end."}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"code optimization: optimizes the intermediate code to improve the efficiency of the generated machine code"}),"\n",(0,t.jsx)(i.li,{children:"code generation: translates the optimized intermediate code into the target machine code for a specific architecture"}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"b-complete-the-following-backusnaur-definition-of-a-signed-integer",children:"b) Complete the following Backus\u2013Naur definition of a signed integer:"}),"\n",(0,t.jsxs)(i.h4,{id:"i-digit-",children:["i ","<Digit>"," ::="]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"<Digit> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9"})}),"\n"]}),"\n",(0,t.jsxs)(i.h4,{id:"ii-sign-",children:["ii ","<Sign>"," ::="]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"<Sign> ::= + | -"})}),"\n"]}),"\n",(0,t.jsxs)(i.h4,{id:"iii-unsigned-integer-",children:["iii ","<Unsigned integer>"," ::="]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"<Unsigned integer> ::= <Digit>+"})}),"\n"]}),"\n",(0,t.jsxs)(i.h4,{id:"iv-signed-integer--4",children:["iv ","<Signed integer>"," ::= [4]"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"<Signed integer> ::= <Sign>? <Unsigned integer>"})}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"c-give-the-reverse-polish-notation-equivalent-of-the-expression-a--6--b--c-",children:"c) Give the Reverse Polish notation equivalent of the expression (a + 6) + b / c ."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"a6+bc/+\n"})}),"\n",(0,t.jsx)(i.h4,{id:"d-give-the-infix-notation-equivalent-of-the-reverse-polish-expression-a-3-b-_-6-c-_----",children:"d) Give the infix notation equivalent of the Reverse Polish expression a 3 b _ 6 c _ - + ."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"(a+(3\xd7b))\u2212(6\xd7c)\n(a+3b)\u22126c\n"})}),"\n",(0,t.jsx)(i.h2,{id:"question-4",children:"Question 4"}),"\n",(0,t.jsx)(i.h4,{id:"the-following-syntax-diagrams-for-a-particular-programming-language-show-the-syntax-of",children:"The following syntax diagrams, for a particular programming language, show the syntax of:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsx)(i.h4,{id:"an-assignment-statement",children:"an assignment statement"}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsx)(i.h4,{id:"a-variable",children:"a variable"}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsx)(i.h4,{id:"a-letter",children:"a letter"}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsx)(i.h4,{id:"an-operator",children:"an operator"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.img,{src:"https://cdn.discordapp.com/attachments/1163847683207856178/1184137229896011816/image.png",alt:"i1"})}),"\n",(0,t.jsx)(i.h4,{id:"a-the-following-assignment-statements-are-invalid-give-the-reason-in-each-case",children:"a) The following assignment statements are invalid. Give the reason in each case."}),"\n",(0,t.jsx)(i.h4,{id:"i-a--b--c-1",children:"i. a = b + c [1]"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:";"})," missing"]}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"ii-a--b--2-1",children:"ii. a = b \u2013 2; [1]"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"2"})," is not a variable"]}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"iii-a--dd--cce-1",children:"iii. a = dd * cce; [1]"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"e"})," is not a valid letter"]}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"b-write-the-backus-naur-form-bnf-for-the-syntax-diagrams-shown-above",children:"b) Write the Backus-Naur Form (BNF) for the syntax diagrams shown above."}),"\n",(0,t.jsxs)(i.h4,{id:"i-assignmentstatement-",children:["i. ",(0,t.jsx)(i.code,{children:"<assignmentstatement> ::="})]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"<assignment statement> ::= <variable> = <variable><operator><variable>;\n"})}),"\n",(0,t.jsxs)(i.h4,{id:"ii-variable-",children:["ii. ",(0,t.jsx)(i.code,{children:"<variable> ::="})]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"<variable> ::= <letter>|<letter><letter>|<letter><letter><letter>\n"})}),"\n",(0,t.jsxs)(i.h4,{id:"iii-letter-",children:["iii. ",(0,t.jsx)(i.code,{children:"<letter> ::="})]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"<letter> ::= a|b|c|d\n"})}),"\n",(0,t.jsxs)(i.h4,{id:"iv-operator--6",children:["iv. ",(0,t.jsx)(i.code,{children:"<operator> ::= [6]"})]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"<operator> :: =+|-|*|\xf7\n"})}),"\n",(0,t.jsxs)(i.h4,{id:"c-rewrite-the-bnf-rule-for-a-variable-so-that-it-can-be-any-number-of-letters-variable--",children:["c) Rewrite the BNF rule for a variable so that it can be any number of letters. ",(0,t.jsx)(i.code,{children:"<variable> ::= "})]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"<variable> ::= <letter> | <letter><variable>\n"})}),"\n",(0,t.jsx)(i.h4,{id:"d-programmers-working-for-a-software-development-company-use-both-interpreters-and-compilers",children:"d) Programmers working for a software development company use both interpreters and compilers."}),"\n",(0,t.jsx)(i.h4,{id:"i-the-programmers-prefer-to-debug-their-programs-using-an-interpreter-give-one-possible-reason-why",children:"i The programmers prefer to debug their programs using an interpreter. Give one possible reason why."}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"debugging is faster / easier"}),"\n",(0,t.jsx)(i.li,{children:"can debug incomplete code"}),"\n",(0,t.jsx)(i.li,{children:"better diagnostics"}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"the-company-sells-compiled-versions-of-its-programs-give-a-reason-why-this-helps-to-protect-the-security-of-the-source-code",children:"The company sells compiled versions of its programs. Give a reason why this helps to protect the security of the source code"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"compiler produces executable version"}),"\n",(0,t.jsx)(i.li,{children:"not readable / no need for source code"}),"\n",(0,t.jsx)(i.li,{children:"difficult to reverse-engineer"}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"question-5",children:"Question 5"}),"\n",(0,t.jsx)(i.h4,{id:"a-number-of-processes-are-being-executed-in-a-computer",children:"A number of processes are being executed in a computer."}),"\n",(0,t.jsx)(i.h4,{id:"a-explain-the-difference-between-a-program-and-a-process",children:"a) Explain the difference between a program and a process."}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:'A program is the written code ("static")'}),"\n",(0,t.jsx)(i.li,{children:'A process is the executing code ("dynamic")'}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"a-process-can-be-in-one-of-three-states-running-ready-or-blocked",children:"A process can be in one of three states: running, ready or blocked."}),"\n",(0,t.jsx)(i.h4,{id:"b-for-each-of-the-following-the-process-is-moved-from-the-first-state-to-the-second-state-describe-the-conditions-that-cause-each-of-the-following-changes-of-the-state-of-a-process",children:"b) For each of the following, the process is moved from the first state to the second state. Describe the conditions that cause each of the following changes of the state of a process:"}),"\n",(0,t.jsx)(i.h4,{id:"i-from-running-to-ready",children:"i From running to ready"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"when process is executing it is allocated a time slice (running state)"}),"\n",(0,t.jsx)(i.li,{children:"process is allocated time on processor"}),"\n",(0,t.jsx)(i.li,{children:"when time slice completed process / interrupt occurs can no longer use processor even though it is capable of further processing (ready state)"}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"ii-from-ready-to-running",children:"ii From ready to running"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"process is capable of using processor (ready state)"}),"\n",(0,t.jsx)(i.li,{children:"OS allocates processor to process so that process can execute (running state)"}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"iii-from-running-to-blocked",children:"iii From running to blocked"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"process is executing (running state) when it needs to perform I/O operation"}),"\n",(0,t.jsx)(i.li,{children:"placed in blocked state \u2013 until I/O operation completed"}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"c-explain-why-a-process-cannot-be-moved-from-the-blocked-state-to-the-running-state",children:"c) Explain why a process cannot be moved from the blocked state to the running state."}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"when I/O operation completed for process in blocked state"}),"\n",(0,t.jsx)(i.li,{children:"process put in ready state"}),"\n",(0,t.jsx)(i.li,{children:"OS decides which process to allocate to processor from the ready queue"}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"d-explain-the-role-of-the-high-level-scheduler-in-a-multiprogramming-operating-system",children:"d) Explain the role of the high-level scheduler in a multiprogramming operating system."}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"decides which processes are to be loaded from backing store"}),"\n",(0,t.jsx)(i.li,{children:"into memory /ready queue"}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,s.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},6213:(e,i,n)=>{n.d(i,{Z:()=>a,a:()=>o});var t=n(959);const s={},r=t.createContext(s);function o(e){const i=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:i},e.children)}}}]);