"use strict";(self.webpackChunkhirusha=self.webpackChunkhirusha||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"2023-11-02-na-uyana","metadata":{"permalink":"/blog/2023-11-02-na-uyana","editUrl":"https://github.com/hirusha-adi/hirusha/edit/main/blog/2023-11-02-na-uyana.md","source":"@site/blog/2023-11-02-na-uyana.md","title":"Unearthing the Na Uyana Monastery Temple - A Constructive Critique","description":"This article is entirely based on my personal experiences and reflects my personal opinion.","date":"2023-11-02T00:00:00.000Z","formattedDate":"November 2, 2023","tags":[{"label":"others","permalink":"/blog/tags/others"}],"readingTime":2.4133333333333336,"hasTruncateMarker":true,"authors":[{"name":"Hirusha Adikari","title":"Student interested in Tech","url":"https://github.com/hirusha-adi","imageURL":"https://avatars.githubusercontent.com/u/36286877?v=4","key":"hirusha"}],"frontMatter":{"slug":"2023-11-02-na-uyana","title":"Unearthing the Na Uyana Monastery Temple - A Constructive Critique","authors":["hirusha"],"tags":["others"]},"unlisted":false,"nextItem":{"title":"Sri Lanka\u2019s Most Widespread Computer Virus- \u201cRasith.A Worm\u201d","permalink":"/blog/2023-02-15-sri-lanka-rasitha-worm"}},"content":":::danger WARNING\\r\\n\\r\\nThis article is entirely based on my personal experiences and reflects my personal opinion.\\r\\n\\r\\n:::\\r\\n\\r\\n:::info NOTE\\r\\n\\r\\nEverything, including the food prepared for the monks, is done with great care and cleanliness. This is truly commendable.\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\nThe Buddhist devotees only assist by cutting vegetables and preparing food for the chef, but you might wonder why this matters. Well, it\'s because they ensure that the food is cooked without artificial flavors and additives like Knorr stock cubes or [MSG](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5938543/), which can be harmful but are commonly used by many Sri Lankans.\\r\\n\\r\\nHowever, this commitment to cleanliness takes a turn for the worse when it comes to the basic needs of Buddhist devotees who assist in cutting vegetables and preparing food for the chefs all night long.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Sleeping Rooms\\r\\n\\r\\n![i0](https://cdn.discordapp.com/attachments/1163847683207856178/1169636332692308018/IMG-20231102-WA0025.jpg?ex=65561fb8&is=6543aab8&hm=8c710d4b361638c3965960b398e41b9039ba53e57185f8164e1e61c0f4e34bfa&)\\r\\n\\r\\n- If you\'re older or find it hard to climb stairs, you might face difficulty in finding a place to sleep. There is a space available for such individuals, but it can only accommodate two people at max.\\r\\n\\r\\n![i1](https://cdn.discordapp.com/attachments/1163847683207856178/1169636353663827998/IMG-20231102-WA0026.jpg?ex=65561fbd&is=6543aabd&hm=527e6314e81329b48533522832581e7c4345366e33041821d29fe8b87fb9255d&)\\r\\n\\r\\n- In the larger room, there is a single bed available, while the smaller room lacks any beds, requiring visitors to place a mat on the floor for sleeping, nothing comfortable, though it\'s worth noting that the sleeping areas often have a noticeable presence of mosquitoes and other insects, which can be quite bothersome.\\r\\n\\r\\n![i2](https://cdn.discordapp.com/attachments/1163847683207856178/1169636421653504181/IMG-20231102-WA0028.jpg?ex=65561fcd&is=6543aacd&hm=80c13d0241455119bd70d7da0f55a8aa8dbaeaecab329292e68d6b65c7111d9f&)\\r\\n\\r\\n- There isn\'t a designated area for changing your clothes, so you might need to step into a space within the washroom area for that purpose.\\r\\n\\r\\n![i3](https://cdn.discordapp.com/attachments/1163847683207856178/1169636437822541875/IMG-20231102-WA0029.jpg?ex=65561fd1&is=6543aad1&hm=1ab21129dd49fa7a1afe123fa3f18882adb7575249bb7b98abb4f0bf410156b1&)\\r\\n\\r\\n## Washrooms\\r\\n\\r\\n- This is the location where you can find the washrooms.\\r\\n\\r\\n![i4](https://cdn.discordapp.com/attachments/1163847683207856178/1169643959371444384/image.png?ex=655626d2&is=6543b1d2&hm=4789193fd3e68b2170628e68ba5484956b3b2d05c71582524745684759acec12&)\\r\\n\\r\\n- Let\'s take a closer look at the washrooms, shall we?\\r\\n\\r\\n![i5](https://cdn.discordapp.com/attachments/1163847683207856178/1169644280055336970/IMG-20231102-WA0031.jpg?ex=6556271f&is=6543b21f&hm=bc95c664349381ab9b2dc96b40e2c3c79787abdf682786791fd4003c52b0ad57&)\\r\\n\\r\\n![i6](https://cdn.discordapp.com/attachments/1163847683207856178/1169645702482251868/IMG-20231102-WA0042.jpg?ex=65562872&is=6543b372&hm=de70e53ca53f99cdb46920c012a7e8fd6b550a5032186dc33c487570abceff8c&)\\r\\n\\r\\n## Bathing Area\\r\\n\\r\\n- This is the designated area where you are supposed to wash yourself.\\r\\n\\r\\n![i7](https://cdn.discordapp.com/attachments/1163847683207856178/1169646400129224714/IMG-20231102-WA0033.jpg?ex=65562918&is=6543b418&hm=fb1667773d5a717d5edbfcb9c88ca8a66f99993172b699904ee092520c1a3059&)\\r\\n\\r\\n- It was too disgusting and repulsive to approach any closer.\\r\\n\\r\\n![i8](https://cdn.discordapp.com/attachments/1163847683207856178/1169647025600598016/IMG-20231102-WA0036.jpg?ex=655629ad&is=6543b4ad&hm=2a77c2d7cb7c4255d9df8e64616a4f95480164fba13d19450c08497735f2dee4&)\\r\\n\\r\\n## Flies\\r\\n\\r\\n- The three images below illustrate the location where shoes are taken off, which happens to be close to the area where food is served, and they also depict the significant presence of flies that are drawn to these shoes.\\r\\n\\r\\n![i9](https://cdn.discordapp.com/attachments/1163847683207856178/1169650507321716766/IMG-20231102-WA0054.jpg?ex=65562cec&is=6543b7ec&hm=82d592a6ab34c3889037c9dcd0f50cc952c1d664530edd5057b874fd8acb2072&)\\r\\n\\r\\n![i10](https://cdn.discordapp.com/attachments/1163847683207856178/1169650563475046551/IMG-20231102-WA0050.jpg?ex=65562cf9&is=6543b7f9&hm=37ae27e8ecbd1152f8d32f91dd1ddacf00a318f74c99cabb633deeb621a0b8aa&)\\r\\n\\r\\n![i11](https://cdn.discordapp.com/attachments/1163847683207856178/1169651321993965618/image.png?ex=65562dae&is=6543b8ae&hm=d543403fb9c29393f9edee5633a9d13c8dbdbfc6ada9ee8a2ec48dac3e312cc8&)\\r\\n\\r\\n- The images below reveal how these flies can end up on the food that the Buddhist devotees who dedicated their night to preparing it are expected to consume, and feel free to zoom in on the images to count the number of flies present on the food; it\'s important to note that when I approached the food items with my camera, a majority of the flies flew away, yet the remaining presence of flies remains quite concerning.\\r\\n\\r\\n![i12](https://cdn.discordapp.com/attachments/1163847683207856178/1169653231807377509/image.png?ex=65562f75&is=6543ba75&hm=cb9ccbc80cea42c1ea240ab596841196150416f92db7c933f579d161615965b4&)\\r\\n\\r\\n![i13](https://cdn.discordapp.com/attachments/1163847683207856178/1169654318010466314/image.png?ex=65563078&is=6543bb78&hm=d8a888e424f0c714192a9c81210abe44a714409e6c4263bdabdad5b616674ab7&)\\r\\n\\r\\n![i14](https://cdn.discordapp.com/attachments/1163847683207856178/1169654626564448297/image.png?ex=655630c2&is=6543bbc2&hm=42746599cca3532d6277daffe2d4721c1d528022f4ec08cb61b044e6ef98e6c8&)\\r\\n\\r\\n\\r\\n\\r\\n### Feacal-oral transmission\\r\\n\\r\\n![a1](https://ars.els-cdn.com/content/image/1-s2.0-S0048969720324360-gr1.jpg)\\r\\n\\r\\nFeacal-oral transmission of harmful bacteria like H. pylori and other common pathogens typically occurs when microscopic particles of fecal matter containing these bacteria come into contact with our mouth or are ingested through contaminated food or water. Flies can play a role in spreading these bacteria through a process known as mechanical transmission.\\r\\n\\r\\nFlies are known to be vectors for various bacteria, as they can land on and feed on a variety of substances, including feces, sewage, decaying organic matter, and even garbage. When flies come into contact with these sources, they can pick up bacteria, including H. pylori and other pathogens, on their bodies and mouthparts. If flies then land on uncovered food or surfaces that come into contact with food, they can transfer these bacteria, potentially leading to contamination.\\r\\n\\r\\nWhen people consume food that has been contaminated by flies carrying harmful bacteria, they can unknowingly introduce these pathogens into their digestive system. If proper food handling and hygiene practices are not maintained, it can increase the risk of infection. \\r\\n\\r\\nTo reduce the risk of fecal-oral transmission of harmful bacteria, it\'s essential to practice good hygiene, especially in food preparation and handling. This includes washing hands thoroughly with soap and water, maintaining clean and sanitary food storage and preparation areas, and protecting food from fly and insect contamination, such as by using food covers or keeping food covered when not in use. Proper cooking and thorough washing of fruits and vegetables can also help reduce the risk of bacterial infections.\\r\\n\\r\\n\\r\\n## References\\r\\n\\r\\n- [Extensive use of monosodium glutamate: A threat to public health by www.ncbi.nlm.nih.gov](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5938543)\\r\\n- [Faecal-oral transmission by sciencedirect.com](https://www.sciencedirect.com/science/article/pii/S0048969720324360)\\r\\n- [Fecal\u2013oral route Wikipedia Article](https://en.wikipedia.org/wiki/Fecal%E2%80%93oral_route)\\r\\n- [Helicobacter pylori (H. pylori) infection by mayoclinic.org](https://www.mayoclinic.org/diseases-conditions/h-pylori/symptoms-causes/syc-20356171)"},{"id":"2023-02-15-sri-lanka-rasitha-worm","metadata":{"permalink":"/blog/2023-02-15-sri-lanka-rasitha-worm","editUrl":"https://github.com/hirusha-adi/hirusha/edit/main/blog/2023-02-15-sri-lanka-rasitha-worm.md","source":"@site/blog/2023-02-15-sri-lanka-rasitha-worm.md","title":"Sri Lanka\u2019s Most Widespread Computer Virus- \u201cRasith.A Worm\u201d","description":"The Rasith.A worm propagates through removable devices. When an infected device is connected to a computer, the malware\u2019s hidden files execute without the user\u2019s knowledge or consent. The worm is self-replicating and steals sensitive system information, thereby continuing its spread. As a standalone malware program, a computer worm seeks to spread to other computers by self-replication.","date":"2023-02-15T00:00:00.000Z","formattedDate":"February 15, 2023","tags":[{"label":"hacking","permalink":"/blog/tags/hacking"},{"label":"windows","permalink":"/blog/tags/windows"},{"label":"malware","permalink":"/blog/tags/malware"}],"readingTime":4.196666666666666,"hasTruncateMarker":true,"authors":[{"name":"Hirusha Adikari","title":"Student interested in Tech","url":"https://github.com/hirusha-adi","imageURL":"https://avatars.githubusercontent.com/u/36286877?v=4","key":"hirusha"}],"frontMatter":{"slug":"2023-02-15-sri-lanka-rasitha-worm","title":"Sri Lanka\u2019s Most Widespread Computer Virus- \u201cRasith.A Worm\u201d","authors":["hirusha"],"tags":["hacking","windows","malware"]},"unlisted":false,"prevItem":{"title":"Unearthing the Na Uyana Monastery Temple - A Constructive Critique","permalink":"/blog/2023-11-02-na-uyana"},"nextItem":{"title":"SNI Spoofing Analysis","permalink":"/blog/2022-12-26-tcp-over-ssl-tunnel-sni-spoofing"}},"content":"The Rasith.A worm propagates through removable devices. When an infected device is connected to a computer, the malware\u2019s hidden files execute without the user\u2019s knowledge or consent. The worm is self-replicating and steals sensitive system information, thereby continuing its spread. As a standalone malware program, a computer worm seeks to spread to other computers by self-replication.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n\\r\\n- _( Please note that the \u201cWindows Error\u201d window image provided earlier is no longer functional and no longer appears due to compatibility issues with Windows 10 and 11. However, the worm\u2019s ability to spread through removable media drives still persists in Windows 10, but not in Windows 11. It is worth noting that many users may not even notice any changes in their removable media drive folders once it is infected. )_\\r\\n\\r\\nRegrettably, the Rasith.A worm has become a common and popular malware variant, with a significant impact on the government office computers in Sri Lanka. The worm shares similarities with the shortcut virus, which has also been widespread in Sri Lanka.\\r\\n\\r\\nThe Rasith.A worm exclusively targets Windows-based computers.\\r\\n\\r\\nA hidden file named kabe.exe is responsible for infecting a computer from within a pen drive. In some cases, all the folders on the device may be hidden, with malicious executables posing as normal Windows folders with a changed custom file icon. When the user attempts to open one of these folders, the file executes, and the folder appears to open as usual. This behavior is reminiscent of the shortcut virus.\\r\\n\\r\\n- With \u201cHide extensions for known filetypes\u201d enabled\\r\\n\\r\\n![img1](https://cdn-images-1.medium.com/max/1000/1*erAQl8aYa0ShGyQIyB54EQ.png)\\r\\n\\r\\n- With \u201cHide extensions for known filetypes\u201d disabled\\r\\n\\r\\n![img2](https://cdn-images-1.medium.com/max/1000/1*yLwlMNn3yWJB0iZzuFoWJA.png)\\r\\n\\r\\nNOTE: To see all the hidden files, run this command\\r\\n\\r\\n```\\r\\nattrib -h -r -s /s /d *.*\\r\\n```\\r\\n\\r\\nUpon executing, the Rasith.A worm generates an executable file called `msfold.exe` at `C:\\\\Users\\\\admin\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\msfold.exe`. Once this file runs for the first time, it creates a copy of itself at `C:\\\\Users\\\\admin\\\\AppData\\\\Local\\\\Temp\\\\explorer.exe`, giving itself the same name as a legitimate system process (explorer.exe) and blending in with other processes in the Task Manager.\\r\\n\\r\\nThe worm also creates two superfluous temporary files at `C:\\\\Users\\\\admin\\\\AppData\\\\Local\\\\Temp`. Although these files appear to be useless, they are nonetheless generated every time the worm executes.\\r\\n\\r\\nThe Rasith.A worm creates or modifies an AUTORUN.INF file in the removable media drive. This file is hidden, and its contents are as follows:\\r\\n\\r\\n```\\r\\n[AutoRun]\\r\\naction=Open\\r\\nshell\\\\execute=kabe.bat\\r\\nshell\\\\explore\\\\command=kabe.bat\\r\\nUSEAUTOPLAY=1\\r\\nshell\\\\Open\\\\command=kabe.bat\\r\\nshell\\\\Autorun\\\\command=kabe.bat\\r\\nshell\\\\Search\\\\command=kabe.bat\\r\\n```\\r\\n\\r\\nThese settings indicate that the worm aims to run the kabe.bat file. When executed, the kabe.bat file launches `kabe.exe`, which subsequently triggers the worm\u2019s full activation.\\r\\n\\r\\nThe new `explorer.exe` file generated by the Rasith.A worm temporarily creates a SQLite3 database file at `C:\\\\Users\\\\admin\\\\AppData\\\\Local\\\\Temp\\\\sajith_and_rasini.db`. Another database file with the name `i_love_you_rasini.db` can also be observed. It is unclear why these two files are generated, but they may be intended to mislead the user. However, given the nature of the worm, the purpose behind these files is uncertain.\\r\\n\\r\\nTo summarize the actions of the Rasith.A worm, the malware performs the following tasks:\\r\\n\\r\\n- Drops the executable file immediately after the start\\r\\n- Writes to the Start menu file\\r\\n- Drops a file with too old compile date\\r\\n- Starts itself from another location\\r\\n- Executable content was dropped or overwritten\\r\\n- The process creates files with names similar to system file names\\r\\n- Creates executable files that already exist in Windows\\r\\n- Creates files or folders in the user directory\\r\\n- Reads the computer name\\r\\n- Reads the machine GUID from the registry\\r\\n- The process checks LSA protection\\r\\n- Create files in a temporary directory\\r\\n- Checks supported languages\\r\\n\\r\\n- Registry Access\\r\\n\\r\\n```\\r\\nPath: \\"\\\\REGISTRY\\\\MACHINE\\\\SYSTEM\\\\CONTROLSET001\\\\CONTROL\\\\COMPUTERNAME\\\\ACTIVECOMPUTERNAME\\", Key: \\"COMPUTERNAME\\"\\r\\nPath: \\"\\\\REGISTRY\\\\MACHINE\\\\SOFTWARE\\\\MICROSOFT\\\\CRYPTOGRAPHY\\", Key: \\"MACHINEGUID\\"\\r\\n```\\r\\n\\r\\n- Reads Configuration Files\\r\\n\\r\\n```\\r\\nread file \\"C:\\\\Users\\\\desktop.ini\\"\\r\\nread file \\"C:\\\\Users\\\\%USERNAME%\\\\desktop.ini\\"\\r\\nread file \\"C:\\\\Users\\\\%USERNAME%\\\\Desktop\\\\desktop.ini\\"\\r\\nread file \\"%ALLUSERSPROFILE%\\\\Microsoft\\\\Windows\\\\Start Menu\\\\desktop.ini\\"\\r\\nread file \\"C:\\\\Users\\\\%USERNAME%\\\\Desktop\\\\desktop.ini\\"\\r\\n```\\r\\n\\r\\n- Creates files in windows directory\\r\\n\\r\\n```\\r\\ncreated file \\"C:\\\\Windows\\\\Globalization\\\\Sorting\\\\sortdefault.nls\\"\\r\\ncreated file \\"C:\\\\Windows\\\\system32\\\\rsaenh.dll\\"\\r\\ncreated file \\"C:\\\\Windows\\\\Fonts\\\\staticcache.dat\\"\\r\\ncreated file \\"C:\\\\Windows\\\\system32\\\\wshom.ocx\\"\\r\\ncreated file \\"C:\\\\Users\\\\%USERNAME%\\\\AppData\\\\Local\\\\Microsoft\\\\Windows\\\\Caches\\"\\r\\ncreated file \\"C:\\\\Users\\\\%USERNAME%\\\\AppData\\\\Local\\\\Microsoft\\\\Windows\\\\Caches\\\\cversions.1.db\\"\\r\\ncreated file \\"C:\\\\Users\\\\%USERNAME%\\\\AppData\\\\Local\\\\Microsoft\\\\Windows\\\\Caches\\\\{AFBF9F1A-8EE8\u20134C77-AF34-C647E37CA0D9}.1.ver0x0000000000000006.db\\"\\r\\ncreated file \\"%ALLUSERSPROFILE%\\\\Microsoft\\\\Windows\\\\Start Menu\\"\\r\\ncreated file \\"C:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\desktop.ini\\"\\r\\n```\\r\\n\\r\\n- Drops executable files\\r\\n\\r\\n```\\r\\n\\"explorer.exe\\" has type \\"PE32 executable (GUI) Intel 80386, for MS Windows\\"\\r\\n\\"msfold.exe\\" has type \\"PE32 executable (GUI) Intel 80386, for MS Windows\\"\\r\\n```\\r\\n\\r\\n- Potential URL found in binary/memory\\r\\n\\r\\n```\\r\\nEmail - allosfix@hotmail.com\\r\\n```\\r\\n\\r\\nHere\u2019s a professional version of the text you provided:\\r\\n\\r\\nThe Rasith.A worm is associated with the email address `allosfix@hotmail.com`. The malware was originally developed using VB 6, an older programming language, and was detected by antivirus software at the time of its initial release. However, it appears to have evaded detection in recent years for unknown reasons.\\r\\n\\r\\nTo remove the Rasith.A worm from your computer, follow these steps:\\r\\n\\r\\n1. Restart your computer in safe mode\\r\\n2. Locate the following files and delete them:\\r\\n\\r\\n   - `C:\\\\Users\\\\admin\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\msfold.exe`\\r\\n   - `C:\\\\Users\\\\admin\\\\AppData\\\\Local\\\\Temp\\\\sajith_and_rasini.db`\\r\\n   - `C:\\\\Users\\\\admin\\\\AppData\\\\Local\\\\Temp\\\\i_love_you_rasini.db`\\r\\n\\r\\nUpon decompiling the Rasith.A worm with [VB Decompiler Lite v12](https://www.vb-decompiler.org/download.htm), it was discovered that the file is actually named \u201cK Abe\u201d, rather than \u201ckabe\u201d as initially believed. The naming convention, coupled with the creation of the `.db` files with names such as `sajith_and_rasini.db` and `i_love_you_rasini.db`, suggests a Sri Lankan origin for the malware creator. However, it is important to note that definitive conclusions about the creator\u2019s nationality cannot be drawn with certainty when analyzing malware.\\r\\n\\r\\n- its called `K Abe` and not `kabe`\\r\\n\\r\\n![img69](https://cdn-images-1.medium.com/max/1000/1*0N9yAbBkNJsvs3StvGsZuA.png)\\r\\n\\r\\n- The form that you get promptet with, made with Visual Basics 6 (this is what you got prompted with, this doesnt work anymore)\\r\\n\\r\\n![img67](https://cdn-images-1.medium.com/max/1000/1*0jwSB6ZsTf9f1N8afkmWjw.png)\\r\\n\\r\\nIt is notable that the attacker is only asking for a ransom of $4, which is a relatively small amount. This could be an indication that the attacker is not particularly skilled or motivated, or that they are specifically targeting low-value targets, or maybe he\u2019s from a country where 4$ is a huge amount. Alternatively, it could be a deliberate attempt to avoid attracting too much attention or to make the ransom demand more likely to be paid. Nonetheless, regardless of the amount requested, it is important to never pay a ransom to attackers, as it encourages their criminal activities and does not guarantee that access to the infected system will be restored.\\r\\n\\r\\nThe decompiled file project information reveals the following details:\\r\\n\\r\\n```\\r\\nType=Exe\\r\\nReference=*\\\\G{00020430-0000-0000-C000-000000000046}#2.0#0#..\\\\..\\\\..\\\\..\\\\WINDOWS\\\\SYSTEM32\\\\STDOLE2.TLB#OLE Automation\\r\\nForm=Form1.frm\\r\\nModule=Module1; Module1.bas\\r\\nClass=clsMD5; clsMD5.cls\\r\\nForm=frm_lock.frm\\r\\nModule=Module2; Module2.bas\\r\\nStartup=\\"Form1\\"\\r\\nIconForm=\\"Form1\\"\\r\\nHelpFile=\\"\\"\\r\\nExeName32=\\"sajith.exe\\"\\r\\nName=\\"Project1\\"\\r\\nTitle=\\"sajith\\"\\r\\nVersionCompanyName=\\"Folders\\"\\r\\nMajorVer=1\\r\\nMinorVer=00\\r\\nRevisionVer=0\\r\\nCommand32 = \\"\\"\\r\\nHelpContextID = \\"0\\"\\r\\nCompatibleMode = \\"0\\"\\r\\nAutoIncrementVer = 0\\r\\nServerSupportFiles = 0\\r\\nCompilationType = 0\\r\\nOptimizationType = 0\\r\\nFavorPentiumPro(tm) = 0\\r\\nCodeViewDebugInfo = 0\\r\\nNoAliasing = 0\\r\\nBoundsCheck = 0\\r\\nOverflowCheck = -1\\r\\nFlPointCheck = 0\\r\\nFDIVCheck = 0\\r\\nUnroundedFP = 0\\r\\nStartMode = 0\\r\\nUnattended = 0\\r\\nRetained = 0\\r\\nThreadPerObject = 0\\r\\nMaxNumberOfThreads = 1\\r\\n\\r\\n[MS Transaction Server]\\r\\nAutoRefresh = 1\\r\\n\\r\\n[VB Decompiler]\\r\\nBuild = 12.0.8439.29532\\r\\nDate = 2/15/2023\\r\\n```\\r\\n\\r\\n- Additional images of infected computers:\\r\\n\\r\\n![img71](https://cdn-images-1.medium.com/max/1000/1*BFP9rALVsVq-Y1uH2nYgOQ.png)\\r\\n![img72](https://cdn-images-1.medium.com/max/1000/1*NpCwcT271tymbu8QUz5E_g.jpeg)\\r\\n\\r\\nUpon investigation, it is evident that the malware attempts to access the IPv4 address of 20.99.184.37, which is owned by Microsoft. This suggests that the attacker utilized a Microsoft Azure server as a command and control center to manage the worm and collect the $4 ransom. Further details regarding the IP address can be found at here. It is worth noting that Microsoft has already taken this down.\\r\\n\\r\\nAs this is an older program, its functionality may not work as intended by the attacker on modern computers and newer operating systems. However, despite any limitations, the program is designed to continue running and spreading.\\r\\n\\r\\nSources:\\r\\n\\r\\n- [any.run report](https://any.run/report/260d745e60019fb56f6d04be30285efe25db08d2dd64acefe1afe092e5f5b46f/cde60de9-16a1-4b3f-b37f-3d8d5f661573)\\r\\n\\r\\n- [any.run analysis](https://app.any.run/tasks/cde60de9-16a1-4b3f-b37f-3d8d5f661573/)\\r\\n\\r\\n- [VirusTotal analysis](https://www.virustotal.com/gui/file/260d745e60019fb56f6d04be30285efe25db08d2dd64acefe1afe092e5f5b46f/detection)\\r\\n\\r\\n- [VirusTotal Generated Graph](https://www.virustotal.com/graph/260d745e60019fb56f6d04be30285efe25db08d2dd64acefe1afe092e5f5b46f)\\r\\n\\r\\n- [Trend Micro](https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/worm_rasith.a)\\r\\n\\r\\n- [Hybrid Analysis](https://www.hybrid-analysis.com/sample/31c425084a6b932b36b8b588888ca631c9f2fc50a89e880da748ac59325304f1/562467cf0e316d6b77fccf3f)\\r\\n\\r\\n- [this Canon\u2019s website](https://eset-info.canon-its.jp/files/user/html/info/virusinfo/list/vr_win32_rasith_a.html)"},{"id":"2022-12-26-tcp-over-ssl-tunnel-sni-spoofing","metadata":{"permalink":"/blog/2022-12-26-tcp-over-ssl-tunnel-sni-spoofing","editUrl":"https://github.com/hirusha-adi/hirusha/edit/main/blog/2022-12-26-sni-spoofing.md","source":"@site/blog/2022-12-26-sni-spoofing.md","title":"SNI Spoofing Analysis","description":"TCP over SSL tunneling is a technique for encapsulating normal TCP traffic within SSL/TLS encryption. This can be used to secure network communication and protect against man-in-the-middle attacks.","date":"2022-12-26T00:00:00.000Z","formattedDate":"December 26, 2022","tags":[{"label":"python","permalink":"/blog/tags/python"},{"label":"network","permalink":"/blog/tags/network"},{"label":"hacking","permalink":"/blog/tags/hacking"}],"readingTime":6.59,"hasTruncateMarker":true,"authors":[{"name":"Hirusha Adikari","title":"Student interested in Tech","url":"https://github.com/hirusha-adi","imageURL":"https://avatars.githubusercontent.com/u/36286877?v=4","key":"hirusha"}],"frontMatter":{"slug":"2022-12-26-tcp-over-ssl-tunnel-sni-spoofing","title":"SNI Spoofing Analysis","authors":["hirusha"],"tags":["python","network","hacking"]},"unlisted":false,"prevItem":{"title":"Sri Lanka\u2019s Most Widespread Computer Virus- \u201cRasith.A Worm\u201d","permalink":"/blog/2023-02-15-sri-lanka-rasitha-worm"}},"content":"TCP over SSL tunneling is a technique for encapsulating normal TCP traffic within SSL/TLS encryption. This can be used to secure network communication and protect against man-in-the-middle attacks.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n![TCP Over SSL Tunnel Software](https://cdn-images-1.medium.com/v2/resize:fit:880/0*ls1-d3UfIMvyvPf0)\\r\\n\\r\\nServer Name Indication (SNI) is an extension to the TLS protocol that allows a client to specify the domain name it is connecting to at the start of the handshake process. This enables a server to host multiple TLS-based websites on a single IP address and port, as the server can use the SNI information to determine which certificate to present to the client.\\r\\n\\r\\nSNI injection involves manipulating the SNI field in the TLS handshake process in order to trick the server into presenting a different certificate than the one it would normally present. This can be used in various ways, such as to bypass certificate-based access controls or to perform man-in-the-middle attacks.\\r\\n\\r\\nIn the context of TCP over SSL tunneling, SNI injection can be used to bypass controls that are based on the domain name being accessed. For example, if a client is using an SSL tunnel to access a specific domain, the server may only allow access if the SNI field in the TLS handshake matches that domain. By injecting a different domain name into the SNI field, the client may be able to bypass these controls and gain access to the server even if it is not normally allowed.\\r\\n\\r\\nIt is important to note that SNI injection can be a serious security vulnerability and should be properly mitigated to prevent exploitation.\\r\\n\\r\\nThe SNI (Server Name Indication) header is an extension to the TLS (Transport Layer Security) protocol that allows a client to specify the desired server name during the SSL/TLS handshake. This is typically used to identify the server that the client wants to connect to when multiple servers are hosted on the same IP address.\\r\\n\\r\\nHere is the wireshark output of the extension:\\r\\n\\r\\n```\\r\\nExtension: server_name (len=24)\\r\\nType: server_name (0)\\r\\nLength: 24\\r\\nServer Name Indication extension\\r\\nServer Name list length: 22\\r\\nServer Name Type: host_name (0)\\r\\nServer Name length: 19\\r\\nServer Name: clients5.google.com\\r\\n```\\r\\n\\r\\nSpoofing the SNI header involves sending a forged SNI value to the server during the SSL/TLS handshake. This can be done by specifying a different server name when creating the SSL context on the client side. For example, if the client wants to connect to www.example.com, but wants to spoof the SNI header to say www.spoofed-sni.com, it can do so by specifying www.spoofed-sni.com as the server name when creating the SSL context.\\r\\n\\r\\nThere are a few reasons why someone might want to spoof the SNI header. One reason is to bypass network restrictions that are based on the server name. For example, if a client is blocked from accessing www.example.com, but is allowed to access www.spoofed-sni.com, it can use SNI spoofing to bypass the restriction. Another reason is to perform SSL strip attacks, where an attacker intercepts and downgrades secure connections to non-secure connections in order to steal sensitive information.\\r\\n\\r\\nIt\u2019s important to note that spoofing the SNI header does not necessarily guarantee a successful connection to the desired server. The server may still perform checks to verify the authenticity of the client and the connection, and may reject the connection if it determines that the client is not legitimate.\\r\\n\\r\\nOriginal Code: [Click here.](https://sourceforge.net/p/tcpoverssltunnel/code-0/ci/master/tree/client.py#l10)\\r\\n\\r\\n```python\\r\\nimport socket, threading, select\\r\\n\\r\\nSNI_HOST = \'www.example.com\'\\r\\nLISTEN_PORT = 8088\\r\\n\\r\\n\\r\\ndef conecta(c, a):\\r\\n\\tprint(\'<#> Cliente {} recebido!\'.format(a[-1]))\\r\\n\\trequest = c.recv(8192)\\r\\n\\r\\n\\thost = request.split(\':\')[0].split()[-1]\\r\\n\\tport = request.split(\':\')[-1].split()[0]\\r\\n\\r\\n\\r\\n\\ts = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\\r\\n\\ts.connect((str(host), int(port)))\\r\\n\\r\\n\\t# Wrap o SSL.\\r\\n\\timport ssl\\r\\n\\tctx = ssl.SSLContext(ssl.PROTOCOL_SSLv23)\\r\\n\\ts = ctx.wrap_socket(s, server_hostname=str(SNI_HOST))\\r\\n\\r\\n\\t# Direta\\r\\n\\tc.send(b\\"HTTP/1.1 200 Established\\\\r\\\\n\\\\r\\\\n\\")\\r\\n\\r\\n\\r\\n\\r\\n\\tconnected = True\\r\\n\\twhile connected == True:\\r\\n\\t\\tr, w, x = select.select([c,s], [], [c,s], 3)\\r\\n\\t\\tif x: connected = False; break\\r\\n\\t\\tfor i in r:\\r\\n\\t\\t\\ttry:\\r\\n\\t\\t\\t\\t# Break if not data.\\r\\n\\t\\t\\t\\tdata = i.recv(8192)\\r\\n\\t\\t\\t\\tif not data: connected = False; break\\r\\n\\t\\t\\t\\tif i is s:\\r\\n\\t\\t\\t\\t\\t# Download.\\r\\n\\t\\t\\t\\t\\tc.send(data)\\r\\n\\t\\t\\t\\telse:\\r\\n\\t\\t\\t\\t\\t# Upload.\\r\\n\\t\\t\\t\\t\\ts.send(data)\\r\\n\\t\\t\\texcept:\\r\\n\\t\\t\\t\\tconnected = False\\r\\n\\t\\t\\t\\tbreak\\r\\n\\tc.close()\\r\\n\\ts.close()\\r\\n\\tprint(\'<#> Cliente {} Desconectado!\'.format(a[-1]))\\r\\n\\r\\n\\r\\n# Listen\\r\\nprint(\'Injector SSL com SNI Host em Python\\\\n\\\\\\r\\nVersao de Teste.\\\\n\\\\\\r\\nCriado por Marcone.\\\\n\')\\r\\nl = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\\r\\nl.bind((\'\', int(LISTEN_PORT)))\\r\\nl.listen(0)\\r\\nprint(\'Esperando Cliente no Ip e Porta: 127.0.0.1:{}\\\\n\'.format(LISTEN_PORT))\\r\\nwhile True:\\r\\n\\tc, a = l.accept()\\r\\n\\tthreading.Thread(target=conecta, args=(c, a)).start()\\r\\nl.close()\\r\\n```\\r\\n\\r\\nThis Python code appears to be a simple implementation of a Secure Sockets Layer (SSL) injector with Server Name Indication (SNI) host.\\r\\n\\r\\nThe code starts by importing the socket, threading, and select modules. The SNI_HOST and LISTEN_PORT variables are then defined at the beginning of the script. The SNI_HOST variable specifies the hostname that the client will be requesting a secure connection to, while the LISTEN_PORT variable specifies the port number that the injector will be listening on for incoming connection requests.\\r\\n\\r\\nThe conecta() function is then defined, which takes two arguments: c and a. This function is called whenever a new client connects to the injector. The function begins by printing a message indicating that a new client has connected, and then it receives a request from the client using the recv() method of the c socket object.\\r\\n\\r\\nThe host and port specified in the client\u2019s request are then extracted from the request using the split() method, and a new socket connection is established to the specified host and port using the connect() method of the socket module.\\r\\n\\r\\nThe new socket connection is then wrapped in an SSL context using the wrap_socket() method of the ssl module, and the SNI_HOST variable is passed as the server_hostname argument to the wrap_socket() method.\\r\\n\\r\\nThe conecta() function then sends an HTTP \\"200 Established\\" response to the client, and enters a loop to continually receive data from either the client or the server and send it to the other party. The loop terminates when either the client or the server closes the connection.\\r\\n\\r\\nFinally, the conecta() function closes both the client and server sockets and prints a message indicating that the client has been disconnected.\\r\\n\\r\\nThe main body of the script then creates a new socket using the socket module\'s socket() function and binds it to the LISTEN_PORT on the local host. The socket is then set to listen for incoming connection requests using the listen() method.\\r\\n\\r\\nThe script enters an infinite loop, waiting for new clients to connect using the accept() method of the listening socket. Whenever a new client connects, a new thread is created to handle the connection using the conecta() function as the target, and the client socket and address are passed as arguments.\\r\\n\\r\\nFinally, the listening socket is closed when the script terminates.\\r\\n\\r\\nIt looks like this code could potentially be used for SNI spoofing, which is a technique that involves presenting a fake SSL certificate to a client in order to intercept and decrypt the client\u2019s traffic.\\r\\n\\r\\nIt is possible that you could use this code to trick your Internet Service Provider (ISP) into believing that you are accessing a different hostname than the one you are actually accessing. However, keep in mind that this code alone is not sufficient to fully trick your ISP.\\r\\n\\r\\nTo trick your ISP using this code, you would need to set up a fake SSL certificate for the hostname that you want to spoof, and configure the injector to use this certificate when establishing the SSL connection with your ISP. You would also need to configure your device to send all of your network traffic through the injector, rather than directly to the Internet.\\r\\n\\r\\nTo use this code for SNI spoofing, you would need to modify the SNI_HOST variable to specify the hostname that you want to spoof. You would then need to set up a fake SSL certificate for this hostname, and configure the injector to use this certificate when establishing the SSL connection with the client.\\r\\n\\r\\n```python\\r\\nimport socket\\r\\nimport ssl\\r\\n\\r\\n# Create a socket and bind it to a port\\r\\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\\r\\nsock.bind((\'localhost\', 8080))\\r\\nsock.listen()\\r\\n\\r\\n# Accept incoming connections\\r\\nconn, addr = sock.accept()\\r\\n\\r\\n# Wrap the socket in an SSL context\\r\\ncontext = ssl.create_default_context()\\r\\nssl_sock = context.wrap_socket(conn, server_side=True)\\r\\n\\r\\n# Read data from the SSL socket and send it through the tunnel\\r\\ndata = ssl_sock.read()\\r\\ntunnel_sock = socket.create_connection((\'www.example.com\', 443))\\r\\ntunnel_sock.sendall(data)\\r\\n\\r\\n# Read the response from the tunnel and send it back to the client\\r\\nresponse = tunnel_sock.recv(4096)\\r\\nssl_sock.sendall(response)\\r\\n\\r\\n# Close the sockets\\r\\nssl_sock.close()\\r\\ntunnel_sock.close()\\r\\n```\\r\\n\\r\\nThis code creates a socket and binds it to the localhost on port 8080. It then listens for incoming connections and accepts them when they arrive. The incoming connection is then wrapped in an SSL context and the data from the connection is read. The data is then sent through a tunnel to the destination server (www.example.com on port 443 in this example). The response from the destination server is read and sent back to the client through the SSL socket. Finally, the sockets are closed.\\r\\n\\r\\nTo spoof the SNI (Server Name Indication) header, you can use the ssl_sock.server_hostname attribute to specify the desired SNI value when creating the SSL context. For example:\\r\\n\\r\\n```\\r\\ncontext = ssl.create_default_context()\\r\\ncontext.check_hostname = False\\r\\ncontext.verify_mode = ssl.CERT_NONE\\r\\nssl_sock = context.wrap_socket(conn, server_side=True, server_hostname=\'www.spoofed-sni.com\')\\r\\n```\\r\\n\\r\\nThis will cause the SNI header to be sent with the value \u2018www.spoofed-sni.com\' when the SSL handshake is performed.\\r\\n\\r\\nFirst, the socket and ssl modules are imported. These modules provide the necessary functions for creating sockets and wrapping them in SSL contexts.\\r\\n\\r\\n```\\r\\nimport socket\\r\\nimport ssl\\r\\n```\\r\\n\\r\\nNext, a socket is created and bound to the localhost on port 8080. The socket is then put into listening mode to wait for incoming connections.\\r\\n\\r\\n```\\r\\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\\r\\nsock.bind((\'localhost\', 8080))\\r\\nsock.listen()\\r\\n```\\r\\n\\r\\nWhen an incoming connection is received, it is accepted and stored in the conn variable along with the address of the client in the addr variable\\r\\n\\r\\n```\\r\\nconn, addr = sock.accept()\\r\\n```\\r\\n\\r\\nThe incoming connection is then wrapped in an SSL context using the wrap_socket function. This function takes the connection as an argument and returns an SSL socket object. The server_side argument is set to True to indicate that the socket will be used to accept connections from clients.\\r\\n\\r\\n```\\r\\ncontext = ssl.create_default_context()\\r\\nssl_sock = context.wrap_socket(conn, server_side=True)\\r\\n```\\r\\n\\r\\nThe data from the SSL socket is read using the read function and stored in the data variable.\\r\\n\\r\\n```\\r\\ndata = ssl_sock.read()\\r\\n```\\r\\n\\r\\nA connection is then established with the destination server using the create_connection function from the socket module. This function takes the address of the destination server as an argument and returns a socket object that can be used to send and receive\\r\\n\\r\\n```\\r\\ntunnel_sock = socket.create_connection((\'www.example.com\', 443))\\r\\n```\\r\\n\\r\\nThe data that was read from the SSL socket is then sent through the tunnel to the destination server using the sendall function.\\r\\n\\r\\n```\\r\\ntunnel_sock.sendall(data)\\r\\n```\\r\\n\\r\\nThe response from the destination server is read using the recv function and stored in the response variable.\\r\\n\\r\\n```\\r\\nresponse = tunnel_sock.recv(4096)\\r\\n```\\r\\n\\r\\nThe response is then sent back to the client through the SSL socket using the sendall function.\\r\\n\\r\\n```\\r\\nssl_sock.sendall(response)\\r\\n```\\r\\n\\r\\nFinally, both the SSL socket and the tunnel socket are closed using the close function.\\r\\n\\r\\n```\\r\\nssl_sock.close()\\r\\ntunnel_sock.close()\\r\\n```\\r\\n\\r\\nIn conclusion, it is possible to create a TCP over SSL tunnel using Python\u2019s ssl module. This can be useful for encrypting network traffic and bypassing network restrictions. The SNI (Server Name Indication) header can also be spoofed by specifying a different server name when creating the SSL context on the client side. While SNI spoofing can be used for legitimate purposes, it can also be used for malicious purposes such as bypassing network restrictions or performing SSL strip attacks. It\'s important to be aware of the potential risks and use SNI spoofing responsibly.\\r\\n\\r\\nReferences:\\r\\n\\r\\n- [Bypassing Content-based internet packages with an SSL/TLS Tunnel, SNI Spoofing, and DNS spoofing by Shanaka Anuradha Samarakoon](https://arxiv.org/ftp/arxiv/papers/2212/2212.05447.pdf)\\r\\n- [Efficiently Bypassing SNI-based HTTPS Filtering by Wazen M. Shbair, Thibault Cholez, Antoine Goichot, Isabelle Chrisment](https://hal.inria.fr/hal-01202712/document)"}]}')}}]);