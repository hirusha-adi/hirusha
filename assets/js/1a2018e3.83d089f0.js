"use strict";(self.webpackChunkhirusha=self.webpackChunkhirusha||[]).push([[4149],{86291:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>n,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var o=t(11527),a=t(56213);const s={title:"Exam Style Questions - File processing and exception handling",sidebar_label:"ESQ",slug:"esq",sidebar_position:2},n=void 0,i={id:"study/cie_al/computer_science/paper_4/my_study_notes/chapter_26/esq",title:"Exam Style Questions - File processing and exception handling",description:"Tasks",source:"@site/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_26/esq.md",sourceDirName:"study/cie_al/computer_science/paper_4/my_study_notes/chapter_26",slug:"/study/cie_al/computer_science/paper_4/my_study_notes/chapter_26/esq",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_26/esq",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Exam Style Questions - File processing and exception handling",sidebar_label:"ESQ",slug:"esq",sidebar_position:2},sidebar:"study",previous:{title:"Notes",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_26/notes"},next:{title:"Pickles",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_26/pickles"}},d={},c=[{value:"Task 26.01",id:"task-2601",level:4},{value:"1 Write a complete program to save several car records to a sequential file.",id:"1-write-a-complete-program-to-save-several-car-records-to-a-sequential-file",level:4},{value:"2 Write another program to read the file and display the contents on screen.",id:"2-write-another-program-to-read-the-file-and-display-the-contents-on-screen",level:4},{value:"Task 26.01",id:"task-2601-1",level:4},{value:"Write a complete program to save several car records to a random-access file. Write another program to find a record in the random-access file using the record key. Display the record data on screen.",id:"write-a-complete-program-to-save-several-car-records-to-a-random-access-file-write-another-program-to-find-a-record-in-the-random-access-file-using-the-record-key-display-the-record-data-on-screen",level:4},{value:"Question 1",id:"question-1",level:2},{value:"A company stores details about their customers in a binary file of records.",id:"a-company-stores-details-about-their-customers-in-a-binary-file-of-records",level:4},{value:"The key field of a customer record is the customer ID (a number between 100001 and 999999).",id:"the-key-field-of-a-customer-record-is-the-customer-id-a-number-between-100001-and-999999",level:4},{value:"The name of the customer is stored in a 30-character field.",id:"the-name-of-the-customer-is-stored-in-a-30-character-field",level:4},{value:"The customer\u2019s telephone number is stored in a 14-character field.",id:"the-customers-telephone-number-is-stored-in-a-14-character-field",level:4},{value:"The total value of orders so far is stored in a currency (decimal) field.",id:"the-total-value-of-orders-so-far-is-stored-in-a-currency-decimal-field",level:4},{value:"i Write the declaration statement for the record data type CustomerRecord required to store the data. Write program code. [6]",id:"i-write-the-declaration-statement-for-the-record-data-type-customerrecord-required-to-store-the-data-write-program-code-6",level:4},{value:"ii Write the declaration statement for an array CustomerData[0 : 999] to store customer records. [2]",id:"ii-write-the-declaration-statement-for-an-array-customerdata0--999-to-store-customer-records-2",level:4},{value:"b The array CustomerData is to be used as a hash table to store customer records. The function Hash is used to calculate the address where a record is to be stored.",id:"b-the-array-customerdata-is-to-be-used-as-a-hash-table-to-store-customer-records-the-function-hash-is-used-to-calculate-the-address-where-a-record-is-to-be-stored",level:4},{value:"i Write program code to implement the function Hash.",id:"i-write-program-code-to-implement-the-function-hash",level:4},{value:"ii Write a procedure AddRecord(Customer : CustomerRecord) to add a customer record to the hash table CustomerData. Your solution should handle collisions by using the next available slot in the hash table.",id:"ii-write-a-procedure-addrecordcustomer--customerrecord-to-add-a-customer-record-to-the-hash-table-customerdata-your-solution-should-handle-collisions-by-using-the-next-available-slot-in-the-hash-table",level:4},{value:"iii Write a function FindRecord(CustomerID : INTEGER) that returns the index of the hash table slot where the record for the customer with CustomerID is stored.",id:"iii-write-a-function-findrecordcustomerid--integer-that-returns-the-index-of-the-hash-table-slot-where-the-record-for-the-customer-with-customerid-is-stored",level:4},{value:"c Before the program stops, the hash table records must be stored in a sequential file, so that the records can be restored to the array when the program is re-entered. Write program code to store the records of the array CustomerData sequentially into a binary file CustomerData.DAT",id:"c-before-the-program-stops-the-hash-table-records-must-be-stored-in-a-sequential-file-so-that-the-records-can-be-restored-to-the-array-when-the-program-is-re-entered-write-program-code-to-store-the-records-of-the-array-customerdata-sequentially-into-a-binary-file-customerdatadat",level:4},{value:"Instead of using a hash table, the company decide they want to store customer records in a direct-access binary file. Explain what changes need to be made to your program to do this",id:"instead-of-using-a-hash-table-the-company-decide-they-want-to-store-customer-records-in-a-direct-access-binary-file-explain-what-changes-need-to-be-made-to-your-program-to-do-this",level:4},{value:"Question 2",id:"question-2",level:2},{value:"A program allows a user to enter a filename for accessing a data file. If the user types in a filename that does not exist, the program crashes. Write program code that includes exception handling to replace the following pseudocode: [5]",id:"a-program-allows-a-user-to-enter-a-filename-for-accessing-a-data-file-if-the-user-types-in-a-filename-that-does-not-exist-the-program-crashes-write-program-code-that-includes-exception-handling-to-replace-the-following-pseudocode-5",level:4}];function l(e){const r={code:"code",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components},{Details:t}=r;return t||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Tasks"}),(0,o.jsx)(r.h4,{id:"task-2601",children:"Task 26.01"}),(0,o.jsx)(r.h4,{id:"1-write-a-complete-program-to-save-several-car-records-to-a-sequential-file",children:"1 Write a complete program to save several car records to a sequential file."}),(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-python",children:"import pickle\n\nclass CarRecord:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n\n# Function to save car records to a file\ndef save_car_records(records, filename):\n    with open(filename, 'wb') as file:\n        pickle.dump(records, file)\n\n# Sample car records\ncar_records = [\n    CarRecord('Toyota', 'Camry', 2022),\n    CarRecord('Honda', 'Accord', 2021),\n    CarRecord('Ford', 'Mustang', 2020)\n]\n\n# Save car records to a file\nsave_car_records(car_records, 'car_records.pkl')\n"})}),(0,o.jsx)(r.h4,{id:"2-write-another-program-to-read-the-file-and-display-the-contents-on-screen",children:"2 Write another program to read the file and display the contents on screen."}),(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-python",children:"import pickle\n\nclass CarRecord:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n\n# Function to read and display car records from a file\ndef read_and_display_car_records(filename):\n    with open(filename, 'rb') as file:\n        car_records = pickle.load(file)\n\n        # Display car records\n        print(\"Car Records:\")\n        for record in car_records:\n            print(f\"Make: {record.make}, Model: {record.model}, Year: {record.year}\")\n\n# Read and display car records from the file\nread_and_display_car_records('car_records.pkl')\n"})}),(0,o.jsx)(r.h4,{id:"task-2601-1",children:"Task 26.01"}),(0,o.jsx)(r.h4,{id:"write-a-complete-program-to-save-several-car-records-to-a-random-access-file-write-another-program-to-find-a-record-in-the-random-access-file-using-the-record-key-display-the-record-data-on-screen",children:"Write a complete program to save several car records to a random-access file. Write another program to find a record in the random-access file using the record key. Display the record data on screen."}),(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Save Car Records to a Random-Access File"}),"\n"]}),(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-python",children:"import pickle\n\nclass CarRecord:\n    def __init__(self, VehicleID, make, model, year):\n        self.VehicleID = VehicleID\n        self.make = make\n        self.model = model\n        self.year = year\n\n# Function to save car records to a random-access file\ndef save_car_records(records, filename):\n    with open(filename, 'wb') as file:\n        for record in records:\n            pickle.dump(record, file)\n\n# sample car records\ncar_records = [\n    CarRecord('1A123', 'Toyota', 'Prius', 2023),\n    CarRecord('2B456', 'Honda', 'Vezel', 2022),\n    CarRecord('3C789', 'Ford', 'Mustang', 2021)\n]\n\n# Save car records to a random-access file\nsave_car_records(car_records, 'car_records.dat')\n"})}),(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Find and Display a Record in the Random-Access File"}),"\n"]}),(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-python",children:'import pickle\n\nclass CarRecord:\n    def __init__(self, VehicleID, make, model, year):\n        self.VehicleID = VehicleID\n        self.make = make\n        self.model = model\n        self.year = year\n\n# Function to find and display a car record from a random-access file\ndef find_and_display_record(filename, key):\n    with open(filename, \'rb\') as file:\n        try:\n            while True:\n                record = pickle.load(file)\n                if record.VehicleID == key:\n                    print("Found Record:")\n                    print(f"VehicleID: {record.VehicleID}")\n                    print(f"Make: {record.make}")\n                    print(f"Model: {record.model}")\n                    print(f"Year: {record.year}")\n                    break  # Stop searching once the record is found\n        except EOFError:\n            print(f"No record found with VehicleID \'{key}\'")\n\n# Find and display a record with the specified VehicleID\nfind_and_display_record(\'car_records.dat\', \'2B456\')\n'})})]}),"\n",(0,o.jsx)(r.h2,{id:"question-1",children:"Question 1"}),"\n",(0,o.jsx)(r.h4,{id:"a-company-stores-details-about-their-customers-in-a-binary-file-of-records",children:"A company stores details about their customers in a binary file of records."}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["\n",(0,o.jsx)(r.h4,{id:"the-key-field-of-a-customer-record-is-the-customer-id-a-number-between-100001-and-999999",children:"The key field of a customer record is the customer ID (a number between 100001 and 999999)."}),"\n"]}),"\n",(0,o.jsxs)(r.li,{children:["\n",(0,o.jsx)(r.h4,{id:"the-name-of-the-customer-is-stored-in-a-30-character-field",children:"The name of the customer is stored in a 30-character field."}),"\n"]}),"\n",(0,o.jsxs)(r.li,{children:["\n",(0,o.jsx)(r.h4,{id:"the-customers-telephone-number-is-stored-in-a-14-character-field",children:"The customer\u2019s telephone number is stored in a 14-character field."}),"\n"]}),"\n",(0,o.jsxs)(r.li,{children:["\n",(0,o.jsx)(r.h4,{id:"the-total-value-of-orders-so-far-is-stored-in-a-currency-decimal-field",children:"The total value of orders so far is stored in a currency (decimal) field."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(r.h4,{id:"i-write-the-declaration-statement-for-the-record-data-type-customerrecord-required-to-store-the-data-write-program-code-6",children:"i Write the declaration statement for the record data type CustomerRecord required to store the data. Write program code. [6]"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-python",children:"class CustomerRecord:\n    def __init__(self, customer_id=None, name=None, phone_number=None, total_order_value=None):\n        self.customer_id = customer_id              # The key field\n        self.name = name                            # 30-character field for the customer's name\n        self.phone_number = phone_number            # 14-character field for the telephone number\n        self.total_order_value = total_order_value  # Decimal field for the total value of orders\n"})}),"\n",(0,o.jsx)(r.h4,{id:"ii-write-the-declaration-statement-for-an-array-customerdata0--999-to-store-customer-records-2",children:"ii Write the declaration statement for an array CustomerData[0 : 999] to store customer records. [2]"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-python",children:"CustomerData = [CustomerRecord() for i in range(1000)]\n"})}),"\n",(0,o.jsx)(r.h4,{id:"b-the-array-customerdata-is-to-be-used-as-a-hash-table-to-store-customer-records-the-function-hash-is-used-to-calculate-the-address-where-a-record-is-to-be-stored",children:"b The array CustomerData is to be used as a hash table to store customer records. The function Hash is used to calculate the address where a record is to be stored."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"FUNCTION Hash(CustomerID : INTEGER) RETURNS INTEGER\n    Address \u2190 CustomerID MOD 1000\n    RETURN Address\nENDFUNCTION\n"})}),"\n",(0,o.jsx)(r.h4,{id:"i-write-program-code-to-implement-the-function-hash",children:"i Write program code to implement the function Hash."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-python",children:"def Hash(CustomerID):\n    return CustomerID % 1000\n\n# or using a single line lambda function\nHash = lambda CustomerID: CustomerID % 1000\n"})}),"\n",(0,o.jsx)(r.h4,{id:"ii-write-a-procedure-addrecordcustomer--customerrecord-to-add-a-customer-record-to-the-hash-table-customerdata-your-solution-should-handle-collisions-by-using-the-next-available-slot-in-the-hash-table",children:"ii Write a procedure AddRecord(Customer : CustomerRecord) to add a customer record to the hash table CustomerData. Your solution should handle collisions by using the next available slot in the hash table."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-python",children:"def AddRecord(Customer):\n    address = Hash(Customer.customer_id)\n\n    while CustomerData[address].customer_id is not None:\n        # Handle collision by moving to the next available slot\n        address = (address + 1) % 1000\n\n    # Add the customer record to the hash table\n    CustomerData[address] = Customer\n"})}),"\n",(0,o.jsx)(r.h4,{id:"iii-write-a-function-findrecordcustomerid--integer-that-returns-the-index-of-the-hash-table-slot-where-the-record-for-the-customer-with-customerid-is-stored",children:"iii Write a function FindRecord(CustomerID : INTEGER) that returns the index of the hash table slot where the record for the customer with CustomerID is stored."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-python",children:"def FindRecord(CustomerID):\n    address = Hash(CustomerID)\n\n    while CustomerData[address].customer_id is not None:\n        # Check if the current slot matches the desired CustomerID\n        if CustomerData[address].customer_id == CustomerID:\n            return address  # Found the record, return the index\n\n        # Move to the next slot\n        address = (address + 1) % 1000\n\n    return None  # Customer record not found\n"})}),"\n",(0,o.jsx)(r.h4,{id:"c-before-the-program-stops-the-hash-table-records-must-be-stored-in-a-sequential-file-so-that-the-records-can-be-restored-to-the-array-when-the-program-is-re-entered-write-program-code-to-store-the-records-of-the-array-customerdata-sequentially-into-a-binary-file-customerdatadat",children:"c Before the program stops, the hash table records must be stored in a sequential file, so that the records can be restored to the array when the program is re-entered. Write program code to store the records of the array CustomerData sequentially into a binary file CustomerData.DAT"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-python",children:"import pickle\n\n# Function to store records sequentially into a binary file\ndef store_records_to_file(filename, data_array):\n    with open(filename, 'wb') as file:\n        for record in data_array:\n            pickle.dump(record, file)\n\n# Store records from CustomerData array to binary file\nstore_records_to_file('CustomerData.DAT', CustomerData)\n"})}),"\n",(0,o.jsx)(r.h4,{id:"instead-of-using-a-hash-table-the-company-decide-they-want-to-store-customer-records-in-a-direct-access-binary-file-explain-what-changes-need-to-be-made-to-your-program-to-do-this",children:"Instead of using a hash table, the company decide they want to store customer records in a direct-access binary file. Explain what changes need to be made to your program to do this"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["\n",(0,o.jsx)(r.p,{children:"Data Structure:"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Use a list or array for CustomerRecord instances."}),"\n",(0,o.jsx)(r.li,{children:"Eliminate hash function and collision-handling logic."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(r.li,{children:["\n",(0,o.jsx)(r.p,{children:"Sequential File Handling:"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Directly access the binary file using the customer's ID as an index."}),"\n",(0,o.jsx)(r.li,{children:"Write and read records at positions corresponding to the customer's ID."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(r.li,{children:["\n",(0,o.jsx)(r.p,{children:"Data Storage and Retrieval:"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Calculate the file position based on the customer's ID for adding and searching records."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-python",children:'import pickle\n\nclass CustomerRecord:\n    def __init__(self, customer_id=None, name=None, phone_number=None, total_order_value=None):\n        self.customer_id = customer_id\n        self.name = name\n        self.phone_number = phone_number\n        self.total_order_value = total_order_value\n\n# Function to store a record in the direct-access binary file\ndef store_record_to_file(filename, record):\n    with open(filename, \'rb+\') as file:\n        # Calculate the position based on the customer\'s ID\n        position = (record.customer_id - 100001) * pickle.PickleBuffer.HEADER_SIZE\n        file.seek(position)\n        pickle.dump(record, file)\n\n# Function to retrieve a record from the direct-access binary file\ndef retrieve_record_from_file(filename, customer_id):\n    with open(filename, \'rb\') as file:\n        # Calculate the position based on the customer\'s ID\n        position = (customer_id - 100001) * pickle.PickleBuffer.HEADER_SIZE\n        file.seek(position)\n        try:\n            record = pickle.load(file)\n            return record\n        except EOFError:\n            return None  # Customer record not found\n\n# Example usage:\ncustomer1 = CustomerRecord(customer_id=100001, name="John Doe", phone_number="555-1234", total_order_value=1500.25)\nstore_record_to_file(\'customer_records.dat\', customer1)\n\ncustomer_id_to_retrieve = 100001\nretrieved_customer = retrieve_record_from_file(\'customer_records.dat\', customer_id_to_retrieve)\n\nif retrieved_customer:\n    print("Retrieved Customer Record:")\n    print(f"Customer ID: {retrieved_customer.customer_id}")\n    print(f"Name: {retrieved_customer.name}")\n    print(f"Phone Number: {retrieved_customer.phone_number}")\n    print(f"Total Order Value: {retrieved_customer.total_order_value}")\nelse:\n    print(f"No record found for Customer ID {customer_id_to_retrieve}")\n'})}),"\n",(0,o.jsx)(r.h2,{id:"question-2",children:"Question 2"}),"\n",(0,o.jsx)(r.h4,{id:"a-program-allows-a-user-to-enter-a-filename-for-accessing-a-data-file-if-the-user-types-in-a-filename-that-does-not-exist-the-program-crashes-write-program-code-that-includes-exception-handling-to-replace-the-following-pseudocode-5",children:"A program allows a user to enter a filename for accessing a data file. If the user types in a filename that does not exist, the program crashes. Write program code that includes exception handling to replace the following pseudocode: [5]"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:'OUTPUT "Which file do you want to use? "\nINPUT FileName\nOPENFILE FileName FOR RANDOM\n'})}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Python Code:"}),"\n"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-python",children:'while True:\n    try:\n        filename = input("Which file do you want to use? ")\n        with open(filename, \'r\') as file:\n            print(f"File \'{filename}\' opened successfully!")\n        break\n    except FileNotFoundError:\n        print(f"Error: File \'{filename}\' not found. Please enter a valid filename.")\n    except Exception as e:\n        print(f"An error occurred: {e}")\n\n\n# a better alternative is to use,\nimport os\nos.path.isfile() # check if a file exists\nos.path.isdir() # check if a directory exists\n'})})]})}function h(e={}){const{wrapper:r}={...(0,a.a)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},56213:(e,r,t)=>{t.d(r,{Z:()=>i,a:()=>n});var o=t(50959);const a={},s=o.createContext(a);function n(e){const r=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:n(e.components),o.createElement(s.Provider,{value:r},e.children)}}}]);