"use strict";(self.webpackChunkhirusha=self.webpackChunkhirusha||[]).push([[4742],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,h=p["".concat(s,".").concat(m)]||p[m]||c[m]||i;return n?a.createElement(h,l(l({ref:t},d),{},{components:n})):a.createElement(h,l({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},549:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const i={title:"Data Types",sidebar_label:"Data Types",slug:"data_types",sidebar_position:2},l=void 0,o={unversionedId:"study/cie_al/computer_science/paper_2/my_revision_notes/basics/data_types",id:"study/cie_al/computer_science/paper_2/my_revision_notes/basics/data_types",title:"Data Types",description:"some knowledge of pseudocode is required to understand this",source:"@site/docs/study/cie_al/computer_science/paper_2/my_revision_notes/basics/data_types.md",sourceDirName:"study/cie_al/computer_science/paper_2/my_revision_notes/basics",slug:"/study/cie_al/computer_science/paper_2/my_revision_notes/basics/data_types",permalink:"/docs/study/cie_al/computer_science/paper_2/my_revision_notes/basics/data_types",draft:!1,editUrl:"https://github.com/hirusha-adi/hirusha/tree/main/docs/study/cie_al/computer_science/paper_2/my_revision_notes/basics/data_types.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Data Types",sidebar_label:"Data Types",slug:"data_types",sidebar_position:2},sidebar:"study",previous:{title:"Introduction",permalink:"/docs/study/cie_al/computer_science/paper_2/my_revision_notes/basics/introduction"},next:{title:"Pseudocode",permalink:"/docs/study/cie_al/computer_science/paper_2/my_revision_notes/basics/pseudocode"}},s={},u=[{value:"Contstants",id:"contstants",level:2},{value:"Why use Constants?",id:"why-use-constants",level:3},{value:"String (<code>STRING</code>)",id:"string-string",level:2},{value:"Char (<code>CHAR</code>)",id:"char-char",level:2},{value:"Real (<code>REAL</code>)",id:"real-real",level:2},{value:"Integer (<code>INTEGER</code>)",id:"integer-integer",level:2},{value:"<code>REAL</code> to <code>INTEGER</code>",id:"real-to-integer",level:3},{value:"Boolean (<code>BOOL</code>)",id:"boolean-bool",level:2},{value:"Why use Booleans?",id:"why-use-booleans",level:3},{value:"Date (<code>DATE</code>)",id:"date-date",level:2},{value:"Introduction",id:"introduction",level:3},{value:"Remaining Duration",id:"remaining-duration",level:3},{value:"Day Index",id:"day-index",level:3},{value:"How to do it?",id:"how-to-do-it",level:4},{value:"Age Verification",id:"age-verification",level:3},{value:"Records",id:"records",level:2},{value:"Why use Records?",id:"why-use-records",level:3},{value:"Arrays",id:"arrays",level:2},{value:"Introduction",id:"introduction-1",level:3},{value:"Initializing all elements",id:"initializing-all-elements",level:3},{value:"2D Arrays",id:"2d-arrays",level:3},{value:"Syntax:",id:"syntax",level:4},{value:"Assigning Values",id:"assigning-values",level:4},{value:"Linear Search",id:"linear-search",level:3},{value:"Bubble Sort",id:"bubble-sort",level:3},{value:"Example",id:"example",level:4},{value:"Why use Arrays?",id:"why-use-arrays",level:3},{value:"Array Index",id:"array-index",level:3},{value:"Why use a single Array with User Defined Data types (Records)?",id:"why-use-a-single-array-with-user-defined-data-types-records",level:3},{value:"Why indicate unused Array elements?",id:"why-indicate-unused-array-elements",level:3},{value:"How to indicate an unused Array element?",id:"how-to-indicate-an-unused-array-element",level:3}],d={toc:u},p="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{title:"note",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"some knowledge of pseudocode is required to understand this")),(0,r.kt)("h2",{id:"contstants"},"Contstants"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"no need to be declared seperately")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'CONSTANT MyVar <- "hirusha"\n')),(0,r.kt)("h3",{id:"why-use-constants"},"Why use Constants?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"value is entered only once"),(0,r.kt)("li",{parentName:"ul"},"avoids accidental changs in that value"),(0,r.kt)("li",{parentName:"ul"},"when needed, can easily change the value"),(0,r.kt)("li",{parentName:"ul"},"makes the program easier to understand")),(0,r.kt)("h2",{id:"string-string"},"String (",(0,r.kt)("inlineCode",{parentName:"h2"},"STRING"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'DECLARE MyVar: STRING\nMyVar <- "hirusha"\n')),(0,r.kt)("h2",{id:"char-char"},"Char (",(0,r.kt)("inlineCode",{parentName:"h2"},"CHAR"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"DECLARE MyVar: CHAR\nMyVar <- 'A'\n")),(0,r.kt)("h2",{id:"real-real"},"Real (",(0,r.kt)("inlineCode",{parentName:"h2"},"REAL"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"DECLARE MyVar: REAL\nMyVar <- 69.69\n")),(0,r.kt)("h2",{id:"integer-integer"},"Integer (",(0,r.kt)("inlineCode",{parentName:"h2"},"INTEGER"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"DECLARE MyVar: INTEGER\nMyVar <- 69\n")),(0,r.kt)("h3",{id:"real-to-integer"},(0,r.kt)("inlineCode",{parentName:"h3"},"REAL")," to ",(0,r.kt)("inlineCode",{parentName:"h3"},"INTEGER")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"use ",(0,r.kt)("inlineCode",{parentName:"li"},"INT")," function (available in INSERT)"),(0,r.kt)("li",{parentName:"ul"},"Does NOT round off the number"),(0,r.kt)("li",{parentName:"ul"},"take only the integer part    ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"DECLARE MyVar1: INTEGER\nDECLARE MyVar2: REAL\n\nMyVar1 <- 69.875\nMyVar2 <- INT(MyVar1)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MyVar2")," will have the value ",(0,r.kt)("inlineCode",{parentName:"li"},"69")," according the aforementioned reasons")),(0,r.kt)("h2",{id:"boolean-bool"},"Boolean (",(0,r.kt)("inlineCode",{parentName:"h2"},"BOOL"),")"),(0,r.kt)("h3",{id:"why-use-booleans"},"Why use Booleans?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"to terminate a conditional loop"),(0,r.kt)("li",{parentName:"ul"},"when variables need to store only 1 value"),(0,r.kt)("li",{parentName:"ul"},"eg: light is ON or light is OFF")),(0,r.kt)("h2",{id:"date-date"},"Date (",(0,r.kt)("inlineCode",{parentName:"h2"},"DATE"),")"),(0,r.kt)("h3",{id:"introduction"},"Introduction"),(0,r.kt)("admonition",{title:"note",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"all the functions under the ",(0,r.kt)("a",{parentName:"p",href:"#date-date"},"Date section")," is given in the insert")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"DECLARE MyDate: DATE\nMyDate <- SETDATE(18, 10, 2023)\n")),(0,r.kt)("h3",{id:"remaining-duration"},"Remaining Duration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"RemainMonths <- 12 - MONTH(MyDate)\n")),(0,r.kt)("h3",{id:"day-index"},"Day Index"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"refer to the ",(0,r.kt)("em",{parentName:"li"},"insert")),(0,r.kt)("li",{parentName:"ul"},"used to tell weather the day is Monday...Friday")),(0,r.kt)("h4",{id:"how-to-do-it"},"How to do it?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"refer to Insert"),(0,r.kt)("li",{parentName:"ul"},"store 7 Days as strings in a 1D array"),(0,r.kt)("li",{parentName:"ul"},"get ",(0,r.kt)("inlineCode",{parentName:"li"},"DAYINDEX(Date)")," and use it as index to the array with strings"),(0,r.kt)("li",{parentName:"ul"},"output the relevant day  ")),(0,r.kt)("h3",{id:"age-verification"},"Age Verification"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"day is usually not needed"),(0,r.kt)("li",{parentName:"ul"},"ONLY month AND year is fine")),(0,r.kt)("h2",{id:"records"},"Records"),(0,r.kt)("h3",{id:"why-use-records"},"Why use Records?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"allows different data types to be stored under one identifier"),(0,r.kt)("li",{parentName:"ul"},"used when implementing Linked Lists")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"TYPE Person\n    DECLARE Name: STRING\n    DECLARE ID: INTEGER\nENDTYPE\n")),(0,r.kt)("h2",{id:"arrays"},"Arrays"),(0,r.kt)("h3",{id:"introduction-1"},"Introduction"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the type can also be a Record"),(0,r.kt)("li",{parentName:"ul"},"in here, the",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Lower Bound")," is 1"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Upper Bound")," is 100")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"DECLARE People: ARRAY[1:100] OF Person\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"assigning a value to 5th element of array"),(0,r.kt)("li",{parentName:"ul"},"in here, the",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"#array-index"},"Array Index"))," is 5")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'People[5].Name <- "Hirusha"\nPeople[5].ID <- 69\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the ID can be accessed using the index, of eg: a for loop (similiarly to the ",(0,r.kt)("a",{parentName:"li",href:"#initializing-all-elements"},"Initializing all elements section"),")")),(0,r.kt)("h3",{id:"initializing-all-elements"},"Initializing all elements"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'DECLARE Index: INTEGER\nDECLARE ArrName: ARRAY[1:100] OF STRING\nFOR Index <- 1 to 100 \n    ArrName[Index] <- ""\nNEXT Index\n')),(0,r.kt)("h3",{id:"2d-arrays"},"2D Arrays"),(0,r.kt)("h4",{id:"syntax"},"Syntax:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"first dimension has 6 elements"),(0,r.kt)("li",{parentName:"ul"},"second dimension has 7 elements")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"DECLARE Board : ARRAY[1:6,1:7] OF INTEGER\n")),(0,r.kt)("h4",{id:"assigning-values"},"Assigning Values"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Board[3,4] \u2190 0 // sets the element in row 3 and column 4 to zero\n")),(0,r.kt)("h3",{id:"linear-search"},"Linear Search"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"checking each element of an array in turn for a required value"),(0,r.kt)("li",{parentName:"ul"},"100 is the array upper bound")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"MaxIndex \u2190 6\nINPUT SearchValue\nFound \u2190 FALSE\nIndex \u2190 \u20131\n\nREPEAT\n    Index \u2190 Index + 1\n    IF MyList[Index] = SearchValue\n    THEN\n        Found \u2190 TRUE\n    ENDIF\nUNTIL FOUND = TRUE OR Index >= MaxIndex\n")),(0,r.kt)("h3",{id:"bubble-sort"},"Bubble Sort"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Bad runtime: O(n^2) in worst case"),(0,r.kt)("li",{parentName:"ul"},"a sorting method where adjacent pairs of values are compared and swapped until array is fully sorted"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=Jdtq5uKz-w4"},"Click here")," to learn more")),(0,r.kt)("h4",{id:"example"},"Example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Pseudocode")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"MaxIndex \u2190 6\nINPUT SearchValue\nFound \u2190 FALSE\nIndex \u2190 \u20131\n\nREPEAT\n    Index \u2190 Index + 1\n    IF MyList[Index] = SearchValue\n    THEN\n        Found \u2190 TRUE\n    ENDIF\nUNTIL FOUND = TRUE OR Index >= MaxIndex\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Python (Explained with comments)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def while_for_implentation(list_a):\n    indexing_length = len(list_a) - 1  # Snan not apply comparision starting with last item of list (No item to right)\n    sorted = False  # Create variable of sorted and set it equal to false\n\n    while not sorted:  # Repeat until sorted = True\n        sorted = True  # Break the while loop whenever we have gone through all the values\n\n        for i in range(0, indexing_length):  # For every value in the list\n            if list_a[i]:  # "Angled brackets not allowed in Youtube Description :( list_a[i+1]: #if value in list is greater than value directly to the right of it,\n                sorted = False  # These values are unsorted\n                list_a[i], list_a[i+1] = list_a[i+1], list_a[i]  # Switch these values\n    return list_a  # Return our list "unsorted_list" which is not sorted.\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Python (Code only)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def while_for_implentation(list_a):\n    indexing_length = len(list_a) - 1\n    sorted = False \n    while not sorted:  \n        sorted = True  \n        for i in range(0, indexing_length): \n            if list_a[i]:\n                sorted = False \n                list_a[i], list_a[i+1] = list_a[i+1], list_a[i] \n    return list_a \n")),(0,r.kt)("h3",{id:"why-use-arrays"},"Why use Arrays?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"can write algortihms to process/search/sort data"),(0,r.kt)("li",{parentName:"ul"},"can be easily iterated through (using an Index)"),(0,r.kt)("li",{parentName:"ul"},"makes the program easier to understand"),(0,r.kt)("li",{parentName:"ul"},"multiple instances can be referenced via a single identifier"),(0,r.kt)("li",{parentName:"ul"},"easier to change when number of items increase")),(0,r.kt)("h3",{id:"array-index"},"Array Index"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"references individual element in array"),(0,r.kt)("li",{parentName:"ul"},"provides the index to array"),(0,r.kt)("li",{parentName:"ul"},"of type ",(0,r.kt)("inlineCode",{parentName:"li"},"INTEGER")),(0,r.kt)("li",{parentName:"ul"},"when in loop, use ",(0,r.kt)("strong",{parentName:"li"},"loop counter")," as array index")),(0,r.kt)("h3",{id:"why-use-a-single-array-with-user-defined-data-types-records"},"Why use a single Array with User Defined Data types (Records)?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"multiple data types under 1 identifier"),(0,r.kt)("li",{parentName:"ul"},"can be referenced together"),(0,r.kt)("li",{parentName:"ul"},"(has a closer association)"),(0,r.kt)("li",{parentName:"ul"},"program is easier to deisgn and maintain")),(0,r.kt)("h3",{id:"why-indicate-unused-array-elements"},"Why indicate unused Array elements?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"to recognize unused elements easily"),(0,r.kt)("li",{parentName:"ul"},"otherwise, element may contain unexpected data")),(0,r.kt)("h3",{id:"how-to-indicate-an-unused-array-element"},"How to indicate an unused Array element?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"assign a value outside the normal range"),(0,r.kt)("li",{parentName:"ul"},"assign a bogus values")))}c.isMDXComponent=!0}}]);