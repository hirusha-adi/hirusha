"use strict";(self.webpackChunkhirusha=self.webpackChunkhirusha||[]).push([[4211],{64641:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>o,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var i=s(11527),r=s(56213);const l={title:"Notes - Data Representation",sidebar_label:"Both",slug:"both",sidebar_position:2},t=void 0,d={id:"study/cie_al/computer_science/paper_3/my_revision_notes/chapter_16/both",title:"Notes - Data Representation",description:"- mantissa-exponent form",source:"@site/docs/study/cie_al/computer_science/paper_3/my_revision_notes/chapter_16/both.md",sourceDirName:"study/cie_al/computer_science/paper_3/my_revision_notes/chapter_16",slug:"/study/cie_al/computer_science/paper_3/my_revision_notes/chapter_16/both",permalink:"/docs/study/cie_al/computer_science/paper_3/my_revision_notes/chapter_16/both",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Notes - Data Representation",sidebar_label:"Both",slug:"both",sidebar_position:2},sidebar:"study",previous:{title:"9618",permalink:"/docs/study/cie_al/computer_science/paper_3/my_revision_notes/chapter_16/9618"},next:{title:"Chapter 17 - Communication and Internet technologies",permalink:"/docs/study/cie_al/computer_science/paper_3/my_revision_notes/chapter_17/"}},a={},c=[];function h(e){const n={code:"code",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["mantissa-exponent form","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"normalized:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["examples (mantissa):","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"10xxxxx"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"01xxxxx"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["why?","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"to store the maximum range of numbers in the minimum number of bytes"}),"\n",(0,i.jsx)(n.li,{children:"normalization minimises the number of leading zeros / ones represented"}),"\n",(0,i.jsx)(n.li,{children:"maximising the numbers of significant bits // maximising the (potential) precision of the number for the given number of bits"}),"\n",(0,i.jsx)(n.li,{children:"enables very large / small numbers to be stored with accuracy"}),"\n",(0,i.jsx)(n.li,{children:"avoids the possibility of many numbers have multiple representaions"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["identify normalized and not-normalized form","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["if normalized,","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"mantissa should begin with 01 / 10"}),"\n",(0,i.jsx)(n.li,{children:"mantissa should not begin with 00 (the two most significant bits)"}),"\n",(0,i.jsx)(n.li,{children:"in mantissa, the 2nd should be the inverse of the 1st bit -> 01, 10"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["is not normalized?","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"first two bits of the mantissa should be different for normalized number (10 / 01)"}),"\n",(0,i.jsx)(n.li,{children:"because the mantissa starts with 00"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["when not normalized (problems)?","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"precision is lost"}),"\n",(0,i.jsx)(n.li,{children:"redundant leading zeros in mantisaa"}),"\n",(0,i.jsx)(n.li,{children:"bits lost off right hand (least significant side)"}),"\n",(0,i.jsx)(n.li,{children:"multiple representations of a single number"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["how to normalize?","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"adjust the exponent, so that the mantissa starts with 01 or 10"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"dont care about overflows in mantissa if any"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["small description:\r\n",(0,i.jsx)(n.img,{alt:"alt text",src:s(56586).Z+"",width:"1147",height:"402"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["trick:\r\n",(0,i.jsx)(n.img,{alt:"alt text",src:s(1855).Z+"",width:"1143",height:"758"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"NOTE: when converting from decimal/denery to mantissa-exponent form"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"if mantissa starts with 1 (MSB) - ( its a two's complement number )"}),"\n",(0,i.jsxs)(n.li,{children:["eg:\r\n",(0,i.jsx)(n.img,{alt:"alt text",src:s(60067).Z+"",width:"1286",height:"595"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"bits are allocated differently to mantissa and exponent in each computer system"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["mantissa (main part)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["more bits","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"more precise"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["less bits","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"less precise"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["exponent (power)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["more bits","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"increase in range of numbers (that can be represented)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["less bits","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"decrease in range of numbers (that can be represented)"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["facts:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["when selecting how many bits for mantissa and exponent","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"the trade-off is between range and precision"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"in both of the cases above, first check for the bits needed to answer the question,"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'if less, tell: "not enough bits to store the whole binary number"'}),"\n",(0,i.jsx)(n.li,{children:"any increany in the number of bits for the mantissa means fewer bits available for the exponent"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"when data representation of a number is changed (general/universal)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"the number caulculated will change"}),"\n",(0,i.jsx)(n.li,{children:"the same bit pattern is for a different number"}),"\n",(0,i.jsx)(n.li,{children:"software may crash (if not updated)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"numbers possible"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["largest (normal, without two's complement)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"mantissa: 11111111"}),"\n",(0,i.jsx)(n.li,{children:"exponent: 1111"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["largest two's complement","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["mantissa: ",(0,i.jsx)(n.strong,{children:"0"}),"1111111"]}),"\n",(0,i.jsx)(n.li,{children:"note that is starts with 0"}),"\n",(0,i.jsxs)(n.li,{children:["if we add anything to this, an overflow will occur\r\n",(0,i.jsx)(n.img,{alt:"alt text",src:s(61428).Z+"",width:"1366",height:"671"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["smallest two's complement, non zero (it's a vert small decimal number)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"mantissa: 01000000"}),"\n",(0,i.jsx)(n.li,{children:"exponent: 1000"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"overflow"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["description","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"can occur when the number becomes too large"}),"\n",(0,i.jsx)(n.li,{children:"to be represented in the avilable number of bits"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["eg: (from a question):","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["why 513 (>511) cannot be stored accurately as a normalized floating point number with a 10-bit mantissa?\\","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"requires 11 bits to store accurately"}),"\n",(0,i.jsx)(n.li,{children:"reference to maximum (positive) number that can be stored = 511"}),"\n",(0,i.jsxs)(n.li,{children:["denary 513 in binary is 1000000001","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"normalized is 0.1000000001"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"so, results in overflow"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["how store numbers greater than >511?","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"the number of bits for the mantissa must be increased"}),"\n",(0,i.jsx)(n.li,{children:"11/12 bits mantissa and 5/4 bits exponent"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"underflow"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["description (short)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"number s so small to be represented by the number of bits available"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"description (long)"}),"\n",(0,i.jsx)(n.li,{children:"when an underflow (opposite of overflow) occurs in a binary floating point system"}),"\n",(0,i.jsx)(n.li,{children:"following an arithmetic/logical operation"}),"\n",(0,i.jsxs)(n.li,{children:["the result is too small to be precisely represented in the avilable system","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"when the number of bits is not enough"}),"\n",(0,i.jsx)(n.li,{children:"too small for the computers allocated word size"}),"\n",(0,i.jsx)(n.li,{children:"to represent the binary number"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"storing a binary number as floating point number"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"good"}),"\n",(0,i.jsxs)(n.li,{children:["bad","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"the precision of the number would be reduced"}),"\n",(0,i.jsx)(n.li,{children:"because the LSB of the original number has been lost (truncated)"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"issues with binary representations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["rounding errors","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"there is no exact binary conversion for some numbers"}),"\n",(0,i.jsx)(n.li,{children:"more bits are needed to store the number than are available"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["decimal arithmetic inaccurate decimals, why?","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.img,{alt:"alt text",src:s(46011).Z+"",width:"1019",height:"344"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"0.2/0.4 cannot be represented exactly in binary / rounding error"}),"\n",(0,i.jsx)(n.li,{children:"0.2/0.4 has been represented by a value just greater than 0.2/0.4"}),"\n",(0,i.jsx)(n.li,{children:"therefore, multiplying these  two representations together increases the difference"}),"\n",(0,i.jsx)(n.li,{children:"difference after the calculation is significant enough to be seen (give the number of positions after the decimal place)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.img,{alt:"alt text",src:s(29840).Z+"",width:"774",height:"391"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"0.1/0.2/0.3 cannot be represented exactly in binary (due rounding errors)"}),"\n",(0,i.jsx)(n.li,{children:"adding two or more inaccurate representaions together increases the probability of inaccuracy"}),"\n",(0,i.jsx)(n.li,{children:"giving an answer where the difference is significant enough to be seen"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"conversions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"refer the physical note"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"methods:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["mantissa-exponent form to dernery/decimal (Method 1)\r\n",(0,i.jsx)(n.img,{alt:"alt text",src:s(38151).Z+"",width:"1271",height:"617"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["mantissa-exponent form to dernery/decimal (Method 2)\r\n",(0,i.jsx)(n.img,{alt:"alt text",src:s(99403).Z+"",width:"1336",height:"619"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"examples"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["mantissa-exponent form to denery/decimal (other)\r\n",(0,i.jsx)(n.img,{alt:"alt text",src:s(6405).Z+"",width:"1161",height:"643"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["when Two's Complement, it's valid for both mantissa and exponent. In this below image, the exponent is -1.\r\n",(0,i.jsx)(n.img,{alt:"alt text",src:s(70723).Z+"",width:"1161",height:"245"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["first show ",(0,i.jsx)(n.strong,{children:"+11.625"})," (normal method), then ",(0,i.jsx)(n.strong,{children:"-11.625"})," (take the two's complement, and follow the normal method)\r\n",(0,i.jsx)(n.img,{alt:"alt text",src:s(63238).Z+"",width:"1328",height:"804"}),"\r\n",(0,i.jsx)(n.img,{alt:"alt text",src:s(88734).Z+"",width:"1332",height:"795"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"alt text",src:s(31531).Z+"",width:"645",height:"316"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["user defined data types","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["why necessary?","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"no suitable data type is provided by the language used"}),"\n",(0,i.jsx)(n.li,{children:"the programmer needs to specify a new data type"}),"\n",(0,i.jsx)(n.li,{children:"that meets the requirements of the application / program"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["purpose?","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"to create a new data type (from existing data types)"}),"\n",(0,i.jsxs)(n.li,{children:["to allow data types not available in a programming language to be constructed","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"to extend the flexibility of the programming language"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["user defined types:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"meaning"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"derived from one or more existing data types"}),"\n",(0,i.jsx)(n.li,{children:"used to extend the built-in data types"}),"\n",(0,i.jsx)(n.li,{children:"creates data-types specific to applications // programmer's requirements"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"types:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["non composite data types","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["meaning","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"a single data types that does not involve a reference to another type"}),"\n",(0,i.jsx)(n.li,{children:"(which is usually built in to the programming language)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["pointer data type","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["meaning","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"used to reference a memmory location"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["examples:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["1: note the ",(0,i.jsx)(n.strong,{children:"^"})," infront of Parts"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"// define the reference data type \r\nTYPE Parts = (Monitor, Keyboard, Mouse)\r\n\r\n// use the pointer and reference to Parts\r\nTYPE SelectParts = ^Parts\r\n\r\n// if the question doesn't give the variable name but suggests a data type\r\nTYPE SelectNames = ^STRING\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["enumerated data type","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["meaning","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"ordered list of possible values"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["examples:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"WeekEnd"})," stores data about the days that are not school days:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'TYPE WeekEnd = (Saturday, Sunday)\r\n// note, they are not "strings", write write the values inside the brackets\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Departement stores one of three values: Sales, Tech, CustomerServices"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"DECLARE Departement: (Sales, Tech, CustomerServices)\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["composite data type","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["meaning","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"data type constructed from other data types"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["record","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["description","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"collection of related items which may have different data types"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["meaning?","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"a data type constructed by a progammer (not a primitive data type)"}),"\n",(0,i.jsx)(n.li,{children:"a data type that references at least one other data type"}),"\n",(0,i.jsx)(n.li,{children:"and data types can be primitive, or user defined"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["examples:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ClubMeet"})," type stores first, last names, the days to stay home without school"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'// our enumerated data type\r\nTYPE WeekEnd = (Saturday, Sunday)\r\n\r\n// composite data type\r\nTYPE ClubMeet\r\n    DECLARE FirstName: STRING\r\n    DECLARE LastName: STRING\r\n    DECLARE Holiday: WeekEnd\r\nENDTYPE\r\n\r\n// declaring our variable\r\nDECLARE TestObj: ClubMeet\r\n\r\n// to assign values\r\nTestObj.FirstName <-- "Hirusha"\r\nTestObj.LastName <-- "Adikari"\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["other composite data types:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["arrays","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["description","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"indexed collection of items with same data type"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["declaration","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"// DECLARE <Array_Name>: ARRAY[<Index_Start>:<Index_End>] OF <Data_Type>\r\n\r\n// array with 20 elements of type Integer\r\nDECLARE ArrName: ARRAY[1:20] OF INTEGER\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["sets","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["stores a finite number of different values that have no order","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(values don't repeat)"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"supports mathematical operations"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["lists","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"indexed collection of items that can have different data types"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["class / struct / structure","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"gives properties and methods for an object"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"stack"}),"\n",(0,i.jsx)(n.li,{children:"queue"}),"\n",(0,i.jsx)(n.li,{children:"linked list"}),"\n",(0,i.jsx)(n.li,{children:"dictionary"}),"\n",(0,i.jsx)(n.li,{children:"objects"}),"\n",(0,i.jsx)(n.li,{children:"collections"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"more/other stuff"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"variable's value should be within 1 and 10 (both start and end are inclusive)"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"DECLARE Copies: 1 .. 10\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"array of custom given type, with index we mentioned we earlier"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"DECLARE Test: ARRAY[1:Copies] OF CustomDataType\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"alt text",src:s(41850).Z+"",width:"736",height:"352"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"file access"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["direct","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["suitable when","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"record is referenced by a unique address on a disk-type storage medium"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["random","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["how a file is accessed?","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"ID is hashed to give address (home location)"}),"\n",(0,i.jsx)(n.li,{children:"compared to ID stored at given address (home location)"}),"\n",(0,i.jsx)(n.li,{children:"if nothing stored, output message 'record not found'"}),"\n",(0,i.jsx)(n.li,{children:"if record IDs equal, then the record is found"}),"\n",(0,i.jsx)(n.li,{children:"if record IDs not equal, search overflow area / next record"}),"\n",(0,i.jsx)(n.li,{children:"until record found or whole area searched"}),"\n",(0,i.jsx)(n.li,{children:"if no record found, error message"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["how to add a new file?","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"ID hashed to give address"}),"\n",(0,i.jsx)(n.li,{children:"check if a record already stored at address"}),"\n",(0,i.jsx)(n.li,{children:"if nothing stored, store a new record"}),"\n",(0,i.jsx)(n.li,{children:"if another record already stored, search overflow data (next record)"}),"\n",(0,i.jsx)(n.li,{children:"until free space found or whole area searched"}),"\n",(0,i.jsx)(n.li,{children:"if no space, output error message"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["how to append to a file?","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"key field is hashed to produce home location"}),"\n",(0,i.jsx)(n.li,{children:"if home location is free, insert record/data"}),"\n",(0,i.jsx)(n.li,{children:"else use overflow method to find free location to store record"}),"\n",(0,i.jsx)(n.li,{children:"if no free location avilable then file is full and records cannot be stored"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["sequential","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["suitable when","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"a bank stores its data records in ascending order of account number"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["how records are organized","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"records are stored in a particular order"}),"\n",(0,i.jsx)(n.li,{children:"the order is determined baxed on the value in a key field"}),"\n",(0,i.jsx)(n.li,{children:"records are accessed one after the other"}),"\n",(0,i.jsx)(n.li,{children:"records can be found by searching from the beginning of the file, record by record"}),"\n",(0,i.jsx)(n.li,{children:"until the required record is found or key feild is exceeded"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["serial","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"description"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["sequential vs serial","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"in both serial and sequential files records are stored one after the other"}),"\n",(0,i.jsx)(n.li,{children:"and need to be accessed one after the other"}),"\n",(0,i.jsx)(n.li,{children:"serial files are stored in chronological order"}),"\n",(0,i.jsx)(n.li,{children:"and stored in the order of the key field"}),"\n",(0,i.jsx)(n.li,{children:"in serial files, new records are added in the next available space / records are appended to the file"}),"\n",(0,i.jsx)(n.li,{children:"in sequential files, new records are intrerested in the correct position"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"alt text",src:s(92837).Z+"",width:"753",height:"424"})}),"\n"]}),"\n"]})]})}function o(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},31531:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image-1-8b9d7f3ac6e8dac42024cadf2ec6b0c6.png"},1855:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image-10-6d9a0ed2bdffd251334a96b03b7a7f18.png"},63238:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image-11-3beeb10a5e32388cc6ef4ebe05d477a9.png"},88734:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image-12-3b81e7a7f7ccc5a9e965985178e082bd.png"},46011:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image-13-1df5571bc8a6603916d19892f48ea094.png"},61428:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image-14-9f3860d3b7b9028bed8a76ba68d45ff1.png"},60067:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image-2-5aecfb799642e154b8f3bc8acc344651.png"},29840:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image-3-ca43f4f3355e1313f20a4d0eed017799.png"},6405:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image-4-ecfdf26d01faee29b587d2926940de3b.png"},92837:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image-5-715910c9e2a0129095f270bfcc222453.png"},70723:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image-6-5bf920f993c7581d3ba977c1aaf5addb.png"},38151:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image-7-fd987fe3a2542cbf2504a7e6e445a155.png"},99403:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image-8-e054b90d9428af3236f862a1f810620b.png"},56586:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image-9-3c67970895cc51777138c434df1e36de.png"},41850:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image-bb6d5f52574211b2159b276d85cd05fa.png"},56213:(e,n,s)=>{s.d(n,{Z:()=>d,a:()=>t});var i=s(50959);const r={},l=i.createContext(r);function t(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);