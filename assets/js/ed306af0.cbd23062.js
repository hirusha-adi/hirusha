"use strict";(self.webpackChunkhirusha=self.webpackChunkhirusha||[]).push([[1801],{627:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>o});var t=i(5893),l=i(1151);const s={title:"Abstract Data Types",sidebar_label:"ADT",slug:"adt",sidebar_position:2},r=void 0,d={id:"study/cie_al/computer_science/paper_2/my_revision_notes/adt",title:"Abstract Data Types",description:"Stack",source:"@site/docs/study/cie_al/computer_science/paper_2/my_revision_notes/adt.md",sourceDirName:"study/cie_al/computer_science/paper_2/my_revision_notes",slug:"/study/cie_al/computer_science/paper_2/my_revision_notes/adt",permalink:"/docs/study/cie_al/computer_science/paper_2/my_revision_notes/adt",draft:!1,unlisted:!1,editUrl:"https://github.com/hirusha-adi/hirusha/tree/main/docs/study/cie_al/computer_science/paper_2/my_revision_notes/adt.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Abstract Data Types",sidebar_label:"ADT",slug:"adt",sidebar_position:2},sidebar:"study",previous:{title:"Flowcharts",permalink:"/docs/study/cie_al/computer_science/paper_2/my_revision_notes/basics/flowcharts"},next:{title:"Diagrams",permalink:"/docs/study/cie_al/computer_science/paper_2/my_revision_notes/diagrams"}},a={},o=[{value:"Stack",id:"stack",level:2},{value:"Introduction/Features",id:"introductionfeatures",level:3},{value:"How does it work?",id:"how-does-it-work",level:4},{value:"why order has changed?",id:"why-order-has-changed",level:4},{value:"Where are they used?",id:"where-are-they-used",level:4},{value:"How to Implement a Stack?",id:"how-to-implement-a-stack",level:3},{value:"PUSH(&#39;A&#39;)",id:"pusha",level:3},{value:"POP()",id:"pop",level:3},{value:"Peek() / Top()",id:"peek--top",level:3},{value:"isEmpty()",id:"isempty",level:3},{value:"Linked List",id:"linked-list",level:2},{value:"Introduction",id:"introduction",level:3},{value:"Advantages",id:"advantages",level:3},{value:"Disadvantages",id:"disadvantages",level:3},{value:"How to Implement a Linked List?",id:"how-to-implement-a-linked-list",level:3},{value:"Key Terms",id:"key-terms",level:3},{value:"Node",id:"node",level:4},{value:"Pointer",id:"pointer",level:4},{value:"Start Pointer",id:"start-pointer",level:4},{value:"Null Pointer",id:"null-pointer",level:4},{value:"How to Add &#39;B&#39; to the Middle of &#39;A&#39; and &#39;C&#39; in a Linked List?",id:"how-to-add-b-to-the-middle-of-a-and-c-in-a-linked-list",level:3},{value:"Arranging / Changing Order of a linked list",id:"arranging--changing-order-of-a-linked-list",level:3},{value:"Queue",id:"queue",level:2},{value:"Introduction/Features",id:"introductionfeatures-1",level:3},{value:"How does it work?",id:"how-does-it-work-1",level:4},{value:"How to Implement a Queue?",id:"how-to-implement-a-queue",level:3},{value:"Circular Queues",id:"circular-queues",level:3},{value:"EnQueue (Add an Item)",id:"enqueue-add-an-item",level:3},{value:"checks done:",id:"checks-done",level:4},{value:"how to make adding detect errors?",id:"how-to-make-adding-detect-errors",level:4},{value:"DeQueue (Remove an Item)",id:"dequeue-remove-an-item",level:3},{value:"checks done:",id:"checks-done-1",level:4},{value:"Front",id:"front",level:3},{value:"IsEmpty",id:"isempty-1",level:3},{value:"Size",id:"size",level:3},{value:"Special Case: When Front-of-Queue Pointer and End-of-Queue Pointer Have the Same Value?",id:"special-case-when-front-of-queue-pointer-and-end-of-queue-pointer-have-the-same-value",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"stack",children:"Stack"}),"\n",(0,t.jsx)(n.h3,{id:"introductionfeatures",children:"Introduction/Features"}),"\n",(0,t.jsx)(n.h4,{id:"how-does-it-work",children:(0,t.jsx)(n.a,{href:"https://www.youtube.com/watch?v=I37kGX-nZEI&pp=ygUQc3RhY2tzIGV4cGxhaW5lZA%3D%3D",children:"How does it work?"})}),"\n",(0,t.jsx)(n.h4,{id:"why-order-has-changed",children:"why order has changed?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"the recieved string will be reversed."}),"\n",(0,t.jsx)(n.li,{children:"because of LIFO (Last In First Out)"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"where-are-they-used",children:"Where are they used?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"the undo function"}),"\n",(0,t.jsx)(n.li,{children:"back button in the web browser"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"how-to-implement-a-stack",children:"How to Implement a Stack?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"declare 1D array of type string"}),"\n",(0,t.jsx)(n.li,{children:"Number of elements it corresponds is the size of the stack"}),"\n",(0,t.jsx)(n.li,{children:"declare an Integer variable to use as a stack pointer"}),"\n",(0,t.jsx)(n.li,{children:"use StackPointer as an index to the array"}),"\n",(0,t.jsx)(n.li,{children:"pointers and variables are initialized to indicate an empty stack"}),"\n",(0,t.jsx)(n.li,{children:"store each item on stack as one array element"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"push"})," will add a new element + increment Stack Pointer"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pop"})," will remove the lastly pushed element and return it + decrement the stack Pointer"]}),"\n",(0,t.jsxs)(n.li,{children:["both ",(0,t.jsx)(n.code,{children:"push"})," and ",(0,t.jsx)(n.code,{children:"pop"})," should check weather the stack is ",(0,t.jsx)(n.strong,{children:"empty"})," before performing stuff"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"pusha",children:"PUSH('A')"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(basically, added to TOP)"}),"\n",(0,t.jsx)(n.li,{children:"Top-Of-Stack Pointer is incremented"}),"\n",(0,t.jsx)(n.li,{children:"data value is added to that location"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"pop",children:"POP()"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"decrement Top-Of-Stack-Pointer and return the value to a varaible"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"often used as:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"Value <- Pop()"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"peek--top",children:"Peek() / Top()"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"This operation retrieves the value of the topmost element in the stack without removing it."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"isempty",children:"isEmpty()"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"This operation checks if the stack is empty, i.e."}),"\n",(0,t.jsx)(n.li,{children:"it returns true if there are no elements in the stack and false otherwise."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"linked-list",children:"Linked List"}),"\n",(0,t.jsx)(n.h3,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Made up of nodes that consists of two parts"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Data"})," - contains actual data"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Link"})," - contains address of the next node"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Memmory Addresses aren't stored contiguosly in RAM"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"advantages",children:"Advantages"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"pointers determine the order of data"}),"\n",(0,t.jsx)(n.li,{children:"easier to add and delete data"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"disadvantages",children:"Disadvantages"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"need to store both data value and a pointer"}),"\n",(0,t.jsx)(n.li,{children:"more complex to setup / implement"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"how-to-implement-a-linked-list",children:"How to Implement a Linked List?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"define a record with data element and the pointer"}),"\n",(0,t.jsx)(n.li,{children:"declare a 1D array of this type"}),"\n",(0,t.jsx)(n.li,{children:"pointers should be type integer"}),"\n",(0,t.jsx)(n.li,{children:"null pointer can have -1 (or any other abnormal value)"}),"\n",(0,t.jsx)(n.li,{children:"routines are required to add/delete/search data"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"or"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"1D array to store the data and a second 1D array to store the pointers"}),"\n",(0,t.jsx)(n.li,{children:"integer variable to hold the start pointer and an integer variable to store the next free pointer"}),"\n",(0,t.jsx)(n.li,{children:"both data value and representing node should have the same index"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"key-terms",children:"Key Terms"}),"\n",(0,t.jsx)(n.h4,{id:"node",children:"Node"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"an element of a list"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"pointer",children:"Pointer"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"a variable that stores the address of the node it points to"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"start-pointer",children:"Start Pointer"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["has ",(0,t.jsx)(n.strong,{children:"no"})," data value"]}),"\n",(0,t.jsx)(n.li,{children:"points to the first element (node with first data value)"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"null-pointer",children:"Null Pointer"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"doesn't point to anything"}),"\n",(0,t.jsx)(n.li,{children:"no any nodes come after it"}),"\n",(0,t.jsx)(n.li,{children:"linked list ends there"}),"\n",(0,t.jsx)(n.li,{children:"has a data value"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"how-to-add-b-to-the-middle-of-a-and-c-in-a-linked-list",children:"How to Add 'B' to the Middle of 'A' and 'C' in a Linked List?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"check for a free node"}),"\n",(0,t.jsx)(n.li,{children:"search for the correct insertion point"}),"\n",(0,t.jsx)(n.li,{children:"point node to start pointer of free list from pointer A will be changed to B instead of C"}),"\n",(0,t.jsx)(n.li,{children:"pointer from B will be set to point to node C"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"arranging--changing-order-of-a-linked-list",children:"Arranging / Changing Order of a linked list"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://cdn.discordapp.com/attachments/1163847683207856178/1163849022709174292/image.png?ex=654111de&is=652e9cde&hm=71eb20968f179ea8c372646c1956491ced9a24aa17563a55592ced91eaedcebf&",alt:"img3"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"when elements are removed, leave them there unless its replaced"}),"\n",(0,t.jsx)(n.li,{children:"(we assume theres no garbage collection going on)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://cdn.discordapp.com/attachments/1163847683207856178/1164023313002151996/image.png?ex=6541b430&is=652f3f30&hm=a0b840d2acbd3e103e3229164561aec2002d03eb974e56c87d5e705e67a5fec8&",alt:"img14"})}),"\n",(0,t.jsx)(n.h2,{id:"queue",children:"Queue"}),"\n",(0,t.jsx)(n.h3,{id:"introductionfeatures-1",children:"Introduction/Features"}),"\n",(0,t.jsx)(n.h4,{id:"how-does-it-work-1",children:(0,t.jsx)(n.a,{href:"https://www.youtube.com/watch?v=v9BMdz5m5Vo",children:"How does it work?"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"each queue element contains one data item"}),"\n",(0,t.jsx)(n.li,{children:"theres a pointer at start of each queue"}),"\n",(0,t.jsx)(n.li,{children:"theres a pointer at end of each queue"}),"\n",(0,t.jsx)(n.li,{children:"data is added to back"}),"\n",(0,t.jsxs)(n.li,{children:["First In First Out - ",(0,t.jsx)(n.strong,{children:"FIFO"})]}),"\n",(0,t.jsx)(n.li,{children:"maybe circular"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"how-to-implement-a-queue",children:"How to Implement a Queue?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"declare 1D array of give size and given type"}),"\n",(0,t.jsx)(n.li,{children:"declare integer for FoQ and EoQ pointer"}),"\n",(0,t.jsx)(n.li,{children:"initialize FoQ, EoQ to represent an empty queue"}),"\n",(0,t.jsxs)(n.li,{children:["Declare integer varaibale ",(0,t.jsx)(n.code,{children:"NumberInQueue"})," to represent the number of items in the queue"]}),"\n",(0,t.jsxs)(n.li,{children:["Delcare integer variable ",(0,t.jsx)(n.code,{children:"SizeOfQueue"})," to represent the size of the Queue"]}),"\n",(0,t.jsx)(n.li,{children:"Initialize the size of queue"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"circular-queues",children:"Circular Queues"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"As Linear Queues involves a lot of moving data,"}),"\n",(0,t.jsx)(n.li,{children:"we use Circular Queues to improve efficiency"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"enqueue-add-an-item",children:"EnQueue (Add an Item)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(basiclaly, add to end)"}),"\n",(0,t.jsx)(n.li,{children:"End-of-Queue Pointer increments"}),"\n",(0,t.jsx)(n.li,{children:"new data value is stored there"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"checks-done",children:"checks done:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"are there any unused elements in the queue?"}),"\n",(0,t.jsx)(n.li,{children:"the queue is not empty"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"how-to-make-adding-detect-errors",children:"how to make adding detect errors?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"if EoQ = FoQ, then error out"}),"\n",(0,t.jsx)(n.li,{children:"... as the queue is full"}),"\n",(0,t.jsx)(n.li,{children:"increment the EoQ"}),"\n",(0,t.jsx)(n.li,{children:"manage a wrap around"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"dequeue-remove-an-item",children:"DeQueue (Remove an Item)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(basically, remove from front)"}),"\n",(0,t.jsx)(n.li,{children:"Front-of-Queue Pointer is decremented"}),"\n",(0,t.jsx)(n.li,{children:"the data value in original place is removed and returned"}),"\n",(0,t.jsx)(n.li,{children:"it will be stored set to a given variable"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"checks-done-1",children:"checks done:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"are there items in the queue to remove?"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"front",children:"Front"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Returns the element at the front without removing it."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"isempty-1",children:"IsEmpty"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Checks if the queue is empty."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"size",children:"Size"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Returns the number of elements in the queue."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"special-case-when-front-of-queue-pointer-and-end-of-queue-pointer-have-the-same-value",children:"Special Case: When Front-of-Queue Pointer and End-of-Queue Pointer Have the Same Value?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"there is only one data item in the queue"}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{title:"NOTE",type:"caution",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"when elements are removed, leave them there unless its replaced"}),"\n",(0,t.jsx)(n.li,{children:"(we assume theres no garbage collection going on)"}),"\n"]})})]})}function h(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>d,a:()=>r});var t=i(7294);const l={},s=t.createContext(l);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);