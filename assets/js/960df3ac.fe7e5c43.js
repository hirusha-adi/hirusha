"use strict";(self.webpackChunkhirusha=self.webpackChunkhirusha||[]).push([[3667],{1219:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var n=t(1527),s=t(6213);const a={title:"Exam Style Questions - Object-Oriented Programming (OOP)",sidebar_label:"ESQ",slug:"esq",sidebar_position:2},o=void 0,i={id:"study/cie_al/computer_science/paper_4/my_study_notes/chapter_27/esq",title:"Exam Style Questions - Object-Oriented Programming (OOP)",description:"Tasks",source:"@site/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_27/esq.md",sourceDirName:"study/cie_al/computer_science/paper_4/my_study_notes/chapter_27",slug:"/study/cie_al/computer_science/paper_4/my_study_notes/chapter_27/esq",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_27/esq",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Exam Style Questions - Object-Oriented Programming (OOP)",sidebar_label:"ESQ",slug:"esq",sidebar_position:2},sidebar:"study",previous:{title:"Notes",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_27/notes"},next:{title:"Dunder Methods",permalink:"/docs/study/cie_al/computer_science/paper_4/my_study_notes/chapter_27/dunder"}},l={},d=[{value:"Tasks",id:"tasks",level:2},{value:"Task 27.01",id:"task-2701",level:3},{value:"1 Copy the Car class definition into your program editor and write a simple program to test that each method works.",id:"1-copy-the-car-class-definition-into-your-program-editor-and-write-a-simple-program-to-test-that-each-method-works",level:4},{value:"2 A business wants to store data about companies they supply. The data to be stored includes: company name, email address, date of last contact.",id:"2-a-business-wants-to-store-data-about-companies-they-supply-the-data-to-be-stored-includes-company-name-email-address-date-of-last-contact",level:4},{value:"a Design a class Company and draw a class diagram",id:"a-design-a-class-company-and-draw-a-class-diagram",level:4},{value:"Write program code to declare the class. Company name and email address are to be set by the constructor and will never be changed.",id:"write-program-code-to-declare-the-class-company-name-and-email-address-are-to-be-set-by-the-constructor-and-will-never-be-changed",level:4},{value:"c Instantiate one object of this class and test your class code works.",id:"c-instantiate-one-object-of-this-class-and-test-your-class-code-works",level:4},{value:"Task 27.02",id:"task-2702",level:3},{value:"Copy the class definitions for LibraryItem, Book and CD into your program editor. Write the additional get methods. Write a simple program to test that each method works.",id:"copy-the-class-definitions-for-libraryitem-book-and-cd-into-your-program-editor-write-the-additional-get-methods-write-a-simple-program-to-test-that-each-method-works",level:4},{value:"Task 27.03",id:"task-2703",level:3},{value:"Write code to define a Borrower class as shown in the class diagram in Figure 27.05",id:"write-code-to-define-a-borrower-class-as-shown-in-the-class-diagram-in-figure-2705",level:4},{value:"The constructor should initialise ItemsOnLoan to 0. UpdateItemsOnLoan() should increment ItemsOnLoan by an integer passed as parameter. Write a simple program to test the methods.",id:"the-constructor-should-initialise-itemsonloan-to-0-updateitemsonloan-should-increment-itemsonloan-by-an-integer-passed-as-parameter-write-a-simple-program-to-test-the-methods",level:4},{value:"Task 27.04",id:"task-2704",level:3},{value:"Use your program code from Task 27.02. Re-define the PrintDetail methods for the Book class and the CD class. Test your code.",id:"use-your-program-code-from-task-2702-re-define-the-printdetail-methods-for-the-book-class-and-the-cd-class-test-your-code",level:4},{value:"Task 27.05",id:"task-2705",level:3},{value:"Use your program code from Task 27.03. Add another attribute, BorrowerID, to the LibraryItem class so that the item being loaned can have the borrower recorded. Change the LibraryItem.Borrowing and LibraryItem.Returning methods, so that LoanItem.BorrowerID and Borrower.ItemsOnLoan are updated when a library item is borrowed or returned.",id:"use-your-program-code-from-task-2703-add-another-attribute-borrowerid-to-the-libraryitem-class-so-that-the-item-being-loaned-can-have-the-borrower-recorded-change-the-libraryitemborrowing-and-libraryitemreturning-methods-so-that-loanitemborrowerid-and-borroweritemsonloan-are-updated-when-a-library-item-is-borrowed-or-returned",level:4},{value:"Task 27.06",id:"task-2706",level:3},{value:"Use your code from Task 27.02 or Task 27.04. Add another attribute, RequestedBy, to the Book class so that the borrower making the request can be recorded. Change the method Book.SetIsRequested, so that Book.RequestedBy is updated when a book is requested.",id:"use-your-code-from-task-2702-or-task-2704-add-another-attribute-requestedby-to-the-book-class-so-that-the-borrower-making-the-request-can-be-recorded-change-the-method-booksetisrequested-so-that-bookrequestedby-is-updated-when-a-book-is-requested",level:4},{value:"Task 27.07",id:"task-2707",level:3},{value:"Use your code from Task 27.06 to write the complete program to implement a simplified library system. Write code to provide the user with a menu to choose an option.",id:"use-your-code-from-task-2706-to-write-the-complete-program-to-implement-a-simplified-library-system-write-code-to-provide-the-user-with-a-menu-to-choose-an-option",level:4},{value:"An example of a menu that would be suitable is shown in Figure 27.06.",id:"an-example-of-a-menu-that-would-be-suitable-is-shown-in-figure-2706",level:4},{value:"Task 27.08",id:"task-2708",level:3},{value:"Write the code required for the Lesson and Assessment classes. Add the code for the Course class and test your program with the appropriate simple program from Worked Example 27.03.",id:"write-the-code-required-for-the-lesson-and-assessment-classes-add-the-code-for-the-course-class-and-test-your-program-with-the-appropriate-simple-program-from-worked-example-2703",level:4},{value:"Question 1",id:"question-1",level:2},{value:"A program is to be written using an object-oriented programming language. A bank account class is designed. Two subclasses have been identified:",id:"a-program-is-to-be-written-using-an-object-oriented-programming-language-a-bank-account-class-is-designed-two-subclasses-have-been-identified",level:4},{value:"\u2022 Personal Account: the account holder pays a monthly fee and may overdraw theaccount up to an agreed overdraft limit.",id:"-personal-account-the-account-holder-pays-a-monthly-fee-and-may-overdraw-theaccount-up-to-an-agreed-overdraft-limit",level:4},{value:"\u2022 Savings Account: the account holder must maintain a positive balance and gets paid interest on the balance at an agreed interest rate. a Draw an inheritance diagram for these classes.",id:"-savings-account-the-account-holder-must-maintain-a-positive-balance-and-gets-paid-interest-on-the-balance-at-an-agreed-interest-rate-a-draw-an-inheritance-diagram-for-these-classes",level:4},{value:"The design for the BankAccount class consists of:",id:"the-design-for-the-bankaccount-class-consists-of",level:4},{value:"\u2022 attributes:",id:"-attributes",level:4},{value:"\u2022 AccountHolderName",id:"-accountholdername",level:4},{value:"\u2022 IBAN: International Bank Account Number",id:"-iban-international-bank-account-number",level:4},{value:"\u2022 methods:",id:"-methods",level:4},{value:"\u2022 CreateNewAccount",id:"-createnewaccount",level:4},{value:"\u2022 SetAccountHolderName",id:"-setaccountholdername",level:4},{value:"\u2022 GetAccountHolderName",id:"-getaccountholdername",level:4},{value:"\u2022 GetIBAN",id:"-getiban",level:4},{value:"b Write program code for the class definition of the superclass BankAccount.",id:"b-write-program-code-for-the-class-definition-of-the-superclass-bankaccount",level:4},{value:"c i State the attributes and/or methods required for the subclass PersonalAccount. [4]",id:"c-i-state-the-attributes-andor-methods-required-for-the-subclass-personalaccount-4",level:4},{value:"ii State the attributes and/or methods required for the subclass SavingsAccount. [4]",id:"ii-state-the-attributes-andor-methods-required-for-the-subclass-savingsaccount-4",level:4},{value:"iii Identify the feature of object-oriented program design that combines the attributes and methods into a class. [1]",id:"iii-identify-the-feature-of-object-oriented-program-design-that-combines-the-attributes-and-methods-into-a-class-1",level:4},{value:"Question 2",id:"question-2",level:2},{value:"2 A bus company in a town has two types of season ticket for their regular customers: pay-as-you go and contract. All season ticket holders have their name and email address recorded. A pay-as-you-go ticket holder pays a chosen amount into their account. Each time the ticket holder makes a journey on the bus, the price of the fare is deducted from the amount held in the account. They can top up the amount at any time. A contract ticket holder pays a fixed fee per month. They can then make unlimited journeys on the bus. The bus company wants a program to process the season ticket data. The program will be written using an object-oriented programming language.",id:"2-a-bus-company-in-a-town-has-two-types-of-season-ticket-for-their-regular-customers-pay-as-you-go-and-contract-all-season-ticket-holders-have-their-name-and-email-address-recorded-a-pay-as-you-go-ticket-holder-pays-a-chosen-amount-into-their-account-each-time-the-ticket-holder-makes-a-journey-on-the-bus-the-price-of-the-fare-is-deducted-from-the-amount-held-in-the-account-they-can-top-up-the-amount-at-any-time-a-contract-ticket-holder-pays-a-fixed-fee-per-month-they-can-then-make-unlimited-journeys-on-the-bus-the-bus-company-wants-a-program-to-process-the-season-ticket-data-the-program-will-be-written-using-an-object-oriented-programming-language",level:4},{value:"a Complete the class diagram showing the appropriate attributes and methods. [7]",id:"a-complete-the-class-diagram-showing-the-appropriate-attributes-and-methods-7",level:4},{value:"b Attributes and methods can be declared as either public or private. i Explain why the SeasonTicketHolder attributes are declared as private. [2]",id:"b-attributes-and-methods-can-be-declared-as-either-public-or-private-i-explain-why-the-seasonticketholder-attributes-are-declared-as-private-2",level:4},{value:"ii Explain why the SeasonTicketHolder methods have been declared as public. [2]",id:"ii-explain-why-the-seasonticketholder-methods-have-been-declared-as-public-2",level:4},{value:"Write program code to create a new instance of ContractTicketHolder with: \u2022 Identifier: NewCustomer \u2022 name: A. Smith \u2022 email address: xyz@abc.xx \u2022 monthly fee: $10",id:"write-program-code-to-create-a-new-instance-of-contractticketholder-with--identifier-newcustomer--name-a-smith--email-address-xyzabcxx--monthly-fee-10",level:4},{value:"Question 3",id:"question-3",level:2},{value:"3 A queue abstract data type (ADT) is to be implemented using object-oriented programming. Two classes have been identified: Queue and Node. The class diagrams are as follows:",id:"3-a-queue-abstract-data-type-adt-is-to-be-implemented-using-object-oriented-programming-two-classes-have-been-identified-queue-and-node-the-class-diagrams-are-as-follows",level:4},{value:"a State the relationship between these two classes. [1]",id:"a-state-the-relationship-between-these-two-classes-1",level:4},{value:"b b The NodeClass constructor is to: \u2022 create a new node \u2022 initialise the Data attribute to the empty string \u2022 initialise the Pointer attribute to -1. Write program code to define NodeClass, including the get and set methods. [10]",id:"b-b-the-nodeclass-constructor-is-to--create-a-new-node--initialise-the-data-attribute-to-the-empty-string--initialise-the-pointer-attribute-to--1-write-program-code-to-define-nodeclass-including-the-get-and-set-methods-10",level:4},{value:"c The QueueClass constructor is to: \u2022 create a new queue \u2022 initialise the Head and Tail attributes to -1. Write program code to define the constructor for QueueClass. [3]",id:"c-the-queueclass-constructor-is-to--create-a-new-queue--initialise-the-head-and-tail-attributes-to--1-write-program-code-to-define-the-constructor-for-queueclass-3",level:4},{value:"d The JoinQueue method is to: \u2022 create a new object, Node, of NodeClass \u2022 assign the value passed as parameter to the Data attribute of Node \u2022 assign Node to the end of Queue. Write program code to define the JoinQueue method. [5]",id:"d-the-joinqueue-method-is-to--create-a-new-object-node-of-nodeclass--assign-the-value-passed-as-parameter-to-the-data-attribute-of-node--assign-node-to-the-end-of-queue-write-program-code-to-define-the-joinqueue-method-5",level:4}];function c(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components},{Details:t}=r;return t||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h2,{id:"tasks",children:"Tasks"}),"\n",(0,n.jsxs)(t,{children:[(0,n.jsx)("summary",{children:"Tasks"}),(0,n.jsx)(r.h3,{id:"task-2701",children:"Task 27.01"}),(0,n.jsx)(r.h4,{id:"1-copy-the-car-class-definition-into-your-program-editor-and-write-a-simple-program-to-test-that-each-method-works",children:"1 Copy the Car class definition into your program editor and write a simple program to test that each method works."}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'class Car:\r\n    def __init__(self, n, e):\r\n        self.__VehicleID = n\r\n        self.__Registration = ""\r\n        self.__DateOfRegistration = None\r\n        self.__EngineSize = e\r\n        self.__PurchasePrice = 0.00\r\n\r\n    @property\r\n    def VehicleID(self):\r\n        return self.__VehicleID\r\n\r\n    @property\r\n    def EngineSize(self):\r\n        return self.__EngineSize\r\n\r\n    @property\r\n    def Registration(self):\r\n        return self.__Registration\r\n\r\n    @Registration.setter\r\n    def Registration(self, r):\r\n        self.__Registration = r\r\n\r\n    @property\r\n    def DateOfRegistration(self):\r\n        return self.__DateOfRegistration\r\n\r\n    @DateOfRegistration.setter\r\n    def DateOfRegistration(self, d):\r\n        self.__DateOfRegistration = d\r\n\r\n    @property\r\n    def PurchasePrice(self):\r\n        return self.__PurchasePrice\r\n\r\n    @PurchasePrice.setter\r\n    def PurchasePrice(self, p):\r\n        self.__PurchasePrice = p\r\n\r\n# Test the Car class\r\nif __name__ == "__main__":\r\n    # Create an instance of Car\r\n    my_car = Car(n=123, e=2.0)\r\n\r\n    # Test the getters\r\n    print("VehicleID:", my_car.VehicleID)\r\n    print("EngineSize:", my_car.EngineSize)\r\n    print("Registration:", my_car.Registration)\r\n    print("DateOfRegistration:", my_car.DateOfRegistration)\r\n    print("PurchasePrice:", my_car.PurchasePrice)\r\n\r\n    # Test the setters\r\n    my_car.Registration = "ABC123"\r\n    my_car.DateOfRegistration = "2022-01-08"\r\n    my_car.PurchasePrice = 25000.00\r\n\r\n    # Test the getters after setting values\r\n    print("\\nAfter setting values:")\r\n    print("VehicleID:", my_car.VehicleID)\r\n    print("EngineSize:", my_car.EngineSize)\r\n    print("Registration:", my_car.Registration)\r\n    print("DateOfRegistration:", my_car.DateOfRegistration)\r\n    print("PurchasePrice:", my_car.PurchasePrice)\n'})}),(0,n.jsx)(r.h4,{id:"2-a-business-wants-to-store-data-about-companies-they-supply-the-data-to-be-stored-includes-company-name-email-address-date-of-last-contact",children:"2 A business wants to store data about companies they supply. The data to be stored includes: company name, email address, date of last contact."}),(0,n.jsx)(r.h4,{id:"a-design-a-class-company-and-draw-a-class-diagram",children:"a Design a class Company and draw a class diagram"}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"  +-------------------------------------------+\r\n  |                  Company                  |\r\n  +-------------------------------------------+\r\n  | - company_name: str                       |\r\n  | - email_address: str                      |\r\n  | - date_last_contact: str                  |\r\n  +-------------------------------------------+\r\n  | + get_company_name(): str                 |\r\n  | + set_company_name(name: str): void       |\r\n  | + get_email_address(): str                |\r\n  | + set_email_address(email: str): void     |\r\n  | + get_date_last_contact(): str            |\r\n  | + set_date_last_contact(date: str): void  |\r\n  +-------------------------------------------+\r\n\n"})}),(0,n.jsx)(r.h4,{id:"write-program-code-to-declare-the-class-company-name-and-email-address-are-to-be-set-by-the-constructor-and-will-never-be-changed",children:"Write program code to declare the class. Company name and email address are to be set by the constructor and will never be changed."}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"class Company:\r\n    def __init__(self, company_name, email_address):\r\n        self.__company_name = company_name\r\n        self.__email_address = email_address\r\n        self.__date_last_contact = None\r\n\r\n    @property\r\n    def company_name(self):\r\n        return self.__company_name\r\n\r\n    @property\r\n    def email_address(self):\r\n        return self.__email_address\r\n\r\n    @property\r\n    def date_last_contact(self):\r\n        return self.__date_last_contact\r\n\r\n    @date_last_contact.setter\r\n    def date_last_contact(self, date):\r\n        self.__date_last_contact = date\n"})}),(0,n.jsx)(r.h4,{id:"c-instantiate-one-object-of-this-class-and-test-your-class-code-works",children:"c Instantiate one object of this class and test your class code works."}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'# Create an instance of Company\r\ncompany = Company(company_name="ABC Corp", email_address="abc@example.com")\r\n\r\n# Accessing company details\r\nprint("Company Name:", company.company_name)\r\nprint("Email Address:", company.email_address)\r\n\r\n# Setting date of last contact using property setter\r\ncompany.date_last_contact = "2024-01-08"\r\n\r\n# Accessing updated details\r\nprint("Date of Last Contact:", company.date_last_contact)\n'})}),(0,n.jsx)(r.h3,{id:"task-2702",children:"Task 27.02"}),(0,n.jsx)(r.h4,{id:"copy-the-class-definitions-for-libraryitem-book-and-cd-into-your-program-editor-write-the-additional-get-methods-write-a-simple-program-to-test-that-each-method-works",children:"Copy the class definitions for LibraryItem, Book and CD into your program editor. Write the additional get methods. Write a simple program to test that each method works."}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'import datetime\r\n\r\nclass LibraryItem:\r\n    def __init__(self, t, a, i):\r\n        # constructor / initialiser method\r\n        self.__Title = t\r\n        self.__Author_Artist = a\r\n        self.__ItemID = i\r\n        self.__OnLoan = False\r\n        self.__DueDate = datetime.date.today()\r\n\r\n    @property\r\n    def Title(self):\r\n        return self.__Title\r\n\r\n    @property\r\n    def Author_Artist(self):\r\n        return self.__Author_Artist\r\n\r\n    @property\r\n    def ItemID(self):\r\n        return self.__ItemID\r\n\r\n    @property\r\n    def OnLoan(self):\r\n        return self.__OnLoan\r\n\r\n    @property\r\n    def DueDate(self):\r\n        return self.__DueDate\r\n\r\n    def Borrowing(self):\r\n        self.__OnLoan = True\r\n        self.__DueDate = self.__DueDate + datetime.timedelta(weeks=3)\r\n\r\n    def Returning(self):\r\n        self.__OnLoan = False\r\n\r\n    def PrintDetails(self):\r\n        print(self.__Title, \'; \', self.__Author_Artist, \'; \', end=\'\')\r\n        print(self.__ItemID, \'; \', self.__OnLoan, \'; \', self.__DueDate)\r\n\r\n    def __repr__(self):\r\n        return f"LibraryItem(\'{self.__Title}\', \'{self.__Author_Artist}\', {self.__ItemID})"\r\n\r\nclass Book(LibraryItem):\r\n    def __init__(self, t, a, i):\r\n        # initialiser method\r\n        LibraryItem.__init__(self, t, a, i)\r\n        self.__IsRequested = False\r\n        self.__RequestedBy = 0\r\n\r\n    @property\r\n    def IsRequested(self):\r\n        return self.__IsRequested\r\n\r\n    @IsRequested.setter\r\n    def IsRequested(self, b):\r\n        self.__IsRequested = b\r\n\r\n    def PrintDetails(self):\r\n        print("Book Details")\r\n        LibraryItem.PrintDetails(self)\r\n        print(self.__IsRequested)\r\n\r\n    def __repr__(self):\r\n        return f"Book(\'{self.Title}\', \'{self.Author_Artist}\', {self.ItemID})"\r\n\r\nclass CD(LibraryItem):\r\n    def __init__(self, t, a, i):\r\n        # initialiser method\r\n        LibraryItem.__init__(self, t, a, i)\r\n        self.__Genre = ""\r\n\r\n    @property\r\n    def Genre(self):\r\n        return self.__Genre\r\n\r\n    @Genre.setter\r\n    def Genre(self, g):\r\n        self.__Genre = g\r\n\r\n    def __repr__(self):\r\n        return f"CD(\'{self.Title}\', \'{self.Author_Artist}\', {self.ItemID})"\r\n\r\n# Test the classes\r\nif __name__ == "__main__":\r\n    # Test LibraryItem\r\n    item = LibraryItem("Title1", "Author1", 1)\r\n    print(item)\r\n\r\n    # Test Book\r\n    book = Book("BookTitle", "BookAuthor", 2)\r\n    print(book)\r\n\r\n    # Test CD\r\n    cd = CD("CDTitle", "CDArtist", 3)\r\n    print(cd)\n'})}),(0,n.jsx)(r.h3,{id:"task-2703",children:"Task 27.03"}),(0,n.jsx)(r.h4,{id:"write-code-to-define-a-borrower-class-as-shown-in-the-class-diagram-in-figure-2705",children:"Write code to define a Borrower class as shown in the class diagram in Figure 27.05"}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"+-----------------------------------+\r\n|    Borrower                       |\r\n+-----------------------------------+\r\n| BorrowerName  : STRING            |\r\n| EmailAddress  : STRING            |\r\n| BorrowerID    : INTEGER           |\r\n| ItemsOnLoan   : INTEGER           |\r\n+-----------------------------------+\r\n| Constructor()                     |\r\n| GetBorrowerName(): STRING         |\r\n| GetEmailAddress(): STRING         |\r\n| GetBorrowerID()  : INTEGER        |\r\n| GetItemsOnLoan() : INTEGER        |\r\n| UpdateItemsOnLoan(increment_by)   |\r\n| PrintDetails(): void              |\r\n+-----------------------------------+\n"})}),(0,n.jsx)(r.h4,{id:"the-constructor-should-initialise-itemsonloan-to-0-updateitemsonloan-should-increment-itemsonloan-by-an-integer-passed-as-parameter-write-a-simple-program-to-test-the-methods",children:"The constructor should initialise ItemsOnLoan to 0. UpdateItemsOnLoan() should increment ItemsOnLoan by an integer passed as parameter. Write a simple program to test the methods."}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'class Borrower:\r\n    def __init__(self, borrower_name, email_address, borrower_id):\r\n        self.BorrowerName = borrower_name\r\n        self.EmailAddress = email_address\r\n        self.BorrowerID = borrower_id\r\n        self.ItemsOnLoan = 0\r\n\r\n    def GetBorrowerName(self):\r\n        return self.BorrowerName\r\n\r\n    def GetEmailAddress(self):\r\n        return self.EmailAddress\r\n\r\n    def GetBorrowerID(self):\r\n        return self.BorrowerID\r\n\r\n    def GetItemsOnLoan(self):\r\n        return self.ItemsOnLoan\r\n\r\n    def UpdateItemsOnLoan(self, increment_by):\r\n        self.ItemsOnLoan += increment_by\r\n\r\n    def PrintDetails(self):\r\n        print("Borrower Details:")\r\n        print("Borrower Name:", self.GetBorrowerName())\r\n        print("Email Address:", self.GetEmailAddress())\r\n        print("Borrower ID:", self.GetBorrowerID())\r\n        print("Items On Loan:", self.GetItemsOnLoan())\r\n\r\n# Test the Borrower class\r\nif __name__ == "__main__":\r\n    # Create an instance of Borrower\r\n    borrower = Borrower(borrower_name="John Doe", email_address="john@example.com", borrower_id=1)\r\n\r\n    # Display initial details\r\n    borrower.PrintDetails()\r\n\r\n    # Update items on loan\r\n    borrower.UpdateItemsOnLoan(3)\r\n\r\n    # Display updated details\r\n    borrower.PrintDetails()\n'})}),(0,n.jsx)(r.h3,{id:"task-2704",children:"Task 27.04"}),(0,n.jsx)(r.h4,{id:"use-your-program-code-from-task-2702-re-define-the-printdetail-methods-for-the-book-class-and-the-cd-class-test-your-code",children:"Use your program code from Task 27.02. Re-define the PrintDetail methods for the Book class and the CD class. Test your code."}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'import datetime\r\n\r\nclass LibraryItem:\r\n    def __init__(self, t, a, i):\r\n        # constructor / initialiser method\r\n        self.__Title = t\r\n        self.__Author_Artist = a\r\n        self.__ItemID = i\r\n        self.__OnLoan = False\r\n        self.__DueDate = datetime.date.today()\r\n\r\n    @property\r\n    def Title(self):\r\n        return self.__Title\r\n\r\n    @property\r\n    def Author_Artist(self):\r\n        return self.__Author_Artist\r\n\r\n    @property\r\n    def ItemID(self):\r\n        return self.__ItemID\r\n\r\n    @property\r\n    def OnLoan(self):\r\n        return self.__OnLoan\r\n\r\n    @property\r\n    def DueDate(self):\r\n        return self.__DueDate\r\n\r\n    def Borrowing(self):\r\n        self.__OnLoan = True\r\n        self.__DueDate = self.__DueDate + datetime.timedelta(weeks=3)\r\n\r\n    def Returning(self):\r\n        self.__OnLoan = False\r\n\r\n    def PrintDetails(self):\r\n        print(self.__Title, \'; \', self.__Author_Artist, \'; \', end=\'\')\r\n        print(self.__ItemID, \'; \', self.__OnLoan, \'; \', self.__DueDate)\r\n\r\n    def __repr__(self):\r\n        return f"LibraryItem(\'{self.__Title}\', \'{self.__Author_Artist}\', {self.__ItemID})"\r\n\r\nclass Book(LibraryItem):\r\n    def __init__(self, t, a, i):\r\n        # initialiser method\r\n        LibraryItem.__init__(self, t, a, i)\r\n        self.__IsRequested = False\r\n        self.__RequestedBy = 0\r\n\r\n    @property\r\n    def IsRequested(self):\r\n        return self.__IsRequested\r\n\r\n    @IsRequested.setter\r\n    def IsRequested(self, b):\r\n        self.__IsRequested = b\r\n\r\n    def PrintDetails(self):\r\n        print("Book Details:")\r\n        LibraryItem.PrintDetails(self)\r\n        print("Requested:", self.__IsRequested)\r\n\r\n    def __repr__(self):\r\n        return f"Book(\'{self.Title}\', \'{self.Author_Artist}\', {self.ItemID})"\r\n\r\nclass CD(LibraryItem):\r\n    def __init__(self, t, a, i):\r\n        # initialiser method\r\n        LibraryItem.__init__(self, t, a, i)\r\n        self.__Genre = ""\r\n\r\n    @property\r\n    def Genre(self):\r\n        return self.__Genre\r\n\r\n    @Genre.setter\r\n    def Genre(self, g):\r\n        self.__Genre = g\r\n\r\n    def PrintDetails(self):\r\n        print("CD Details:")\r\n        LibraryItem.PrintDetails(self)\r\n        print("Genre:", self.__Genre)\r\n\r\n    def __repr__(self):\r\n        return f"CD(\'{self.Title}\', \'{self.Author_Artist}\', {self.ItemID})"\r\n\r\n# Test the classes\r\nif __name__ == "__main__":\r\n    # Test LibraryItem\r\n    item = LibraryItem("Title1", "Author1", 1)\r\n    item.PrintDetails()\r\n\r\n    # Test Book\r\n    book = Book("BookTitle", "BookAuthor", 2)\r\n    book.IsRequested = True\r\n    book.PrintDetails()\r\n\r\n    # Test CD\r\n    cd = CD("CDTitle", "CDArtist", 3)\r\n    cd.Genre = "Rock"\r\n    cd.PrintDetails()\n'})}),(0,n.jsx)(r.h3,{id:"task-2705",children:"Task 27.05"}),(0,n.jsx)(r.h4,{id:"use-your-program-code-from-task-2703-add-another-attribute-borrowerid-to-the-libraryitem-class-so-that-the-item-being-loaned-can-have-the-borrower-recorded-change-the-libraryitemborrowing-and-libraryitemreturning-methods-so-that-loanitemborrowerid-and-borroweritemsonloan-are-updated-when-a-library-item-is-borrowed-or-returned",children:"Use your program code from Task 27.03. Add another attribute, BorrowerID, to the LibraryItem class so that the item being loaned can have the borrower recorded. Change the LibraryItem.Borrowing and LibraryItem.Returning methods, so that LoanItem.BorrowerID and Borrower.ItemsOnLoan are updated when a library item is borrowed or returned."}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'import datetime\r\n\r\nclass LibraryItem:\r\n    def __init__(self, t, a, i):\r\n        # constructor / initialiser method\r\n        self.__Title = t\r\n        self.__Author_Artist = a\r\n        self.__ItemID = i\r\n        self.__OnLoan = False\r\n        self.__DueDate = datetime.date.today()\r\n        self.__BorrowerID = None\r\n\r\n    @property\r\n    def Title(self):\r\n        return self.__Title\r\n\r\n    @property\r\n    def Author_Artist(self):\r\n        return self.__Author_Artist\r\n\r\n    @property\r\n    def ItemID(self):\r\n        return self.__ItemID\r\n\r\n    @property\r\n    def OnLoan(self):\r\n        return self.__OnLoan\r\n\r\n    @property\r\n    def DueDate(self):\r\n        return self.__DueDate\r\n\r\n    @property\r\n    def BorrowerID(self):\r\n        return self.__BorrowerID\r\n\r\n    def Borrowing(self, borrower_id):\r\n        self.__OnLoan = True\r\n        self.__DueDate = self.__DueDate + datetime.timedelta(weeks=3)\r\n        self.__BorrowerID = borrower_id\r\n\r\n    def Returning(self):\r\n        self.__OnLoan = False\r\n        self.__BorrowerID = None\r\n\r\n    def PrintDetails(self):\r\n        print(self.__Title, \'; \', self.__Author_Artist, \'; \', end=\'\')\r\n        print(self.__ItemID, \'; \', self.__OnLoan, \'; \', self.__DueDate, \'; \', self.__BorrowerID)\r\n\r\n    def __repr__(self):\r\n        return f"LibraryItem(\'{self.__Title}\', \'{self.__Author_Artist}\', {self.__ItemID})"\r\n\r\nclass Borrower:\r\n    def __init__(self, borrower_name, email_address, borrower_id):\r\n        self.BorrowerName = borrower_name\r\n        self.EmailAddress = email_address\r\n        self.BorrowerID = borrower_id\r\n        self.ItemsOnLoan = 0\r\n\r\n    def GetBorrowerName(self):\r\n        return self.BorrowerName\r\n\r\n    def GetEmailAddress(self):\r\n        return self.EmailAddress\r\n\r\n    def GetBorrowerID(self):\r\n        return self.BorrowerID\r\n\r\n    def GetItemsOnLoan(self):\r\n        return self.ItemsOnLoan\r\n\r\n    def UpdateItemsOnLoan(self, increment_by):\r\n        self.ItemsOnLoan += increment_by\r\n\r\n    def PrintDetails(self):\r\n        print("Borrower Details:")\r\n        print("Borrower Name:", self.GetBorrowerName())\r\n        print("Email Address:", self.GetEmailAddress())\r\n        print("Borrower ID:", self.GetBorrowerID())\r\n        print("Items On Loan:", self.GetItemsOnLoan())\r\n\r\n# Test the classes\r\nif __name__ == "__main__":\r\n    # Create instances of Borrower and LibraryItem\r\n    borrower = Borrower(borrower_name="John Doe", email_address="john@example.com", borrower_id=1)\r\n    item = LibraryItem("Title1", "Author1", 1)\r\n\r\n    # Display initial details\r\n    borrower.PrintDetails()\r\n    item.PrintDetails()\r\n\r\n    # Borrow an item\r\n    item.Borrowing(borrower.GetBorrowerID())\r\n    borrower.UpdateItemsOnLoan(1)\r\n\r\n    # Display updated details\r\n    borrower.PrintDetails()\r\n    item.PrintDetails()\r\n\r\n    # Return the item\r\n    item.Returning()\r\n    borrower.UpdateItemsOnLoan(-1)\r\n\r\n    # Display final details\r\n    borrower.PrintDetails()\r\n    item.PrintDetails()\n'})}),(0,n.jsx)(r.h3,{id:"task-2706",children:"Task 27.06"}),(0,n.jsx)(r.h4,{id:"use-your-code-from-task-2702-or-task-2704-add-another-attribute-requestedby-to-the-book-class-so-that-the-borrower-making-the-request-can-be-recorded-change-the-method-booksetisrequested-so-that-bookrequestedby-is-updated-when-a-book-is-requested",children:"Use your code from Task 27.02 or Task 27.04. Add another attribute, RequestedBy, to the Book class so that the borrower making the request can be recorded. Change the method Book.SetIsRequested, so that Book.RequestedBy is updated when a book is requested."}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'import datetime\r\n\r\nclass LibraryItem:\r\n    def __init__(self, t, a, i):\r\n        # constructor / initialiser method\r\n        self.__Title = t\r\n        self.__Author_Artist = a\r\n        self.__ItemID = i\r\n        self.__OnLoan = False\r\n        self.__DueDate = datetime.date.today()\r\n\r\n    @property\r\n    def Title(self):\r\n        return self.__Title\r\n\r\n    @property\r\n    def Author_Artist(self):\r\n        return self.__Author_Artist\r\n\r\n    @property\r\n    def ItemID(self):\r\n        return self.__ItemID\r\n\r\n    @property\r\n    def OnLoan(self):\r\n        return self.__OnLoan\r\n\r\n    @property\r\n    def DueDate(self):\r\n        return self.__DueDate\r\n\r\n    def Borrowing(self):\r\n        self.__OnLoan = True\r\n        self.__DueDate = self.__DueDate + datetime.timedelta(weeks=3)\r\n\r\n    def Returning(self):\r\n        self.__OnLoan = False\r\n\r\n    def PrintDetails(self):\r\n        print(self.__Title, \'; \', self.__Author_Artist, \'; \', end=\'\')\r\n        print(self.__ItemID, \'; \', self.__OnLoan, \'; \', self.__DueDate)\r\n\r\n    def __repr__(self):\r\n        return f"LibraryItem(\'{self.__Title}\', \'{self.__Author_Artist}\', {self.__ItemID})"\r\n\r\nclass Book(LibraryItem):\r\n    def __init__(self, t, a, i):\r\n        # initialiser method\r\n        LibraryItem.__init__(self, t, a, i)\r\n        self.__IsRequested = False\r\n        self.__RequestedBy = None  # New attribute\r\n\r\n    @property\r\n    def IsRequested(self):\r\n        return self.__IsRequested\r\n\r\n    @IsRequested.setter\r\n    def IsRequested(self, b):\r\n        self.__IsRequested = b\r\n\r\n    @property\r\n    def RequestedBy(self):\r\n        return self.__RequestedBy\r\n\r\n    def SetIsRequested(self, borrower_id):\r\n        self.__IsRequested = True\r\n        self.__RequestedBy = borrower_id\r\n\r\n    def PrintDetails(self):\r\n        print("Book Details:")\r\n        LibraryItem.PrintDetails(self)\r\n        print("Requested:", self.__IsRequested)\r\n        print("Requested By:", self.__RequestedBy)\r\n\r\n    def __repr__(self):\r\n        return f"Book(\'{self.Title}\', \'{self.Author_Artist}\', {self.ItemID})"\r\n\r\nclass CD(LibraryItem):\r\n    def __init__(self, t, a, i):\r\n        # initialiser method\r\n        LibraryItem.__init__(self, t, a, i)\r\n        self.__Genre = ""\r\n\r\n    @property\r\n    def Genre(self):\r\n        return self.__Genre\r\n\r\n    @Genre.setter\r\n    def Genre(self, g):\r\n        self.__Genre = g\r\n\r\n    def PrintDetails(self):\r\n        print("CD Details:")\r\n        LibraryItem.PrintDetails(self)\r\n        print("Genre:", self.__Genre)\r\n\r\n    def __repr__(self):\r\n        return f"CD(\'{self.Title}\', \'{self.Author_Artist}\', {self.ItemID})"\r\n\r\n# Test the classes\r\nif __name__ == "__main__":\r\n    # Test LibraryItem\r\n    item = LibraryItem("Title1", "Author1", 1)\r\n    item.PrintDetails()\r\n\r\n    # Test Book\r\n    book = Book("BookTitle", "BookAuthor", 2)\r\n    book.SetIsRequested(borrower_id=101)\r\n    book.PrintDetails()\r\n\r\n    # Test CD\r\n    cd = CD("CDTitle", "CDArtist", 3)\r\n    cd.Genre = "Rock"\r\n    cd.PrintDetails()\n'})}),(0,n.jsx)(r.h3,{id:"task-2707",children:"Task 27.07"}),(0,n.jsx)(r.h4,{id:"use-your-code-from-task-2706-to-write-the-complete-program-to-implement-a-simplified-library-system-write-code-to-provide-the-user-with-a-menu-to-choose-an-option",children:"Use your code from Task 27.06 to write the complete program to implement a simplified library system. Write code to provide the user with a menu to choose an option."}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"1 \u2013 Add a new borrower\r\n2 \u2013 Add a new book\r\n3 \u2013 Add a new CD\r\n4 \u2013 Borrow a book\r\n5 \u2013 Return a book\r\n6 \u2013 Borrow a CD\r\n7 \u2013 Return a CD\r\n8 \u2013 Request book\r\n9 \u2013 Print all details\r\n99 \u2013 Exit program\r\nEnter your menu choice:\n"})}),(0,n.jsx)(r.h4,{id:"an-example-of-a-menu-that-would-be-suitable-is-shown-in-figure-2706",children:"An example of a menu that would be suitable is shown in Figure 27.06."}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'import datetime\r\n\r\nclass LibraryItem:\r\n    def __init__(self, t, a, i):\r\n        # constructor / initialiser method\r\n        self.__Title = t\r\n        self.__Author_Artist = a\r\n        self.__ItemID = i\r\n        self.__OnLoan = False\r\n        self.__DueDate = datetime.date.today()\r\n\r\n    @property\r\n    def Title(self):\r\n        return self.__Title\r\n\r\n    @property\r\n    def Author_Artist(self):\r\n        return self.__Author_Artist\r\n\r\n    @property\r\n    def ItemID(self):\r\n        return self.__ItemID\r\n\r\n    @property\r\n    def OnLoan(self):\r\n        return self.__OnLoan\r\n\r\n    @property\r\n    def DueDate(self):\r\n        return self.__DueDate\r\n\r\n    def Borrowing(self):\r\n        self.__OnLoan = True\r\n        self.__DueDate = self.__DueDate + datetime.timedelta(weeks=3)\r\n\r\n    def Returning(self):\r\n        self.__OnLoan = False\r\n\r\n    def PrintDetails(self):\r\n        print(self.__Title, \'; \', self.__Author_Artist, \'; \', end=\'\')\r\n        print(self.__ItemID, \'; \', self.__OnLoan, \'; \', self.__DueDate)\r\n\r\n    def __repr__(self):\r\n        return f"LibraryItem(\'{self.__Title}\', \'{self.__Author_Artist}\', {self.__ItemID})"\r\n\r\nclass Book(LibraryItem):\r\n    def __init__(self, t, a, i):\r\n        # initialiser method\r\n        LibraryItem.__init__(self, t, a, i)\r\n        self.__IsRequested = False\r\n        self.__RequestedBy = None  # New attribute\r\n\r\n    @property\r\n    def IsRequested(self):\r\n        return self.__IsRequested\r\n\r\n    @IsRequested.setter\r\n    def IsRequested(self, b):\r\n        self.__IsRequested = b\r\n\r\n    @property\r\n    def RequestedBy(self):\r\n        return self.__RequestedBy\r\n\r\n    def SetIsRequested(self, borrower_id):\r\n        self.__IsRequested = True\r\n        self.__RequestedBy = borrower_id\r\n\r\n    def PrintDetails(self):\r\n        print("Book Details:")\r\n        LibraryItem.PrintDetails(self)\r\n        print("Requested:", self.__IsRequested)\r\n        print("Requested By:", self.__RequestedBy)\r\n\r\n    def __repr__(self):\r\n        return f"Book(\'{self.Title}\', \'{self.Author_Artist}\', {self.ItemID})"\r\n\r\nclass CD(LibraryItem):\r\n    def __init__(self, t, a, i):\r\n        # initialiser method\r\n        LibraryItem.__init__(self, t, a, i)\r\n        self.__Genre = ""\r\n\r\n    @property\r\n    def Genre(self):\r\n        return self.__Genre\r\n\r\n    @Genre.setter\r\n    def Genre(self, g):\r\n        self.__Genre = g\r\n\r\n    def PrintDetails(self):\r\n        print("CD Details:")\r\n        LibraryItem.PrintDetails(self)\r\n        print("Genre:", self.__Genre)\r\n\r\n    def __repr__(self):\r\n        return f"CD(\'{self.Title}\', \'{self.Author_Artist}\', {self.ItemID})"\r\n\r\nclass Borrower:\r\n    def __init__(self, borrower_name, email_address, borrower_id):\r\n        self.BorrowerName = borrower_name\r\n        self.EmailAddress = email_address\r\n        self.BorrowerID = borrower_id\r\n        self.ItemsOnLoan = 0\r\n\r\n    def GetBorrowerName(self):\r\n        return self.BorrowerName\r\n\r\n    def GetEmailAddress(self):\r\n        return self.EmailAddress\r\n\r\n    def GetBorrowerID(self):\r\n        return self.BorrowerID\r\n\r\n    def GetItemsOnLoan(self):\r\n        return self.ItemsOnLoan\r\n\r\n    def UpdateItemsOnLoan(self, increment_by):\r\n        self.ItemsOnLoan += increment_by\r\n\r\n    def PrintDetails(self):\r\n        print("Borrower Details:")\r\n        print("Borrower Name:", self.GetBorrowerName())\r\n        print("Email Address:", self.GetEmailAddress())\r\n        print("Borrower ID:", self.GetBorrowerID())\r\n        print("Items On Loan:", self.GetItemsOnLoan())\r\n\r\n# Function to add a new borrower\r\ndef add_borrower():\r\n    name = input("Enter borrower name: ")\r\n    email = input("Enter email address: ")\r\n    borrower_id = int(input("Enter borrower ID: "))\r\n    borrowers.append(Borrower(name, email, borrower_id))\r\n    print("Borrower added successfully!")\r\n\r\n# Function to add a new book\r\ndef add_book():\r\n    title = input("Enter book title: ")\r\n    author = input("Enter book author: ")\r\n    item_id = int(input("Enter book ID: "))\r\n    books.append(Book(title, author, item_id))\r\n    print("Book added successfully!")\r\n\r\n# Function to add a new CD\r\ndef add_cd():\r\n    title = input("Enter CD title: ")\r\n    artist = input("Enter CD artist: ")\r\n    item_id = int(input("Enter CD ID: "))\r\n    cds.append(CD(title, artist, item_id))\r\n    print("CD added successfully!")\r\n\r\n# Function to borrow a book\r\ndef borrow_book():\r\n    book_id = int(input("Enter book ID to borrow: "))\r\n    borrower_id = int(input("Enter borrower ID: "))\r\n    for book in books:\r\n        if book.ItemID == book_id:\r\n            book.Borrowing()\r\n            for borrower in borrowers:\r\n                if borrower.BorrowerID == borrower_id:\r\n                    borrower.UpdateItemsOnLoan(1)\r\n            print("Book borrowed successfully!")\r\n            return\r\n    print("Book not found!")\r\n\r\n# Function to return a book\r\ndef return_book():\r\n    book_id = int(input("Enter book ID to return: "))\r\n    for book in books:\r\n        if book.ItemID == book_id and book.OnLoan:\r\n            book.Returning()\r\n            for borrower in borrowers:\r\n                if borrower.BorrowerID == book.RequestedBy:\r\n                    borrower.UpdateItemsOnLoan(-1)\r\n            print("Book returned successfully!")\r\n            return\r\n    print("Book not found or not on loan!")\r\n\r\n# Function to borrow a CD\r\ndef borrow_cd():\r\n    cd_id = int(input("Enter CD ID to borrow: "))\r\n    borrower_id = int(input("Enter borrower ID: "))\r\n    for cd in cds:\r\n        if cd.ItemID == cd_id:\r\n            cd.Borrowing()\r\n            for borrower in borrowers:\r\n                if borrower.BorrowerID == borrower_id:\r\n                    borrower.UpdateItemsOnLoan(1)\r\n            print("CD borrowed successfully!")\r\n            return\r\n    print("CD not found!")\r\n\r\n# Function to return a CD\r\ndef return_cd():\r\n    cd_id = int(input("Enter CD ID to return: "))\r\n    for cd in cds:\r\n        if cd.ItemID == cd_id and cd.OnLoan:\r\n            cd.Returning()\r\n            for borrower in borrowers:\r\n                if borrower.BorrowerID == cd.RequestedBy:\r\n                    borrower.UpdateItemsOnLoan(-1)\r\n            print("CD returned successfully!")\r\n            return\r\n    print("CD not found or not on loan!")\r\n\r\n# Function to request a book\r\ndef request_book():\r\n    book_id = int(input("Enter book ID to request: "))\r\n    borrower_id = int(input("Enter borrower ID: "))\r\n    for book in books:\r\n        if book.ItemID == book_id:\r\n            book.SetIsRequested(borrower_id)\r\n            print("Book requested successfully!")\r\n            return\r\n    print("Book not found!")\r\n\r\n# Function to print all details\r\ndef print_all_details():\r\n    print("\\nBorrowers:")\r\n    for borrower in borrowers:\r\n        borrower.PrintDetails()\r\n\r\n    print("\\nBooks:")\r\n    for book in books:\r\n        book.PrintDetails()\r\n\r\n    print("\\nCDs:")\r\n    for cd in cds:\r\n        cd.PrintDetails()\r\n\r\n# Main program\r\nborrowers = []\r\nbooks = []\r\ncds = []\r\n\r\nwhile True:\r\n    print("\\nMenu:")\r\n    print("1 \u2013 Add a new borrower")\r\n    print("2 \u2013 Add a new book")\r\n    print("3 \u2013 Add a new CD")\r\n    print("4 \u2013 Borrow a book")\r\n    print("5 \u2013 Return a book")\r\n    print("6 \u2013 Borrow a CD")\r\n    print("7 \u2013 Return a CD")\r\n    print("8 \u2013 Request book")\r\n    print("9 \u2013 Print all details")\r\n    print("99 \u2013 Exit program")\r\n\r\n    choice = input("Enter your menu choice: ")\r\n\r\n    if choice == \'1\':\r\n        add_borrower()\r\n    elif choice == \'2\':\r\n        add_book()\r\n    elif choice == \'3\':\r\n        add_cd()\r\n    elif choice == \'4\':\r\n        borrow_book()\r\n    elif choice == \'5\':\r\n        return_book()\r\n    elif choice == \'6\':\r\n        borrow_cd()\r\n    elif choice == \'7\':\r\n        return_cd()\r\n    elif choice == \'8\':\r\n        request_book()\r\n    elif choice == \'9\':\r\n        print_all_details()\r\n    elif choice == \'99\':\r\n        print("Exiting program. Goodbye!")\r\n        break\r\n    else:\r\n        print("Invalid choice. Please enter a valid menu option.")\n'})}),(0,n.jsx)(r.h3,{id:"task-2708",children:"Task 27.08"}),(0,n.jsx)(r.h4,{id:"write-the-code-required-for-the-lesson-and-assessment-classes-add-the-code-for-the-course-class-and-test-your-program-with-the-appropriate-simple-program-from-worked-example-2703",children:"Write the code required for the Lesson and Assessment classes. Add the code for the Course class and test your program with the appropriate simple program from Worked Example 27.03."}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'class Lesson:\r\n    def __init__(self, title, duration, requires_lab):\r\n        self.Title = title\r\n        self.Duration = duration\r\n        self.RequiresLab = requires_lab\r\n\r\n    def OutputLessonDetails(self):\r\n        return f"{self.Title} - Duration: {self.Duration} minutes, Requires Lab: {self.RequiresLab}"\r\n\r\nclass Assessment:\r\n    def __init__(self, title, max_marks):\r\n        self.Title = title\r\n        self.MaxMarks = max_marks\r\n\r\nclass Course:\r\n    def __init__(self, title, max_students):\r\n        self.CourseTitle = title\r\n        self.MaxStudents = max_students\r\n        self.NumberOfLessons = 0\r\n        self.CourseLesson = []\r\n        self.CourseAssessment = None\r\n\r\n    def AddLesson(self, title, duration, requires_lab):\r\n        self.NumberOfLessons += 1\r\n        self.CourseLesson.append(Lesson(title, duration, requires_lab))\r\n\r\n    def AddAssessment(self, title, max_marks):\r\n        self.CourseAssessment = Assessment(title, max_marks)\r\n\r\n    def OutputCourseDetails(self):\r\n        print(f"{self.CourseTitle} Maximum number: {self.MaxStudents}")\r\n        for i in range(self.NumberOfLessons):\r\n            print(self.CourseLesson[i].OutputLessonDetails())\r\n        if self.CourseAssessment:\r\n            print(f"Assessment: {self.CourseAssessment.Title}, Max Marks: {self.CourseAssessment.MaxMarks}")\r\n\r\ndef Main():\r\n    MyCourse = Course("Computing", 10)  # sets up a new course\r\n\r\n    MyCourse.AddAssessment("Programming", 100)  # adds an assignment\r\n    # add 3 lessons\r\n    MyCourse.AddLesson("Problem Solving", 60, False)\r\n    MyCourse.AddLesson("Programming", 120, True)\r\n    MyCourse.AddLesson("Theory", 60, False)\r\n    # check it all works\r\n    MyCourse.OutputCourseDetails()\r\n\r\nif __name__ == "__main__":\r\n    Main()\n'})})]}),"\n",(0,n.jsx)(r.h2,{id:"question-1",children:"Question 1"}),"\n",(0,n.jsx)(r.h4,{id:"a-program-is-to-be-written-using-an-object-oriented-programming-language-a-bank-account-class-is-designed-two-subclasses-have-been-identified",children:"A program is to be written using an object-oriented programming language. A bank account class is designed. Two subclasses have been identified:"}),"\n",(0,n.jsx)(r.h4,{id:"-personal-account-the-account-holder-pays-a-monthly-fee-and-may-overdraw-theaccount-up-to-an-agreed-overdraft-limit",children:"\u2022 Personal Account: the account holder pays a monthly fee and may overdraw theaccount up to an agreed overdraft limit."}),"\n",(0,n.jsx)(r.h4,{id:"-savings-account-the-account-holder-must-maintain-a-positive-balance-and-gets-paid-interest-on-the-balance-at-an-agreed-interest-rate-a-draw-an-inheritance-diagram-for-these-classes",children:"\u2022 Savings Account: the account holder must maintain a positive balance and gets paid interest on the balance at an agreed interest rate. a Draw an inheritance diagram for these classes."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"          +-------------------+\r\n          |   BankAccount     |\r\n          +-------------------+\r\n                  |\r\n     +-----------------------+\r\n     |                       |\r\n+-----------------+  +-----------------+\r\n| PersonalAccount |  | SavingsAccount  |\r\n+-----------------+  +-----------------+\n"})}),"\n",(0,n.jsx)(r.h4,{id:"the-design-for-the-bankaccount-class-consists-of",children:"The design for the BankAccount class consists of:"}),"\n",(0,n.jsx)(r.h4,{id:"-attributes",children:"\u2022 attributes:"}),"\n",(0,n.jsx)(r.h4,{id:"-accountholdername",children:"\u2022 AccountHolderName"}),"\n",(0,n.jsx)(r.h4,{id:"-iban-international-bank-account-number",children:"\u2022 IBAN: International Bank Account Number"}),"\n",(0,n.jsx)(r.h4,{id:"-methods",children:"\u2022 methods:"}),"\n",(0,n.jsx)(r.h4,{id:"-createnewaccount",children:"\u2022 CreateNewAccount"}),"\n",(0,n.jsx)(r.h4,{id:"-setaccountholdername",children:"\u2022 SetAccountHolderName"}),"\n",(0,n.jsx)(r.h4,{id:"-getaccountholdername",children:"\u2022 GetAccountHolderName"}),"\n",(0,n.jsx)(r.h4,{id:"-getiban",children:"\u2022 GetIBAN"}),"\n",(0,n.jsx)(r.h4,{id:"b-write-program-code-for-the-class-definition-of-the-superclass-bankaccount",children:"b Write program code for the class definition of the superclass BankAccount."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"class BankAccount:\r\n    def __init__(self, account_holder_name, iban):\r\n        self.AccountHolderName = account_holder_name\r\n        self.IBAN = iban\r\n\r\n    def CreateNewAccount(self, account_holder_name, iban):\r\n        # This method can be used to create a new account with the given details.\r\n        # You can add any specific logic related to account creation here.\r\n        self.AccountHolderName = account_holder_name\r\n        self.IBAN = iban\r\n\r\n    def SetAccountHolderName(self, new_name):\r\n        # This method sets a new account holder name.\r\n        self.AccountHolderName = new_name\r\n\r\n    def GetAccountHolderName(self):\r\n        # This method returns the account holder name.\r\n        return self.AccountHolderName\r\n\r\n    def GetIBAN(self):\r\n        # This method returns the IBAN of the account.\r\n        return self.IBAN\n"})}),"\n",(0,n.jsx)(r.h4,{id:"c-i-state-the-attributes-andor-methods-required-for-the-subclass-personalaccount-4",children:"c i State the attributes and/or methods required for the subclass PersonalAccount. [4]"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:"Attributes:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"MonthlyFee: To represent the monthly fee that the account holder needs to pay."}),"\n",(0,n.jsx)(r.li,{children:"OverdraftLimit: To specify the agreed overdraft limit for the account."}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:"Methods:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"ApplyMonthlyFee: Deducts the monthly fee from the account balance."}),"\n",(0,n.jsx)(r.li,{children:"SetOverdraftLimit: Sets or updates the overdraft limit for the account."}),"\n",(0,n.jsx)(r.li,{children:"GetOverdraftLimit: Retrieves the current overdraft limit for the account."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:"Additionally, you may want to override the CreateNewAccount method from the superclass to include the specific initialization of the new attributes for a personal account."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"class PersonalAccount(BankAccount):\r\n    def __init__(self, account_holder_name, iban, monthly_fee, overdraft_limit):\r\n        super().__init__(account_holder_name, iban)\r\n        self.MonthlyFee = monthly_fee\r\n        self.OverdraftLimit = overdraft_limit\r\n\r\n    def CreateNewAccount(self, account_holder_name, iban, monthly_fee, overdraft_limit):\r\n        super().CreateNewAccount(account_holder_name, iban)\r\n        self.MonthlyFee = monthly_fee\r\n        self.OverdraftLimit = overdraft_limit\r\n\r\n    def ApplyMonthlyFee(self):\r\n        # Deducts the monthly fee from the account balance.\r\n        # You can add specific logic here.\r\n        pass\r\n\r\n    def SetOverdraftLimit(self, new_limit):\r\n        # Sets or updates the overdraft limit for the account.\r\n        self.OverdraftLimit = new_limit\r\n\r\n    def GetOverdraftLimit(self):\r\n        # Retrieves the current overdraft limit for the account.\r\n        return self.OverdraftLimit\n"})}),"\n",(0,n.jsx)(r.h4,{id:"ii-state-the-attributes-andor-methods-required-for-the-subclass-savingsaccount-4",children:"ii State the attributes and/or methods required for the subclass SavingsAccount. [4]"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:"Attributes:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"InterestRate: To represent the agreed interest rate for the account."}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:"Methods:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"ApplyInterest: Adds interest to the account balance based on the interest rate."}),"\n",(0,n.jsx)(r.li,{children:"SetInterestRate: Sets or updates the interest rate for the account."}),"\n",(0,n.jsx)(r.li,{children:"GetInterestRate: Retrieves the current interest rate for the account."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:"Additionally, you may want to override the CreateNewAccount method from the superclass to include the specific initialization of the new attributes for a savings account."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"class SavingsAccount(BankAccount):\r\n    def __init__(self, account_holder_name, iban, interest_rate):\r\n        super().__init__(account_holder_name, iban)\r\n        self.InterestRate = interest_rate\r\n\r\n    def CreateNewAccount(self, account_holder_name, iban, interest_rate):\r\n        super().CreateNewAccount(account_holder_name, iban)\r\n        self.InterestRate = interest_rate\r\n\r\n    def ApplyInterest(self):\r\n        # Adds interest to the account balance based on the interest rate.\r\n        # You can add specific logic here.\r\n        pass\r\n\r\n    def SetInterestRate(self, new_rate):\r\n        # Sets or updates the interest rate for the account.\r\n        self.InterestRate = new_rate\r\n\r\n    def GetInterestRate(self):\r\n        # Retrieves the current interest rate for the account.\r\n        return self.InterestRate\n"})}),"\n",(0,n.jsx)(r.h4,{id:"iii-identify-the-feature-of-object-oriented-program-design-that-combines-the-attributes-and-methods-into-a-class-1",children:"iii Identify the feature of object-oriented program design that combines the attributes and methods into a class. [1]"}),"\n",(0,n.jsx)(r.p,{children:"Encapsulation"}),"\n",(0,n.jsx)(r.h2,{id:"question-2",children:"Question 2"}),"\n",(0,n.jsx)(r.h4,{id:"2-a-bus-company-in-a-town-has-two-types-of-season-ticket-for-their-regular-customers-pay-as-you-go-and-contract-all-season-ticket-holders-have-their-name-and-email-address-recorded-a-pay-as-you-go-ticket-holder-pays-a-chosen-amount-into-their-account-each-time-the-ticket-holder-makes-a-journey-on-the-bus-the-price-of-the-fare-is-deducted-from-the-amount-held-in-the-account-they-can-top-up-the-amount-at-any-time-a-contract-ticket-holder-pays-a-fixed-fee-per-month-they-can-then-make-unlimited-journeys-on-the-bus-the-bus-company-wants-a-program-to-process-the-season-ticket-data-the-program-will-be-written-using-an-object-oriented-programming-language",children:"2 A bus company in a town has two types of season ticket for their regular customers: pay-as-you go and contract. All season ticket holders have their name and email address recorded. A pay-as-you-go ticket holder pays a chosen amount into their account. Each time the ticket holder makes a journey on the bus, the price of the fare is deducted from the amount held in the account. They can top up the amount at any time. A contract ticket holder pays a fixed fee per month. They can then make unlimited journeys on the bus. The bus company wants a program to process the season ticket data. The program will be written using an object-oriented programming language."}),"\n",(0,n.jsx)(r.h4,{id:"a-complete-the-class-diagram-showing-the-appropriate-attributes-and-methods-7",children:"a Complete the class diagram showing the appropriate attributes and methods. [7]"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"+-------------------------------------+\r\n|          SeasonTicketHolder         |\r\n+-------------------------------------+\r\n| - TicketHolderName: STRING          |\r\n+-------------------------------------+\r\n| + Constructor()                     |\r\n| + DeductFare(amount: CURRENCY)      |\r\n| + TopUp(amount: CURRENCY)           |\r\n+-------------------------------------+\r\n                       |\r\n                       |\r\n                       |\r\n+-------------------------------------+\r\n|     PayAsYouGoTicketHolder          |\r\n+-------------------------------------+\r\n| - AccountBalance: CURRENCY          |\r\n+-------------------------------------+\r\n| + Constructor(Name: STRING,         |\r\n|                email: STRING)       |\r\n| + DeductFare(amount: CURRENCY)      |\r\n| + TopUp(amount: CURRENCY)           |\r\n+-------------------------------------+\r\n                       |\r\n                       |\r\n                       |\r\n+-------------------------------------+\r\n|     ContractTicketHolder            |\r\n+-------------------------------------+\r\n| - MonthlyFee: CURRENCY              |\r\n+-------------------------------------+\r\n| + Constructor(Name: STRING,         |\r\n|                email: STRING,       |\r\n|                Fee: CURRENCY)       |\r\n| + DeductMonthlyFee()                |\r\n+-------------------------------------+\n"})}),"\n",(0,n.jsx)(r.h4,{id:"b-attributes-and-methods-can-be-declared-as-either-public-or-private-i-explain-why-the-seasonticketholder-attributes-are-declared-as-private-2",children:"b Attributes and methods can be declared as either public or private. i Explain why the SeasonTicketHolder attributes are declared as private. [2]"}),"\n",(0,n.jsx)(r.p,{children:"This ensures data encapsulation, maintaining control over data access, enforcing rules, abstracting implementation details, promoting flexibility, and enhancing security."}),"\n",(0,n.jsx)(r.h4,{id:"ii-explain-why-the-seasonticketholder-methods-have-been-declared-as-public-2",children:"ii Explain why the SeasonTicketHolder methods have been declared as public. [2]"}),"\n",(0,n.jsx)(r.p,{children:"This allows external code to interact with and utilize the essential functionalities provided by the class"}),"\n",(0,n.jsxs)(r.h4,{id:"write-program-code-to-create-a-new-instance-of-contractticketholder-with--identifier-newcustomer--name-a-smith--email-address-xyzabcxx--monthly-fee-10",children:["Write program code to create a new instance of ContractTicketHolder with: \u2022 Identifier: NewCustomer \u2022 name: A. Smith \u2022 email address: ",(0,n.jsx)(r.a,{href:"mailto:xyz@abc.xx",children:"xyz@abc.xx"})," \u2022 monthly fee: $10"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'class ContractTicketHolder:\r\n    def __init__(self, name, email, monthly_fee):\r\n        self.name = name\r\n        self.email = email\r\n        self.monthly_fee = monthly_fee\r\n\r\n# Creating a new instance of ContractTicketHolder\r\nnew_customer = ContractTicketHolder("A. Smith", "xyz@abc.xx", 10)\n'})}),"\n",(0,n.jsx)(r.h2,{id:"question-3",children:"Question 3"}),"\n",(0,n.jsx)(r.h4,{id:"3-a-queue-abstract-data-type-adt-is-to-be-implemented-using-object-oriented-programming-two-classes-have-been-identified-queue-and-node-the-class-diagrams-are-as-follows",children:"3 A queue abstract data type (ADT) is to be implemented using object-oriented programming. Two classes have been identified: Queue and Node. The class diagrams are as follows:"}),"\n",(0,n.jsx)(r.h4,{id:"a-state-the-relationship-between-these-two-classes-1",children:"a State the relationship between these two classes. [1]"}),"\n",(0,n.jsx)(r.p,{children:"Composition?"}),"\n",(0,n.jsx)(r.h4,{id:"b-b-the-nodeclass-constructor-is-to--create-a-new-node--initialise-the-data-attribute-to-the-empty-string--initialise-the-pointer-attribute-to--1-write-program-code-to-define-nodeclass-including-the-get-and-set-methods-10",children:"b b The NodeClass constructor is to: \u2022 create a new node \u2022 initialise the Data attribute to the empty string \u2022 initialise the Pointer attribute to -1. Write program code to define NodeClass, including the get and set methods. [10]"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'class NodeClass:\r\n    def __init__(self):\r\n        self._data = ""\r\n        self._pointer = -1\r\n\r\n    @property\r\n    def data(self):\r\n        return self._data\r\n\r\n    @data.setter\r\n    def data(self, value):\r\n        self._data = value\r\n\r\n    @property\r\n    def pointer(self):\r\n        return self._pointer\r\n\r\n    @pointer.setter\r\n    def pointer(self, value):\r\n        self._pointer = value\r\n\r\n# Example usage:\r\n# Creating a new node and setting/getting attributes\r\nnode = NodeClass()\r\nnode.data = "Hello"\r\nnode.pointer = 42\r\n\r\nprint("Data:", node.data)\r\nprint("Pointer:", node.pointer)\n'})}),"\n",(0,n.jsx)(r.h4,{id:"c-the-queueclass-constructor-is-to--create-a-new-queue--initialise-the-head-and-tail-attributes-to--1-write-program-code-to-define-the-constructor-for-queueclass-3",children:"c The QueueClass constructor is to: \u2022 create a new queue \u2022 initialise the Head and Tail attributes to -1. Write program code to define the constructor for QueueClass. [3]"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'class QueueClass:\r\n    def __init__(self):\r\n        self.queue = [None] * 51  # Assuming a queue size of 51 (0 to 50)\r\n        self.head = -1\r\n        self.tail = -1\r\n\r\n# Example usage:\r\n# Creating a new queue\r\nmy_queue = QueueClass()\r\n\r\n# Accessing head and tail attributes\r\nprint("Head:", my_queue.head)\r\nprint("Tail:", my_queue.tail)\n'})}),"\n",(0,n.jsx)(r.h4,{id:"d-the-joinqueue-method-is-to--create-a-new-object-node-of-nodeclass--assign-the-value-passed-as-parameter-to-the-data-attribute-of-node--assign-node-to-the-end-of-queue-write-program-code-to-define-the-joinqueue-method-5",children:"d The JoinQueue method is to: \u2022 create a new object, Node, of NodeClass \u2022 assign the value passed as parameter to the Data attribute of Node \u2022 assign Node to the end of Queue. Write program code to define the JoinQueue method. [5]"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'class QueueClass:\r\n    def __init__(self):\r\n        self.queue = [None] * 51  # Assuming a queue size of 51 (0 to 50)\r\n        self.head = -1\r\n        self.tail = -1\r\n\r\n    def join_queue(self, new_item):\r\n        if self.tail < 50:\r\n            new_node = NodeClass()\r\n            new_node.data = new_item\r\n            self.tail += 1\r\n            self.queue[self.tail] = new_node\r\n        else:\r\n            print("Queue is full. Cannot add new item.")\r\n\r\n# Example usage:\r\n# Creating a new queue\r\nmy_queue = QueueClass()\r\n\r\n# Joining the queue with a new item\r\nmy_queue.join_queue("New Data")\r\n\r\n# Accessing head, tail, and the new item in the queue\r\nprint("Head:", my_queue.head)\r\nprint("Tail:", my_queue.tail)\r\nprint("New item in the queue:", my_queue.queue[my_queue.tail].data)\n'})})]})}function u(e={}){const{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},6213:(e,r,t)=>{t.d(r,{Z:()=>i,a:()=>o});var n=t(959);const s={},a=n.createContext(s);function o(e){const r=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);