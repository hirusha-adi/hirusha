"use strict";(self.webpackChunkhirusha=self.webpackChunkhirusha||[]).push([[4061],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var u=n.createContext({}),s=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=s(a),c=l,k=d["".concat(u,".").concat(c)]||d[c]||m[c]||r;return a?n.createElement(k,i(i({ref:t},p),{},{components:a})):n.createElement(k,i({ref:t},p))}));function k(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=c;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[d]="string"==typeof e?e:l,i[1]=o;for(var s=2;s<r;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},6135:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var n=a(7462),l=(a(7294),a(3905));const r={title:"Pseudocode",sidebar_label:"Pseudocode",slug:"pseudocode",sidebar_position:3},i=void 0,o={unversionedId:"study/cie_al/computer_science/paper_2/my_revision_notes/basics/pseudocode",id:"study/cie_al/computer_science/paper_2/my_revision_notes/basics/pseudocode",title:"Pseudocode",description:"Introduction",source:"@site/docs/study/cie_al/computer_science/paper_2/my_revision_notes/basics/pseudocode.md",sourceDirName:"study/cie_al/computer_science/paper_2/my_revision_notes/basics",slug:"/study/cie_al/computer_science/paper_2/my_revision_notes/basics/pseudocode",permalink:"/docs/study/cie_al/computer_science/paper_2/my_revision_notes/basics/pseudocode",draft:!1,editUrl:"https://github.com/hirusha-adi/hirusha/tree/main/docs/study/cie_al/computer_science/paper_2/my_revision_notes/basics/pseudocode.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Pseudocode",sidebar_label:"Pseudocode",slug:"pseudocode",sidebar_position:3},sidebar:"study",previous:{title:"Data Types",permalink:"/docs/study/cie_al/computer_science/paper_2/my_revision_notes/basics/data_types"},next:{title:"File Handling",permalink:"/docs/study/cie_al/computer_science/paper_2/my_revision_notes/basics/file_handling"}},u={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Features",id:"features",level:3},{value:"Modular Approach",id:"modular-approach",level:2},{value:"How?",id:"how",level:3},{value:"Advantages",id:"advantages",level:3},{value:"Procedures",id:"procedures",level:2},{value:"What is a Procedure Interface?",id:"what-is-a-procedure-interface",level:3},{value:"Functions",id:"functions",level:2},{value:"Describe the Function Interface?",id:"describe-the-function-interface",level:3},{value:"Combining multiple functions into one",id:"combining-multiple-functions-into-one",level:3},{value:"Passing Paramaters",id:"passing-paramaters",level:2},{value:"What is a Parameter?",id:"what-is-a-parameter",level:3},{value:"By Reference (<code>BYREF</code>)",id:"by-reference-byref",level:3},{value:"By Value (<code>BYVAL</code>)",id:"by-value-byval",level:3},{value:"Declarations",id:"declarations",level:2},{value:"Variable",id:"variable",level:3},{value:"Array",id:"array",level:3},{value:"Variables",id:"variables",level:2},{value:"Variable Names",id:"variable-names",level:3},{value:"Good Variable Names?",id:"good-variable-names",level:3},{value:"Local",id:"local",level:3},{value:"Global",id:"global",level:3},{value:"Assignment",id:"assignment",level:3},{value:"Swapping two variables",id:"swapping-two-variables",level:3},{value:"Identifier Table",id:"identifier-table",level:3},{value:"Example:",id:"example",level:4},{value:"Logic Statmenets / Conditionals",id:"logic-statmenets--conditionals",level:2},{value:"Syntax",id:"syntax",level:3},{value:"ELSE IF",id:"else-if",level:3},{value:"Relational Operators",id:"relational-operators",level:3},{value:"Repition",id:"repition",level:2},{value:"<code>REPEAT</code> ... <code>UNTIL</code>",id:"repeat--until",level:3},{value:"<code>FOR</code> ... <code>NEXT</code>",id:"for--next",level:3},{value:"Nested Loops",id:"nested-loops",level:3}],p={toc:s},d="wrapper";function m(e){let{components:t,...a}=e;return(0,l.kt)(d,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("h3",{id:"features"},"Features"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"meaningful variable names"),(0,l.kt)("li",{parentName:"ul"},"indentation"),(0,l.kt)("li",{parentName:"ul"},"capitalization of keywords"),(0,l.kt)("li",{parentName:"ul"},"whitespace"),(0,l.kt)("li",{parentName:"ul"},"comments"),(0,l.kt)("li",{parentName:"ul"},"local variables")),(0,l.kt)("h2",{id:"modular-approach"},"Modular Approach"),(0,l.kt)("h3",{id:"how"},"How?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"use of procedures/functions"),(0,l.kt)("li",{parentName:"ul"},"use of local variables")),(0,l.kt)("h3",{id:"advantages"},"Advantages"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"to increase the modularity of the code"),(0,l.kt)("li",{parentName:"ul"},"too ru-use the same code"),(0,l.kt)("li",{parentName:"ul"},"reduces complexity"),(0,l.kt)("li",{parentName:"ul"},"easier testing and debugging")),(0,l.kt)("h2",{id:"procedures"},"Procedures"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a sequence of steps that is given an identifier and can be called to perform a sub-task")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"PROCEDURE ProcedureName(BYREF Name: STRING)\n    // code\nENDPROCEDURE\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"they are called like this")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"CALL ProcedureName()\n")),(0,l.kt)("h3",{id:"what-is-a-procedure-interface"},"What is a Procedure Interface?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"provides mechanism to allow calling program to pass data "),(0,l.kt)("li",{parentName:"ul"},"defines paramaters of a procedure"),(0,l.kt)("li",{parentName:"ul"},"... giving their data type and order ")),(0,l.kt)("h2",{id:"functions"},"Functions"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a sequence of steps that is given an identifier and returns a single value; function call is part")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"FUNCTION FuncName(Name: STRING, Price: REAL, BYREF Value: CHAR) RETURNS BOOLEAN\n    // code\nENDFUNCTION\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"as a function resturns a value, we assign it to a variable")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"MyVar <- FuncName()\n")),(0,l.kt)("h3",{id:"describe-the-function-interface"},"Describe the Function Interface?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"basically tell name + datatype of paramaters and return values ")),(0,l.kt)("h3",{id:"combining-multiple-functions-into-one"},"Combining multiple functions into one"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"paramaters needs to be passed to the module to identify the type of thing we want to do")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"the algorithm will be controlled by global variables / parameters")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"good"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"aids re-usability"),(0,l.kt)("li",{parentName:"ul"},"less repititive code"),(0,l.kt)("li",{parentName:"ul"},"only have to change one module if needed"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"bad"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"a single module can be more complex"),(0,l.kt)("li",{parentName:"ul"},"cannot be split among different teams")))),(0,l.kt)("h2",{id:"passing-paramaters"},"Passing Paramaters"),(0,l.kt)("h3",{id:"what-is-a-parameter"},"What is a Parameter?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a value passed between modules")),(0,l.kt)("h3",{id:"by-reference-byref"},"By Reference (",(0,l.kt)("inlineCode",{parentName:"h3"},"BYREF"),")"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"a pointer of addres of the variable is passed ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"original is changed when paramater is changed ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"original variable passed in is updated")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("em",{parentName:"p"},"look for erros in it")))),(0,l.kt)("h3",{id:"by-value-byval"},"By Value (",(0,l.kt)("inlineCode",{parentName:"h3"},"BYVAL"),")"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a copy of that variable is passed (its value)"),(0,l.kt)("li",{parentName:"ul"},"the original variable is not changed")),(0,l.kt)("h2",{id:"declarations"},"Declarations"),(0,l.kt)("h3",{id:"variable"},"Variable"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"DECLARE MyVar: INTEGER\n")),(0,l.kt)("h3",{id:"array"},"Array"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the data type can also be a user defined type (record)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"DECLARE MyArr: ARRAY[1:100] OF INTEGER\n")),(0,l.kt)("h2",{id:"variables"},"Variables"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"all variables should be declared before being initialized")),(0,l.kt)("h3",{id:"variable-names"},"Variable Names"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"variable name should give a proper meaning"),(0,l.kt)("li",{parentName:"ul"},"eg:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Temp")," : the name doesn't indicate what its used for")))),(0,l.kt)("h3",{id:"good-variable-names"},"Good Variable Names?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"makes code easier to understand"),(0,l.kt)("li",{parentName:"ul"},"describes the purpose of the identifier"),(0,l.kt)("li",{parentName:"ul"},"makes cost easier to debug / maintain")),(0,l.kt)("h3",{id:"local"},"Local"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a variable that is accessible only within the module in which it is declared")),(0,l.kt)("h3",{id:"global"},"Global"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a variable that is accessible from all modules")),(0,l.kt)("h3",{id:"assignment"},"Assignment"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'Name <- "Hirusha"\n')),(0,l.kt)("h3",{id:"swapping-two-variables"},"Swapping two variables"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"use a temporary variable here")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Temp \u2190 Value1\nValue1 \u2190 Value2\nValue2 \u2190 Temp\n")),(0,l.kt)("h3",{id:"identifier-table"},"Identifier Table"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a table listing the variable identifiers required for the solution, "),(0,l.kt)("li",{parentName:"ul"},"with explanations "),(0,l.kt)("li",{parentName:"ul"},"and data types "),(0,l.kt)("li",{parentName:"ul"},"and examples"),(0,l.kt)("li",{parentName:"ul"},"is also provided by the debugger")),(0,l.kt)("h4",{id:"example"},"Example:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Identifier"),(0,l.kt)("th",{parentName:"tr",align:null},"Explanation"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"BiggestSoFar"),(0,l.kt)("td",{parentName:"tr",align:null},"Stores the biggest number input so far")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"NextNumber"),(0,l.kt)("td",{parentName:"tr",align:null},"The next number to be input")))),(0,l.kt)("h2",{id:"logic-statmenets--conditionals"},"Logic Statmenets / Conditionals"),(0,l.kt)("h3",{id:"syntax"},"Syntax"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"A < B")," is the ",(0,l.kt)("strong",{parentName:"li"},"condition")," ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"IF A < B\nTHEN\n    <statement(s)>\nELSE\n    <statement(s)>\nENDIF\n")),(0,l.kt)("h3",{id:"else-if"},"ELSE IF"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"NO")," ELSE IF / ELIF in pseudocode"),(0,l.kt)("li",{parentName:"ul"},"use nested conditionals instead (Conditionals within one conditional)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"IF A < B THEN\n    IF B < C THEN\n        <statement(s)>\n    ELSE\n        <statement(s)>\n    ENDIF\nELSE\n    <statement(s)>\nENDIF\n")),(0,l.kt)("h3",{id:"relational-operators"},"Relational Operators"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operator"),(0,l.kt)("th",{parentName:"tr",align:null},"Comparison"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"="),(0,l.kt)("td",{parentName:"tr",align:null},"Is equal to")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"<"),(0,l.kt)("td",{parentName:"tr",align:null},"Is less than")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},">"),(0,l.kt)("td",{parentName:"tr",align:null},"Is greater than")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"<="),(0,l.kt)("td",{parentName:"tr",align:null},"Is less than or equal to")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},">="),(0,l.kt)("td",{parentName:"tr",align:null},"Is greater than or equal to")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"< >"),(0,l.kt)("td",{parentName:"tr",align:null},"Is not equal to")))),(0,l.kt)("h2",{id:"repition"},"Repition"),(0,l.kt)("h3",{id:"repeat--until"},(0,l.kt)("inlineCode",{parentName:"h3"},"REPEAT")," ... ",(0,l.kt)("inlineCode",{parentName:"h3"},"UNTIL")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if condition is met in ",(0,l.kt)("em",{parentName:"li"},"n")," th iteration, ",(0,l.kt)("em",{parentName:"li"},"n+1")," will also be executed "),(0,l.kt)("li",{parentName:"ul"},"and then the loop will be terminated")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"REPEAT\n    <condition(s)>\nUNTIL <condition>\n")),(0,l.kt)("h3",{id:"for--next"},(0,l.kt)("inlineCode",{parentName:"h3"},"FOR")," ... ",(0,l.kt)("inlineCode",{parentName:"h3"},"NEXT")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"use when working with arrays")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'FOR Index \u2190 2 TO 10\n    MyArr[Index] <- "" // initialize 2->10 elements of array\nNEXT Index\n')),(0,l.kt)("h3",{id:"nested-loops"},"Nested Loops"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"we use comments to indicate weather to go to a new line or not"),(0,l.kt)("li",{parentName:"ul"},"as ",(0,l.kt)("inlineCode",{parentName:"li"},"\\n")," is not available in pseudocode")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"INPUT NumberOfRows\nINPUT NumberOfColumns\nINPUT Symbol\n\nFOR RowCounter \u2190 1 TO NumberOfRows\n    FOR ColumnCounter \u2190 1 TO NumberOfColumns\n        OUTPUT Symbol // without moving to next line\n    NEXT ColumnCounter\n    OUTPUT Newline // move to the next line\nNEXT RowCounter\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"this will be the output for these input values:  ",(0,l.kt)("em",{parentName:"li"},"3, 7 and &"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"&&&&&&&\n&&&&&&&\n&&&&&&&\n")))}m.isMDXComponent=!0}}]);