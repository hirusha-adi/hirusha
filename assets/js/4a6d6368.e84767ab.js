"use strict";(self.webpackChunkhirusha=self.webpackChunkhirusha||[]).push([[4742],{2030:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>o});var r=i(1527),s=i(6213);const l={title:"Data Types",sidebar_label:"Data Types",slug:"data_types",sidebar_position:2},d=void 0,a={id:"study/cie_al/computer_science/paper_2/my_revision_notes/basics/data_types",title:"Data Types",description:"some knowledge of pseudocode is required to understand this",source:"@site/docs/study/cie_al/computer_science/paper_2/my_revision_notes/basics/data_types.md",sourceDirName:"study/cie_al/computer_science/paper_2/my_revision_notes/basics",slug:"/study/cie_al/computer_science/paper_2/my_revision_notes/basics/data_types",permalink:"/docs/study/cie_al/computer_science/paper_2/my_revision_notes/basics/data_types",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Data Types",sidebar_label:"Data Types",slug:"data_types",sidebar_position:2},sidebar:"study",previous:{title:"Introduction",permalink:"/docs/study/cie_al/computer_science/paper_2/my_revision_notes/basics/introduction"},next:{title:"File Handling",permalink:"/docs/study/cie_al/computer_science/paper_2/my_revision_notes/basics/file_handling"}},t={},o=[{value:"Contstants",id:"contstants",level:2},{value:"Why use Constants?",id:"why-use-constants",level:3},{value:"String (<code>STRING</code>)",id:"string-string",level:2},{value:"Char (<code>CHAR</code>)",id:"char-char",level:2},{value:"Real (<code>REAL</code>)",id:"real-real",level:2},{value:"Integer (<code>INTEGER</code>)",id:"integer-integer",level:2},{value:"<code>REAL</code> to <code>INTEGER</code>",id:"real-to-integer",level:3},{value:"Boolean (<code>BOOL</code>)",id:"boolean-bool",level:2},{value:"Why use Booleans?",id:"why-use-booleans",level:3},{value:"Date (<code>DATE</code>)",id:"date-date",level:2},{value:"Introduction",id:"introduction",level:3},{value:"Remaining Duration",id:"remaining-duration",level:3},{value:"Day Index",id:"day-index",level:3},{value:"How to do it?",id:"how-to-do-it",level:4},{value:"Age Verification",id:"age-verification",level:3},{value:"Records",id:"records",level:2},{value:"Why use Records?",id:"why-use-records",level:3},{value:"Arrays",id:"arrays",level:2},{value:"Introduction",id:"introduction-1",level:3},{value:"Initializing all elements",id:"initializing-all-elements",level:3},{value:"2D Arrays",id:"2d-arrays",level:3},{value:"Syntax:",id:"syntax",level:4},{value:"Assigning Values",id:"assigning-values",level:4},{value:"Linear Search",id:"linear-search",level:3},{value:"Bubble Sort",id:"bubble-sort",level:3},{value:"Example",id:"example",level:4},{value:"Why use Arrays?",id:"why-use-arrays",level:3},{value:"Array Index",id:"array-index",level:3},{value:"Why use a single Array with User Defined Data types (Records)?",id:"why-use-a-single-array-with-user-defined-data-types-records",level:3},{value:"Why indicate unused Array elements?",id:"why-indicate-unused-array-elements",level:3},{value:"How to indicate an unused Array element?",id:"how-to-indicate-an-unused-array-element",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.admonition,{title:"note",type:"caution",children:(0,r.jsx)(n.p,{children:"some knowledge of pseudocode is required to understand this"})}),"\n",(0,r.jsx)(n.h2,{id:"contstants",children:"Contstants"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"no need to be declared seperately"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'CONSTANT MyVar <- "hirusha"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"why-use-constants",children:"Why use Constants?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"value is entered only once"}),"\n",(0,r.jsx)(n.li,{children:"avoids accidental changs in that value"}),"\n",(0,r.jsx)(n.li,{children:"when needed, can easily change the value"}),"\n",(0,r.jsx)(n.li,{children:"makes the program easier to understand"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"string-string",children:["String (",(0,r.jsx)(n.code,{children:"STRING"}),")"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'DECLARE MyVar: STRING\r\nMyVar <- "hirusha"\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"char-char",children:["Char (",(0,r.jsx)(n.code,{children:"CHAR"}),")"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"DECLARE MyVar: CHAR\r\nMyVar <- 'A'\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"real-real",children:["Real (",(0,r.jsx)(n.code,{children:"REAL"}),")"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"DECLARE MyVar: REAL\r\nMyVar <- 69.69\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"integer-integer",children:["Integer (",(0,r.jsx)(n.code,{children:"INTEGER"}),")"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"DECLARE MyVar: INTEGER\r\nMyVar <- 69\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"real-to-integer",children:[(0,r.jsx)(n.code,{children:"REAL"})," to ",(0,r.jsx)(n.code,{children:"INTEGER"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["use ",(0,r.jsx)(n.code,{children:"INT"})," function (available in INSERT)"]}),"\n",(0,r.jsx)(n.li,{children:"Does NOT round off the number"}),"\n",(0,r.jsx)(n.li,{children:"take only the integer part"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"DECLARE MyVar1: INTEGER\r\nDECLARE MyVar2: REAL\r\n\r\nMyVar1 <- 69.875\r\nMyVar2 <- INT(MyVar1)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"MyVar2"})," will have the value ",(0,r.jsx)(n.code,{children:"69"})," according the aforementioned reasons"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"boolean-bool",children:["Boolean (",(0,r.jsx)(n.code,{children:"BOOL"}),")"]}),"\n",(0,r.jsx)(n.h3,{id:"why-use-booleans",children:"Why use Booleans?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"to terminate a conditional loop"}),"\n",(0,r.jsx)(n.li,{children:"when variables need to store only 1 value"}),"\n",(0,r.jsx)(n.li,{children:"eg: light is ON or light is OFF"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"date-date",children:["Date (",(0,r.jsx)(n.code,{children:"DATE"}),")"]}),"\n",(0,r.jsx)(n.h3,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)(n.admonition,{title:"note",type:"tip",children:(0,r.jsxs)(n.p,{children:["all the functions under the ",(0,r.jsx)(n.a,{href:"#date-date",children:"Date section"})," is given in the insert"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"DECLARE MyDate: DATE\r\nMyDate <- SETDATE(18, 10, 2023)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"remaining-duration",children:"Remaining Duration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"RemainMonths <- 12 - MONTH(MyDate)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"day-index",children:"Day Index"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["refer to the ",(0,r.jsx)(n.em,{children:"insert"})]}),"\n",(0,r.jsx)(n.li,{children:"used to tell weather the day is Monday...Friday"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"how-to-do-it",children:"How to do it?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"refer to Insert"}),"\n",(0,r.jsx)(n.li,{children:"store 7 Days as strings in a 1D array"}),"\n",(0,r.jsxs)(n.li,{children:["get ",(0,r.jsx)(n.code,{children:"DAYINDEX(Date)"})," and use it as index to the array with strings"]}),"\n",(0,r.jsx)(n.li,{children:"output the relevant day"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"age-verification",children:"Age Verification"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"day is usually not needed"}),"\n",(0,r.jsx)(n.li,{children:"ONLY month AND year is fine"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"records",children:"Records"}),"\n",(0,r.jsx)(n.h3,{id:"why-use-records",children:"Why use Records?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"allows different data types to be stored under one identifier"}),"\n",(0,r.jsx)(n.li,{children:"used when implementing Linked Lists"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"TYPE Person\r\n\tDECLARE Name: STRING\r\n\tDECLARE ID: INTEGER\r\nENDTYPE\n"})}),"\n",(0,r.jsx)(n.h2,{id:"arrays",children:"Arrays"}),"\n",(0,r.jsx)(n.h3,{id:"introduction-1",children:"Introduction"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"the type can also be a Record"}),"\n",(0,r.jsxs)(n.li,{children:["in here, the","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Lower Bound"})," is 1"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Upper Bound"})," is 100"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"DECLARE People: ARRAY[1:100] OF Person\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"assigning a value to 5th element of array"}),"\n",(0,r.jsxs)(n.li,{children:["in here, the","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"#array-index",children:"Array Index"})})," is 5"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'People[5].Name <- "Hirusha"\r\nPeople[5].ID <- 69\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["the ID can be accessed using the index, of eg: a for loop (similiarly to the ",(0,r.jsx)(n.a,{href:"#initializing-all-elements",children:"Initializing all elements section"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"initializing-all-elements",children:"Initializing all elements"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'DECLARE Index: INTEGER\r\nDECLARE ArrName: ARRAY[1:100] OF STRING\r\nFOR Index <- 1 to 100 \r\n\tArrName[Index] <- ""\r\nNEXT Index\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2d-arrays",children:"2D Arrays"}),"\n",(0,r.jsx)(n.h4,{id:"syntax",children:"Syntax:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"first dimension has 6 elements"}),"\n",(0,r.jsx)(n.li,{children:"second dimension has 7 elements"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"DECLARE Board : ARRAY[1:6,1:7] OF INTEGER\n"})}),"\n",(0,r.jsx)(n.h4,{id:"assigning-values",children:"Assigning Values"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Board[3,4] \u2190 0 // sets the element in row 3 and column 4 to zero\n"})}),"\n",(0,r.jsx)(n.h3,{id:"linear-search",children:"Linear Search"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"checking each element of an array in turn for a required value"}),"\n",(0,r.jsx)(n.li,{children:"100 is the array upper bound"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"MaxIndex \u2190 6\r\nINPUT SearchValue\r\nFound \u2190 FALSE\r\nIndex \u2190 \u20131\r\n\r\nREPEAT\r\n \tIndex \u2190 Index + 1\r\n \tIF MyList[Index] = SearchValue\r\n \tTHEN\r\n \t\tFound \u2190 TRUE\r\n \tENDIF\r\nUNTIL FOUND = TRUE OR Index >= MaxIndex\n"})}),"\n",(0,r.jsx)(n.h3,{id:"bubble-sort",children:"Bubble Sort"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Bad runtime: O(n^2) in worst case"}),"\n",(0,r.jsx)(n.li,{children:"a sorting method where adjacent pairs of values are compared and swapped until array is fully sorted"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.youtube.com/watch?v=Jdtq5uKz-w4",children:"Click here"})," to learn more"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Pseudocode"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"MaxIndex \u2190 6\r\nINPUT SearchValue\r\nFound \u2190 FALSE\r\nIndex \u2190 \u20131\r\n\r\nREPEAT\r\n \tIndex \u2190 Index + 1\r\n \tIF MyList[Index] = SearchValue\r\n \tTHEN\r\n \t\tFound \u2190 TRUE\r\n \tENDIF\r\nUNTIL FOUND = TRUE OR Index >= MaxIndex\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Python (Explained with comments)"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def while_for_implentation(list_a):\r\n    indexing_length = len(list_a) - 1  # Snan not apply comparision starting with last item of list (No item to right)\r\n    sorted = False  # Create variable of sorted and set it equal to false\r\n\r\n    while not sorted:  # Repeat until sorted = True\r\n        sorted = True  # Break the while loop whenever we have gone through all the values\r\n\r\n        for i in range(0, indexing_length):  # For every value in the list\r\n            if list_a[i]:  # "Angled brackets not allowed in Youtube Description :( list_a[i+1]: #if value in list is greater than value directly to the right of it,\r\n                sorted = False  # These values are unsorted\r\n                list_a[i], list_a[i+1] = list_a[i+1], list_a[i]  # Switch these values\r\n    return list_a  # Return our list "unsorted_list" which is not sorted.\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Python (Code only)"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def while_for_implentation(list_a):\r\n    indexing_length = len(list_a) - 1\r\n    sorted = False \r\n    while not sorted:  \r\n        sorted = True  \r\n        for i in range(0, indexing_length): \r\n            if list_a[i]:\r\n                sorted = False \r\n                list_a[i], list_a[i+1] = list_a[i+1], list_a[i] \r\n    return list_a \n"})}),"\n",(0,r.jsx)(n.h3,{id:"why-use-arrays",children:"Why use Arrays?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"can write algortihms to process/search/sort data"}),"\n",(0,r.jsx)(n.li,{children:"can be easily iterated through (using an Index)"}),"\n",(0,r.jsx)(n.li,{children:"makes the program easier to understand"}),"\n",(0,r.jsx)(n.li,{children:"multiple instances can be referenced via a single identifier"}),"\n",(0,r.jsx)(n.li,{children:"easier to change when number of items increase"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"array-index",children:"Array Index"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"references individual element in array"}),"\n",(0,r.jsx)(n.li,{children:"provides the index to array"}),"\n",(0,r.jsxs)(n.li,{children:["of type ",(0,r.jsx)(n.code,{children:"INTEGER"})]}),"\n",(0,r.jsxs)(n.li,{children:["when in loop, use ",(0,r.jsx)(n.strong,{children:"loop counter"})," as array index"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"why-use-a-single-array-with-user-defined-data-types-records",children:"Why use a single Array with User Defined Data types (Records)?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"multiple data types under 1 identifier"}),"\n",(0,r.jsx)(n.li,{children:"can be referenced together"}),"\n",(0,r.jsx)(n.li,{children:"(has a closer association)"}),"\n",(0,r.jsx)(n.li,{children:"program is easier to deisgn and maintain"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"why-indicate-unused-array-elements",children:"Why indicate unused Array elements?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"to recognize unused elements easily"}),"\n",(0,r.jsx)(n.li,{children:"otherwise, element may contain unexpected data"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"how-to-indicate-an-unused-array-element",children:"How to indicate an unused Array element?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"assign a value outside the normal range"}),"\n",(0,r.jsx)(n.li,{children:"assign a bogus values"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},6213:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>d});var r=i(959);const s={},l=r.createContext(s);function d(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);