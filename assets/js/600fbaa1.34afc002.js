"use strict";(self.webpackChunkhirusha=self.webpackChunkhirusha||[]).push([[4211],{64641:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>o});var s=i(11527),r=i(56213);const l={title:"Notes - Data Representation",sidebar_label:"Both",slug:"both",sidebar_position:2},t=void 0,d={id:"study/cie_al/computer_science/paper_3/my_revision_notes/chapter_16/both",title:"Notes - Data Representation",description:"- opposite of overflow is underflow",source:"@site/docs/study/cie_al/computer_science/paper_3/my_revision_notes/chapter_16/both.md",sourceDirName:"study/cie_al/computer_science/paper_3/my_revision_notes/chapter_16",slug:"/study/cie_al/computer_science/paper_3/my_revision_notes/chapter_16/both",permalink:"/docs/study/cie_al/computer_science/paper_3/my_revision_notes/chapter_16/both",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Notes - Data Representation",sidebar_label:"Both",slug:"both",sidebar_position:2},sidebar:"study",previous:{title:"9618",permalink:"/docs/study/cie_al/computer_science/paper_3/my_revision_notes/chapter_16/9618"},next:{title:"Chapter 17 - Communication and Internet technologies",permalink:"/docs/study/cie_al/computer_science/paper_3/my_revision_notes/chapter_17/"}},a={},o=[];function c(e){const n={code:"code",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"opposite of overflow is underflow"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"mantissa-exponent form"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"normalized:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["examples:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"1.0000 x 2^3"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"0.0000 x 2^3"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"be able to identify normalized and not-normalized form"}),"\n",(0,s.jsxs)(n.li,{children:["is not normalized?","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"first two bits of the mantissa should be different for normalized number"}),"\n",(0,s.jsx)(n.li,{children:"because the mantissa starts with 00"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["when not normalized (problems)?","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"precision is lost"}),"\n",(0,s.jsx)(n.li,{children:"redundant leading zeros in mantisaa"}),"\n",(0,s.jsx)(n.li,{children:"bits lost off right hand (least significant side)"}),"\n",(0,s.jsx)(n.li,{children:"multiple representations of a single number"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"when allocating less bits to mantissa"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"reduction in precision"}),"\n",(0,s.jsx)(n.li,{children:"as the number of bits in the mantissa has decreased"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"when allocating more bits to exponent"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"increase in range"}),"\n",(0,s.jsx)(n.li,{children:"as the number of bits in the exponent has increased"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"in both of the cases above, first check for the bits needed to answer the question,"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'if less, tell: "not enough bits to store the whole binary number"'}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"trade-off between using either a larger number of bits for the mantissa, or a larger number of bits for the exponent"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"trade-off is between range and precision"}),"\n",(0,s.jsx)(n.li,{children:"any increany in the number of bits for the mantissa means fewer bits available for the exponent"}),"\n",(0,s.jsx)(n.li,{children:"more bits used for the mantissa will result in better precision"}),"\n",(0,s.jsx)(n.li,{children:"more bits used for the exponent will result in a larger range of numbers"}),"\n",(0,s.jsx)(n.li,{children:"fewer bits used for the mantissa will result in worse precision"}),"\n",(0,s.jsx)(n.li,{children:"fewer bits used for the exponent will result in a smaller range of numbers"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"size of mantissa decreased means that precision is reduced"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"size of exponent is increased means that range is increased"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"when data representation of a number of changed (general/universal)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"the number caulculated will change"}),"\n",(0,s.jsx)(n.li,{children:"the same bit pattern is for a different number"}),"\n",(0,s.jsx)(n.li,{children:"software may crash (if not updated)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"why 513 (>511) cannot be stored accurately as a normalized floating point number?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"requires 11 bits to store accurately"}),"\n",(0,s.jsx)(n.li,{children:"reference to maximum (positive) number that can be stored = 511"}),"\n",(0,s.jsxs)(n.li,{children:["denary 513 in binary is 1000000001","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"normalized is 0.1000000001"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"so, results in overflow"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"how store numbers greater than >511?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"the number of bits for the mantissa must be increased"}),"\n",(0,s.jsx)(n.li,{children:"11/12 bits mantissa and 5/4 bits exponent"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"storing a binary number as floating point number"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"good"}),"\n",(0,s.jsxs)(n.li,{children:["bad","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"the precision of the number would be reduced"}),"\n",(0,s.jsx)(n.li,{children:"because the LSB of the original number has been lost (truncated)"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"why binary numbers stored in normalized form?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"to store the maximum range of numbers in the minimum number of bytes"}),"\n",(0,s.jsx)(n.li,{children:"normalization minimises the number of leading zeros / ones represented"}),"\n",(0,s.jsx)(n.li,{children:"maximising the numbers of significant bits // maximising the (potential) precision of the number for the given number of bits"}),"\n",(0,s.jsx)(n.li,{children:"enables very large / small numbers to be stored with accuracy"}),"\n",(0,s.jsx)(n.li,{children:"avoids the possibility of many numbers have multiple representaions"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"when an undeflow (opposite of overflow) occurs in a binary floating point system"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"following an arithmetic/logical operation"}),"\n",(0,s.jsxs)(n.li,{children:["the result is too small to be precisely represented in the avilable system","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"when the number of bits is not enough"}),"\n",(0,s.jsx)(n.li,{children:"too small for the computers allocated word size"}),"\n",(0,s.jsx)(n.li,{children:"to represent the binary number"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"alt text",src:i(67018).Z+"",width:"645",height:"316"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["user defined data types","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"called records"}),"\n",(0,s.jsxs)(n.li,{children:["purpose?","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"to create a new data type (from existing data types)"}),"\n",(0,s.jsxs)(n.li,{children:["to allow data types not available in a programming language to be constructed","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"to extend the flexibility of the programming language"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["user defined types:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"non composite data types"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["pointer data type","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["meaning","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"used to reference a memmory location"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["examples:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["1: note the ",(0,s.jsx)(n.strong,{children:"^"})," infront of Parts"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"// define the reference data type \r\nTYPE Parts = (Monitor, Keyboard, Mouse)\r\n\r\n// use the pointer and reference to Parts\r\nTYPE SelectParts = ^Parts\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["enumerated data type","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["meaning","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"ordered list of possible values"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["examples:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"WeekEnd"})," stores data about the days that are not school days:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'TYPE WeekEnd = (Saturday, Sunday)\r\n// note, they are not "strings", write write the values inside the brackets\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Departement stores one of three values: Sales, Tech, CustomerServices"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"DECLARE Departement: (Sales, Tech, CustomerServices)\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"composite data type"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["record","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["description","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"collection of related items which may have different data types"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["meaning?","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"a data type constructed by a progammer (not a primitive data type)"}),"\n",(0,s.jsx)(n.li,{children:"a data type that references at least one other data type"}),"\n",(0,s.jsx)(n.li,{children:"and data types can be primitive, or user defined"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["examples:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ClubMeet"})," type stores first, last names, the days to stay home without school"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'// our enumerated data type\r\nTYPE WeekEnd = (Saturday, Sunday)\r\n\r\n// composite data type\r\nTYPE ClubMeet\r\n    DECLARE FirstName: STRING\r\n    DECLARE LastName: STRING\r\n    DECLARE Holiday: WeekEnd\r\nENDTYPE\r\n\r\n// declaring our variable\r\nDECLARE TestObj: ClubMeet\r\n\r\n// to assign values\r\nTestObj.FirstName <-- "Hirusha"\r\nTestObj.LastName <-- "Adikari"\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["other composite data types:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["arrays","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"indexed collection of items with same data type"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["sets","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["stores a finite number of different values that have no order","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(values don't repeat)"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"supports mathematical operations"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["lists","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"indexed collection of items that can have different data types"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["class / struct / structure","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"gives properties and methods for an object"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"stack"}),"\n",(0,s.jsx)(n.li,{children:"queue"}),"\n",(0,s.jsx)(n.li,{children:"linked list"}),"\n",(0,s.jsx)(n.li,{children:"dictionary"}),"\n",(0,s.jsx)(n.li,{children:"objects"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"other"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"variable's value should be within 1 and 10 (both start and end are inclusive)"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"DECLARE Copies: 1 .. 10\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"array of custom given type, with index we mentioned we earlier"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"DECLARE Test: ARRAY[1:Copies] OF CustomDataType\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"alt text",src:i(10565).Z+"",width:"736",height:"352"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["file access","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["direct","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["suitable when","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"record is referenced by a unique address on a disk-type storage medium"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["random","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["how a file is accessed?","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"ID is hashed to give address (home location)"}),"\n",(0,s.jsx)(n.li,{children:"compared to ID stored at given address (home location)"}),"\n",(0,s.jsx)(n.li,{children:"if nothing stored, output message 'record not found'"}),"\n",(0,s.jsx)(n.li,{children:"if record IDs equal, then the record is found"}),"\n",(0,s.jsx)(n.li,{children:"if record IDs not equal, search overflow area / next record"}),"\n",(0,s.jsx)(n.li,{children:"until record found or whole area searched"}),"\n",(0,s.jsx)(n.li,{children:"if no record found, error message"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["how to add a new file?","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"ID hashed to give address"}),"\n",(0,s.jsx)(n.li,{children:"check if a record already stored at address"}),"\n",(0,s.jsx)(n.li,{children:"if nothing stored, store a new record"}),"\n",(0,s.jsx)(n.li,{children:"if another record already stored, search overflow data (next record)"}),"\n",(0,s.jsx)(n.li,{children:"until free space found or whole area searched"}),"\n",(0,s.jsx)(n.li,{children:"if no space, output error message"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["how to append to a file?","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"key field is hashed to produce home location"}),"\n",(0,s.jsx)(n.li,{children:"if home location is free, insert record/data"}),"\n",(0,s.jsx)(n.li,{children:"else use overflow method to find free location to store record"}),"\n",(0,s.jsx)(n.li,{children:"if no free location avilable then file is full and records cannot be stored"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["sequential","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["suitable when","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"a bank stores its data records in ascending order of account number"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["how records are organized","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"records are stored in a particular order"}),"\n",(0,s.jsx)(n.li,{children:"the order is determined baxed on the value in a key field"}),"\n",(0,s.jsx)(n.li,{children:"records are accessed one after the other"}),"\n",(0,s.jsx)(n.li,{children:"records can be found by searching from the beginning of the file, record by record"}),"\n",(0,s.jsx)(n.li,{children:"until the required record is found or key feild is exceeded"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["serial","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"description"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["sequential vs serial","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"in both serial and sequential files records are stored one after the other"}),"\n",(0,s.jsx)(n.li,{children:"and need to be accessed one after the other"}),"\n",(0,s.jsx)(n.li,{children:"serial files are stored in chronological order"}),"\n",(0,s.jsx)(n.li,{children:"and stored in the order of the key field"}),"\n",(0,s.jsx)(n.li,{children:"in serial files, new records are added in the next available space / records are appended to the file"}),"\n",(0,s.jsx)(n.li,{children:"in sequential files, new records are intrerested in the correct position"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},67018:(e,n,i)=>{i.d(n,{Z:()=>s});const s=i.p+"assets/images/image-1-8b9d7f3ac6e8dac42024cadf2ec6b0c6.png"},10565:(e,n,i)=>{i.d(n,{Z:()=>s});const s=i.p+"assets/images/image-bb6d5f52574211b2159b276d85cd05fa.png"},56213:(e,n,i)=>{i.d(n,{Z:()=>d,a:()=>t});var s=i(50959);const r={},l=s.createContext(r);function t(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);