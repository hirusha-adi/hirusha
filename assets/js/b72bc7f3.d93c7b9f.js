"use strict";(self.webpackChunkhirusha=self.webpackChunkhirusha||[]).push([[9860],{8954:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>o,frontMatter:()=>t,metadata:()=>c,toc:()=>d});var i=s(11527),r=s(56213);const t={title:"Notes - Other",sidebar_label:9618,slug:9618,sidebar_position:1},l=void 0,c={id:"study/cie_al/computer_science/paper_3/my_revision_notes/other/9618",title:"Notes - Other",description:"- Programming Paradigms",source:"@site/docs/study/cie_al/computer_science/paper_3/my_revision_notes/other/9618.md",sourceDirName:"study/cie_al/computer_science/paper_3/my_revision_notes/other",slug:"/study/cie_al/computer_science/paper_3/my_revision_notes/other/9618",permalink:"/docs/study/cie_al/computer_science/paper_3/my_revision_notes/other/9618",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Notes - Other",sidebar_label:"9618",slug:"9618",sidebar_position:1},sidebar:"study",previous:{title:"Chapter 22 - Other",permalink:"/docs/study/cie_al/computer_science/paper_3/my_revision_notes/other/"},next:{title:"My Study Notes",permalink:"/docs/study/cie_al/computer_science/paper_3/my_study_notes/"}},a={},d=[];function h(e){const n={code:"code",img:"img",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Programming Paradigms\r\n",(0,i.jsx)(n.img,{alt:"alt text",src:s(23594).Z+"",width:"670",height:"569"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Imperative","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["description","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"programs with an explicit sequence of commands that update the program state"}),"\n",(0,i.jsx)(n.li,{children:"with or without procedure calls"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["meaning","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"languages use variables"}),"\n",(0,i.jsx)(n.li,{children:"which are changed using (assignment statements)"}),"\n",(0,i.jsx)(n.li,{children:"they rely on a method of repetition/ iteration"}),"\n",(0,i.jsx)(n.li,{children:"statements provide a sequence of commands for the computer to perform"}),"\n",(0,i.jsx)(n.li,{children:"in the order written"}),"\n",(0,i.jsx)(n.li,{children:"each line of code changes something in the program run"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Declarative","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["description","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Programs that specify the desired result rather than how to get to it."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["meaning","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"instructs a program on what needs to be done instead of how to do it"}),"\n",(0,i.jsx)(n.li,{children:"using facts and rules"}),"\n",(0,i.jsx)(n.li,{children:"using queries to satisfy goals"}),"\n",(0,i.jsxs)(n.li,{children:["can be logical or functional","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"logical: states a program as a set of logical relations"}),"\n",(0,i.jsx)(n.li,{children:"functional: constructed by applying functions to arguments / uses a mathematical style"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Low Level","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["description","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"programs using the instruction set of a processor"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Object Oriented Programming","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["keywords","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["properties","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"data items // attributes"}),"\n",(0,i.jsx)(n.li,{children:"data types // characteristics"}),"\n",(0,i.jsx)(n.li,{children:"defined in a class"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["methods","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"the procedures / functions programmed instructions in a class / super class / base"}),"\n",(0,i.jsx)(n.li,{children:"implementing the behaviors"}),"\n",(0,i.jsx)(n.li,{children:"that act on the properties / attributes"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["getter","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"method used to return the value of a property"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["setter","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"method used to set/update the value of a property"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Concepts","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Abstraction","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"the ability to define classes and methods that represent the common structure and behavior of a group of objects, without providing specific implementation details for each object"}),"\n",(0,i.jsx)(n.li,{children:"the ability to hide complex implementation details and show only the necessary features of an object"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Inheritance","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"methods and properties contained in one class (super/parent class)"}),"\n",(0,i.jsx)(n.li,{children:"are made available to / reused by another class (child class)"}),"\n",(0,i.jsx)(n.li,{children:"enables the defining of a new class that inherits a parent class"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Polymorphism","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"allows the same method to take on different behaviors depending on which class is instantiated."}),"\n",(0,i.jsx)(n.li,{children:"methods can be redefined for derived classes."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Encapsulation","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"process of putting data and methods together as a single unit"}),"\n",(0,i.jsx)(n.li,{children:"putting properties and methods inside a class"}),"\n",(0,i.jsx)(n.li,{children:"ensures sensitive data is hidden from users by hiding values of a structure object inside a class"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Pseudocode","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"example 1:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"CLASS Car # class declaration \r\n\r\n    # class instance variables\r\n    PRIVATE Model: STRING\r\n    PRIVATE FuelType: STRING\r\n    \r\n    # constructor: `PUBLIC PROCEDURE NEW`\r\n    PUBLIC PROCEDURE NEW(CarModel: STRING,  CarFuelType: STRING)\r\n        Model <- CarModel\r\n        FuelType <- FuelType \r\n    ENDPROCEDURE\r\n\r\n    # idk\r\n    getFuel()\r\n    getModel()\r\n\r\nENDCLASS\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Class Inheritance diagrams","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["example 1\r\n",(0,i.jsx)(n.img,{alt:"alt text",src:s(1657).Z+"",width:"812",height:"442"}),"\r\n",(0,i.jsx)(n.img,{alt:"alt text",src:s(32512).Z+"",width:"560",height:"497"})]}),"\n",(0,i.jsxs)(n.li,{children:["example 2\r\n",(0,i.jsx)(n.img,{alt:"alt text",src:s(2114).Z+"",width:"738",height:"287"}),"\r\n",(0,i.jsx)(n.img,{alt:"alt text",src:s(49859).Z+"",width:"405",height:"222"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Recursion"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["features","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"must have a base case (stopping condition)"}),"\n",(0,i.jsx)(n.li,{children:"must have a general case"}),"\n",(0,i.jsx)(n.li,{children:"which calls itself (recursively) - defined in terms of itself"}),"\n",(0,i.jsx)(n.li,{children:"which changes its state and moves towards the base case"}),"\n",(0,i.jsx)(n.li,{children:"unwinding can occur once the base case is reached"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["why use stack to implement recursion?","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"the stack is a LIFO data structure"}),"\n",(0,i.jsx)(n.li,{children:"each recursive call is pushed onto the stack"}),"\n",(0,i.jsx)(n.li,{children:"and is then popped as the function ends"}),"\n",(0,i.jsx)(n.li,{children:"enables backtracking / unwinding"}),"\n",(0,i.jsx)(n.li,{children:"to maintain the required order"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Abstract Data Types - ADTs"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Stacks","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Push","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'FUNCTION Push(NewData: INTEGER) RETURNS STRING\r\n    IF StackFull() THEN                         # add only if not full\r\n        RETURN "The stack is full!"\r\n    ELSE\r\n        TopOfStack <- TopOfStack + 1            # increment top-of-stack pointer\r\n        ArrayStack[TopOfStack] <- NewInteger    # store value in top\r\n        RETURN "Item added"\r\n    ENDIF\r\nENDFUNCTION\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Algorithms"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Searching","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Linear Search [ O(n) ]"}),"\n",(0,i.jsxs)(n.li,{children:["Binary Search [ O(log n) ]","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"requirement"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"list should be already sorted"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"how to perform"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"find the middle item"}),"\n",(0,i.jsx)(n.li,{children:"check the value of the middle item in the list to be searched"}),"\n",(0,i.jsx)(n.li,{children:"if equal item searched for is found"}),"\n",(0,i.jsx)(n.li,{children:"if this is not equal / greater / less than the item searched for"}),"\n",(0,i.jsx)(n.li,{children:"discard the half of the list that does not contain the search item"}),"\n",(0,i.jsx)(n.li,{children:"repeat the above steps until the item searched for is found"}),"\n",(0,i.jsx)(n.li,{children:"or there is only one item left in the list (and nothing else to be searched for)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"how perform changes when theres more items in the array?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"increases the time to search the list increases"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"code"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Iterative Binary Search Function\r\n# It returns index of x in given array arr if present,\r\n# else returns -1\r\ndef binary_search(arr, x):\r\n    low = 0\r\n    high = len(arr) - 1\r\n    mid = 0\r\n\r\n    while low <= high:\r\n\r\n        mid = (high + low) // 2\r\n\r\n        if arr[mid] < x: # If x is greater, ignore left half\r\n            low = mid + 1\r\n\r\n        elif arr[mid] > x: # If x is smaller, ignore right half\r\n            high = mid - 1\r\n        \r\n        else: # means x is present at mid\r\n            return mid\r\n\r\n    \r\n    return -1 # then the element was not present\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Time Complexities"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"summary"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Order of Growth"}),(0,i.jsx)(n.th,{children:"Example"}),(0,i.jsx)(n.th,{children:"Explanation"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"O(1)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"GetFirstItem(List: ARRAY)"})}),(0,i.jsx)(n.td,{children:"The complexity of the algorithm does not change regardless of the data set size."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"O(n)"})}),(0,i.jsxs)(n.td,{children:["Linear search",(0,i.jsx)("br",{}),"Bubble sort on a sorted list"]}),(0,i.jsx)(n.td,{children:"Linear growth - Time complexity increases linearly with the size of the data set."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"O(log\u2082n)"})}),(0,i.jsx)(n.td,{children:"Binary search"}),(0,i.jsx)(n.td,{children:"The total time taken increases as the data set size increases, but each comparison halves the data set. So, the time taken increases by smaller amounts and approaches constant time."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"O(n\xb2)"})}),(0,i.jsxs)(n.td,{children:["Bubble sort",(0,i.jsx)("br",{}),"Insertion sort"]}),(0,i.jsx)(n.td,{children:"Polynomial growth - Common with algorithms that involve nested iterations over the data set."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"O(n\xb3)"})}),(0,i.jsx)(n.td,{children:"Deeper nested iterations"}),(0,i.jsx)(n.td,{children:"Polynomial growth - Deeper nested iterations will result in O(n\xb3), O(n\u2074), and so on."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"O(2\u207f)"})}),(0,i.jsx)(n.td,{children:"Recursive calculation of Fibonacci numbers"}),(0,i.jsx)(n.td,{children:"Exponential growth - Time complexity grows exponentially with the size of the data set."})]})]})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["what is meant by ",(0,i.jsx)(n.code,{children:"O(log n)"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"is a time complexity that uses logarithmic time"}),"\n",(0,i.jsx)(n.li,{children:"the time taken goes up linearly as the number of items rises exponentially"}),"\n",(0,i.jsx)(n.li,{children:"O(log n) is the word scenario time complexity"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Other"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["why exception handling?","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"to trap some runtime errors"}),"\n",(0,i.jsx)(n.li,{children:"to prevent a program halting unexpectedly"}),"\n",(0,i.jsx)(n.li,{children:"to produce meaningful error messages for these errors"}),"\n",(0,i.jsx)(n.li,{children:"example: divide by zero, file not found"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})}function o(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},1657:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image-1-63e6d06413cfa9a752f230aeb097c86b.png"},32512:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image-2-579d9ebfaf9c91f104c84e79184e17a0.png"},2114:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image-3-3409a6e01f4c869f023a6a7fee79dacf.png"},49859:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image-4-3b1a64890e6200ccded36c8034246910.png"},23594:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image-29c5b4f7a054a471576c3cff471684a4.png"},56213:(e,n,s)=>{s.d(n,{Z:()=>c,a:()=>l});var i=s(50959);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);