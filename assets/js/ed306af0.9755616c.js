"use strict";(self.webpackChunkhirusha=self.webpackChunkhirusha||[]).push([[1801],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>k});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var u=n.createContext({}),d=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},s=function(e){var t=d(e.components);return n.createElement(u.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,i=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=d(a),c=l,k=p["".concat(u,".").concat(c)]||p[c]||m[c]||i;return a?n.createElement(k,r(r({ref:t},s),{},{components:a})):n.createElement(k,r({ref:t},s))}));function k(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=a.length,r=new Array(i);r[0]=c;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[p]="string"==typeof e?e:l,r[1]=o;for(var d=2;d<i;d++)r[d]=a[d];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},450:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var n=a(7462),l=(a(7294),a(3905));const i={title:"Abstract Data Types",sidebar_label:"ADT",slug:"adt",sidebar_position:2},r=void 0,o={unversionedId:"study/cie_al/computer_science/paper_2/my_revision_notes/adt",id:"study/cie_al/computer_science/paper_2/my_revision_notes/adt",title:"Abstract Data Types",description:"Stack",source:"@site/docs/study/cie_al/computer_science/paper_2/my_revision_notes/adt.md",sourceDirName:"study/cie_al/computer_science/paper_2/my_revision_notes",slug:"/study/cie_al/computer_science/paper_2/my_revision_notes/adt",permalink:"/docs/study/cie_al/computer_science/paper_2/my_revision_notes/adt",draft:!1,editUrl:"https://github.com/hirusha-adi/hirusha/tree/main/docs/study/cie_al/computer_science/paper_2/my_revision_notes/adt.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Abstract Data Types",sidebar_label:"ADT",slug:"adt",sidebar_position:2},sidebar:"study",previous:{title:"Flowcharts",permalink:"/docs/study/cie_al/computer_science/paper_2/my_revision_notes/basics/flowcharts"},next:{title:"Diagrams",permalink:"/docs/study/cie_al/computer_science/paper_2/my_revision_notes/diagrams"}},u={},d=[{value:"Stack",id:"stack",level:2},{value:"Introduction/Features",id:"introductionfeatures",level:3},{value:"How does it work?",id:"how-does-it-work",level:4},{value:"why order has changed?",id:"why-order-has-changed",level:4},{value:"Where are they used?",id:"where-are-they-used",level:4},{value:"How to Implement a Stack?",id:"how-to-implement-a-stack",level:3},{value:"PUSH(&#39;A&#39;)",id:"pusha",level:3},{value:"POP()",id:"pop",level:3},{value:"Peek() / Top()",id:"peek--top",level:3},{value:"isEmpty()",id:"isempty",level:3},{value:"Linked List",id:"linked-list",level:2},{value:"Introduction",id:"introduction",level:3},{value:"Advantages",id:"advantages",level:3},{value:"Disadvantages",id:"disadvantages",level:3},{value:"How to Implement a Linked List?",id:"how-to-implement-a-linked-list",level:3},{value:"Key Terms",id:"key-terms",level:3},{value:"Node",id:"node",level:4},{value:"Pointer",id:"pointer",level:4},{value:"Start Pointer",id:"start-pointer",level:4},{value:"Null Pointer",id:"null-pointer",level:4},{value:"How to Add &#39;B&#39; to the Middle of &#39;A&#39; and &#39;C&#39; in a Linked List?",id:"how-to-add-b-to-the-middle-of-a-and-c-in-a-linked-list",level:3},{value:"Arranging / Changing Order of a linked list",id:"arranging--changing-order-of-a-linked-list",level:3},{value:"Queue",id:"queue",level:2},{value:"Introduction/Features",id:"introductionfeatures-1",level:3},{value:"How does it work?",id:"how-does-it-work-1",level:4},{value:"How to Implement a Queue?",id:"how-to-implement-a-queue",level:3},{value:"Circular Queues",id:"circular-queues",level:3},{value:"EnQueue (Add an Item)",id:"enqueue-add-an-item",level:3},{value:"checks done:",id:"checks-done",level:4},{value:"how to make adding detect errors?",id:"how-to-make-adding-detect-errors",level:4},{value:"DeQueue (Remove an Item)",id:"dequeue-remove-an-item",level:3},{value:"checks done:",id:"checks-done-1",level:4},{value:"Front",id:"front",level:3},{value:"IsEmpty",id:"isempty-1",level:3},{value:"Size",id:"size",level:3},{value:"Special Case: When Front-of-Queue Pointer and End-of-Queue Pointer Have the Same Value?",id:"special-case-when-front-of-queue-pointer-and-end-of-queue-pointer-have-the-same-value",level:3}],s={toc:d},p="wrapper";function m(e){let{components:t,...a}=e;return(0,l.kt)(p,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"stack"},"Stack"),(0,l.kt)("h3",{id:"introductionfeatures"},"Introduction/Features"),(0,l.kt)("h4",{id:"how-does-it-work"},(0,l.kt)("a",{parentName:"h4",href:"https://www.youtube.com/watch?v=I37kGX-nZEI&pp=ygUQc3RhY2tzIGV4cGxhaW5lZA%3D%3D"},"How does it work?")),(0,l.kt)("h4",{id:"why-order-has-changed"},"why order has changed?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the recieved string will be reversed."),(0,l.kt)("li",{parentName:"ul"},"because of LIFO (Last In First Out)")),(0,l.kt)("h4",{id:"where-are-they-used"},"Where are they used?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the undo function"),(0,l.kt)("li",{parentName:"ul"},"back button in the web browser")),(0,l.kt)("h3",{id:"how-to-implement-a-stack"},"How to Implement a Stack?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"declare 1D array of type string"),(0,l.kt)("li",{parentName:"ul"},"Number of elements it corresponds is the size of the stack"),(0,l.kt)("li",{parentName:"ul"},"declare an Integer variable to use as a stack pointer"),(0,l.kt)("li",{parentName:"ul"},"use StackPointer as an index to the array"),(0,l.kt)("li",{parentName:"ul"},"pointers and variables are initialized to indicate an empty stack"),(0,l.kt)("li",{parentName:"ul"},"store each item on stack as one array element"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"push")," will add a new element + increment Stack Pointer"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pop")," will remove the lastly pushed element and return it + decrement the stack Pointer"),(0,l.kt)("li",{parentName:"ul"},"both ",(0,l.kt)("inlineCode",{parentName:"li"},"push")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"pop")," should check weather the stack is ",(0,l.kt)("strong",{parentName:"li"},"empty")," before performing stuff")),(0,l.kt)("h3",{id:"pusha"},"PUSH('A')"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"(basically, added to TOP)"),(0,l.kt)("li",{parentName:"ul"},"Top-Of-Stack Pointer is incremented"),(0,l.kt)("li",{parentName:"ul"},"data value is added to that location")),(0,l.kt)("h3",{id:"pop"},"POP()"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"decrement Top-Of-Stack-Pointer and return the value to a varaible\n"),(0,l.kt)("li",{parentName:"ul"},"often used as:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Value <- Pop()"))))),(0,l.kt)("h3",{id:"peek--top"},"Peek() / Top()"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"This operation retrieves the value of the topmost element in the stack without removing it.")),(0,l.kt)("h3",{id:"isempty"},"isEmpty()"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"This operation checks if the stack is empty, i.e."),(0,l.kt)("li",{parentName:"ul"},"it returns true if there are no elements in the stack and false otherwise.")),(0,l.kt)("h2",{id:"linked-list"},"Linked List"),(0,l.kt)("h3",{id:"introduction"},"Introduction"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Made up of nodes that consists of two parts"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Data")," - contains actual data"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Link")," - contains address of the next node"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Memmory Addresses aren't stored contiguosly in RAM"))),(0,l.kt)("h3",{id:"advantages"},"Advantages"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"pointers determine the order of data"),(0,l.kt)("li",{parentName:"ul"},"easier to add and delete data")),(0,l.kt)("h3",{id:"disadvantages"},"Disadvantages"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"need to store both data value and a pointer"),(0,l.kt)("li",{parentName:"ul"},"more complex to setup / implement")),(0,l.kt)("h3",{id:"how-to-implement-a-linked-list"},"How to Implement a Linked List?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"define a record with data element and the pointer"),(0,l.kt)("li",{parentName:"ul"},"declare a 1D array of this type"),(0,l.kt)("li",{parentName:"ul"},"pointers should be type integer"),(0,l.kt)("li",{parentName:"ul"},"null pointer can have -1 (or any other abnormal value)"),(0,l.kt)("li",{parentName:"ul"},"routines are required to add/delete/search data")),(0,l.kt)("p",null,"or"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"1D array to store the data and a second 1D array to store the pointers"),(0,l.kt)("li",{parentName:"ul"},"integer variable to hold the start pointer and an integer variable to store the next free pointer"),(0,l.kt)("li",{parentName:"ul"},"both data value and representing node should have the same index")),(0,l.kt)("h3",{id:"key-terms"},"Key Terms"),(0,l.kt)("h4",{id:"node"},"Node"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"an element of a list")),(0,l.kt)("h4",{id:"pointer"},"Pointer"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a variable that stores the address of the node it points to")),(0,l.kt)("h4",{id:"start-pointer"},"Start Pointer"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"has ",(0,l.kt)("strong",{parentName:"li"},"no")," data value"),(0,l.kt)("li",{parentName:"ul"},"points to the first element (node with first data value)")),(0,l.kt)("h4",{id:"null-pointer"},"Null Pointer"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"doesn't point to anything"),(0,l.kt)("li",{parentName:"ul"},"no any nodes come after it"),(0,l.kt)("li",{parentName:"ul"},"linked list ends there"),(0,l.kt)("li",{parentName:"ul"},"has a data value")),(0,l.kt)("h3",{id:"how-to-add-b-to-the-middle-of-a-and-c-in-a-linked-list"},"How to Add 'B' to the Middle of 'A' and 'C' in a Linked List?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"check for a free node"),(0,l.kt)("li",{parentName:"ul"},"search for the correct insertion point"),(0,l.kt)("li",{parentName:"ul"},"point node to start pointer of free list from pointer A will be changed to B instead of C "),(0,l.kt)("li",{parentName:"ul"},"pointer from B will be set to point to node C")),(0,l.kt)("h3",{id:"arranging--changing-order-of-a-linked-list"},"Arranging / Changing Order of a linked list"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/1163847683207856178/1163849022709174292/image.png?ex=654111de&is=652e9cde&hm=71eb20968f179ea8c372646c1956491ced9a24aa17563a55592ced91eaedcebf&",alt:"img3"})),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"when elements are removed, leave them there unless its replaced"),(0,l.kt)("li",{parentName:"ul"},"(we assume theres no garbage collection going on)")),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/1163847683207856178/1164023313002151996/image.png?ex=6541b430&is=652f3f30&hm=a0b840d2acbd3e103e3229164561aec2002d03eb974e56c87d5e705e67a5fec8&",alt:"img14"})),(0,l.kt)("h2",{id:"queue"},"Queue"),(0,l.kt)("h3",{id:"introductionfeatures-1"},"Introduction/Features"),(0,l.kt)("h4",{id:"how-does-it-work-1"},(0,l.kt)("a",{parentName:"h4",href:"https://www.youtube.com/watch?v=v9BMdz5m5Vo"},"How does it work?")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"each queue element contains one data item"),(0,l.kt)("li",{parentName:"ul"},"theres a pointer at start of each queue"),(0,l.kt)("li",{parentName:"ul"},"theres a pointer at end of each queue"),(0,l.kt)("li",{parentName:"ul"},"data is added to back"),(0,l.kt)("li",{parentName:"ul"},"First In First Out - ",(0,l.kt)("strong",{parentName:"li"},"FIFO")),(0,l.kt)("li",{parentName:"ul"},"maybe circular")),(0,l.kt)("h3",{id:"how-to-implement-a-queue"},"How to Implement a Queue?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"declare 1D array of give size and given type"),(0,l.kt)("li",{parentName:"ul"},"declare integer for FoQ and EoQ pointer"),(0,l.kt)("li",{parentName:"ul"},"initialize FoQ, EoQ to represent an empty queue"),(0,l.kt)("li",{parentName:"ul"},"Declare integer varaibale ",(0,l.kt)("inlineCode",{parentName:"li"},"NumberInQueue")," to represent the number of items in the queue"),(0,l.kt)("li",{parentName:"ul"},"Delcare integer variable ",(0,l.kt)("inlineCode",{parentName:"li"},"SizeOfQueue")," to represent the size of the Queue"),(0,l.kt)("li",{parentName:"ul"},"Initialize the size of queue")),(0,l.kt)("h3",{id:"circular-queues"},"Circular Queues"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"As Linear Queues involves a lot of moving data,"),(0,l.kt)("li",{parentName:"ul"},"we use Circular Queues to improve efficiency")),(0,l.kt)("h3",{id:"enqueue-add-an-item"},"EnQueue (Add an Item)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"(basiclaly, add to end)"),(0,l.kt)("li",{parentName:"ul"},"End-of-Queue Pointer increments"),(0,l.kt)("li",{parentName:"ul"},"new data value is stored there")),(0,l.kt)("h4",{id:"checks-done"},"checks done:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"are there any unused elements in the queue?"),(0,l.kt)("li",{parentName:"ul"},"the queue is not empty")),(0,l.kt)("h4",{id:"how-to-make-adding-detect-errors"},"how to make adding detect errors?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if EoQ = FoQ, then error out"),(0,l.kt)("li",{parentName:"ul"},"... as the queue is full"),(0,l.kt)("li",{parentName:"ul"},"increment the EoQ"),(0,l.kt)("li",{parentName:"ul"},"manage a wrap around")),(0,l.kt)("h3",{id:"dequeue-remove-an-item"},"DeQueue (Remove an Item)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"(basically, remove from front)"),(0,l.kt)("li",{parentName:"ul"},"Front-of-Queue Pointer is decremented"),(0,l.kt)("li",{parentName:"ul"},"the data value in original place is removed and returned"),(0,l.kt)("li",{parentName:"ul"},"it will be stored set to a given variable")),(0,l.kt)("h4",{id:"checks-done-1"},"checks done:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"are there items in the queue to remove?")),(0,l.kt)("h3",{id:"front"},"Front"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Returns the element at the front without removing it.")),(0,l.kt)("h3",{id:"isempty-1"},"IsEmpty"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Checks if the queue is empty.")),(0,l.kt)("h3",{id:"size"},"Size"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Returns the number of elements in the queue.")),(0,l.kt)("h3",{id:"special-case-when-front-of-queue-pointer-and-end-of-queue-pointer-have-the-same-value"},"Special Case: When Front-of-Queue Pointer and End-of-Queue Pointer Have the Same Value?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"there is only one data item in the queue")),(0,l.kt)("admonition",{title:"NOTE",type:"caution"},(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},"when elements are removed, leave them there unless its replaced"),(0,l.kt)("li",{parentName:"ul"},"(we assume theres no garbage collection going on)"))))}m.isMDXComponent=!0}}]);